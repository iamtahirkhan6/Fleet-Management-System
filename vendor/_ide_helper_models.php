<?php
/** @noinspection PhpUndefinedClassInspection */
/** @noinspection PhpFullyQualifiedNameUsageInspection */
/** @noinspection PhpUnusedAliasInspection */

namespace App\Domain\Agent\Models {

    use Illuminate\Support\Carbon;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use App\Domain\General\Models\PhoneNumber;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Relations\MorphToMany;
    use LaravelIdea\Helper\App\Domain\Agent\Models\_AgentCollection;
    use LaravelIdea\Helper\App\Domain\Agent\Models\_AgentQueryBuilder;
    use LaravelIdea\Helper\App\Domain\General\Models\_PhoneNumberQueryBuilder;

    /**
	 * @property int         $id
	 * @property string      $name
	 * @property int|null    $company_id
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @property PhoneNumber $phoneNumber
	 * @method MorphToMany|_PhoneNumberQueryBuilder phoneNumber()
	 * @method _AgentQueryBuilder newModelQuery()
	 * @method _AgentQueryBuilder newQuery()
	 * @method static _AgentQueryBuilder query()
	 * @method static _AgentCollection|Agent[] all()
	 * @method static _AgentQueryBuilder whereId($value)
	 * @method static _AgentQueryBuilder whereName($value)
	 * @method static _AgentQueryBuilder whereCompanyId($value)
	 * @method static _AgentQueryBuilder whereCreatedAt($value)
	 * @method static _AgentQueryBuilder whereUpdatedAt($value)
	 * @method static Agent baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Agent create(array $attributes = [])
	 * @method static _AgentQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _AgentCollection|Agent[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _AgentQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Agent|null find($id, array $columns = [ '*' ])
	 * @method static _AgentCollection|Agent[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Agent findOrFail($id, array $columns = [ '*' ])
	 * @method static _AgentCollection|Agent[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Agent first(array|string $columns = [ '*' ])
	 * @method static Agent firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Agent firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Agent firstOrFail(array $columns = [ '*' ])
	 * @method static Agent firstOrNew(array $attributes = [], array $values = [])
	 * @method static Agent firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Agent forceCreate(array $attributes)
	 * @method static _AgentCollection|Agent[] fromQuery(string $query, array $bindings = [])
	 * @method static _AgentCollection|Agent[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Agent getModel()
	 * @method static Agent[] getModels(array|string $columns = [ '*' ])
	 * @method static _AgentQueryBuilder getQuery()
	 * @method static _AgentQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _AgentCollection|Agent[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _AgentQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _AgentQueryBuilder latest(Expression|string $column = null)
	 * @method static _AgentQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _AgentQueryBuilder limit(int $value)
	 * @method static Agent make(array $attributes = [])
	 * @method static Agent newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _AgentQueryBuilder offset(int $value)
	 * @method static _AgentQueryBuilder oldest(Expression|string $column = null)
	 * @method static _AgentQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _AgentQueryBuilder orderByDesc(string $column)
	 * @method static _AgentQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Agent[]|_AgentCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _AgentQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _AgentQueryBuilder select(array $columns = [ '*' ])
	 * @method static _AgentQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Agent[]|_AgentCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _AgentQueryBuilder skip(int $value)
	 * @method static Agent sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _AgentQueryBuilder take(int $value)
	 * @method static _AgentQueryBuilder tap(callable $callback)
	 * @method static _AgentQueryBuilder truncate()
	 * @method static _AgentQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Agent updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _AgentQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _AgentQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _AgentQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _AgentQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _AgentQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _AgentQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _AgentQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _AgentQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _AgentQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _AgentQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _AgentQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _AgentQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _AgentQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _AgentQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _AgentQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _AgentQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _AgentQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _AgentQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _AgentQueryBuilder whereKey($id)
	 * @method static _AgentQueryBuilder whereKeyNot($id)
	 * @method static _AgentQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _AgentQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _AgentQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _AgentQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _AgentQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _AgentQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _AgentQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _AgentQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _AgentQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _AgentQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _AgentQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _AgentQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _AgentQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _AgentQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _AgentQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _AgentQueryBuilder withCasts(array $casts)
	 * @method static _AgentQueryBuilder withCount($relations)
	 * @method static _AgentQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _AgentQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _AgentQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _AgentQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _AgentQueryBuilder without($relations)
	 * @method static _AgentQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _AgentQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Agent extends Model { }
}

namespace App\Domain\Company\Models {

    use Illuminate\Support\Carbon;
    use App\Domain\Agent\Models\Agent;
    use App\Domain\Fleet\Models\Fleet;
    use App\Domain\Office\Models\Office;
    use Illuminate\Pagination\Paginator;
    use App\Domain\Project\Models\Project;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use App\Domain\Employee\Models\Employee;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\HasOne;
    use Illuminate\Database\Eloquent\Relations\HasMany;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use LaravelIdea\Helper\App\Models\_UserQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Agent\Models\_AgentCollection;
    use LaravelIdea\Helper\App\Domain\Fleet\Models\_FleetCollection;
    use LaravelIdea\Helper\App\Domain\Agent\Models\_AgentQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Fleet\Models\_FleetQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Office\Models\_OfficeCollection;
    use LaravelIdea\Helper\App\Domain\Company\Models\_CompanyCollection;
    use LaravelIdea\Helper\App\Domain\Office\Models\_OfficeQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Project\Models\_ProjectCollection;
    use LaravelIdea\Helper\App\Domain\Company\Models\_CompanyQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Employee\Models\_EmployeeCollection;
    use LaravelIdea\Helper\App\Domain\Project\Models\_ProjectQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Employee\Models\_EmployeeQueryBuilder;

    /**
	 * @property int                            $id
	 * @property string                         $name
	 * @property string                         $short_name
	 * @property string|null                    $address
	 * @property string|null                    $city
	 * @property string|null                    $state
	 * @property string|null                    $gstin
	 * @property string|null                    $pan
	 * @property bool                           $use_razorpay
	 * @property string|null                    $razorpay_key_id
	 * @property string|null                    $razorpay_key_secret
	 * @property int                            $user_id
	 * @property Carbon|null                    $created_at
	 * @property Carbon|null                    $updated_at
	 * @property _AgentCollection|Agent[]       $agents
	 * @method HasMany|_AgentQueryBuilder agents()
	 * @property _EmployeeCollection|Employee[] $employees
	 * @method HasMany|_EmployeeQueryBuilder employees()
	 * @property _FleetCollection|Fleet[]       $fleets
	 * @method HasMany|_FleetQueryBuilder fleets()
	 * @property User                           $manager
	 * @method HasOne|_UserQueryBuilder manager()
	 * @property _OfficeCollection|Office[]     $offices
	 * @method HasMany|_OfficeQueryBuilder offices()
	 * @property _ProjectCollection|Project[]   $projects
	 * @method HasMany|_ProjectQueryBuilder projects()
	 * @method _CompanyQueryBuilder newModelQuery()
	 * @method _CompanyQueryBuilder newQuery()
	 * @method static _CompanyQueryBuilder query()
	 * @method static _CompanyCollection|Company[] all()
	 * @method static _CompanyQueryBuilder whereId($value)
	 * @method static _CompanyQueryBuilder whereName($value)
	 * @method static _CompanyQueryBuilder whereShortName($value)
	 * @method static _CompanyQueryBuilder whereAddress($value)
	 * @method static _CompanyQueryBuilder whereCity($value)
	 * @method static _CompanyQueryBuilder whereState($value)
	 * @method static _CompanyQueryBuilder whereGstin($value)
	 * @method static _CompanyQueryBuilder wherePan($value)
	 * @method static _CompanyQueryBuilder whereUseRazorpay($value)
	 * @method static _CompanyQueryBuilder whereRazorpayKeyId($value)
	 * @method static _CompanyQueryBuilder whereRazorpayKeySecret($value)
	 * @method static _CompanyQueryBuilder whereUserId($value)
	 * @method static _CompanyQueryBuilder whereCreatedAt($value)
	 * @method static _CompanyQueryBuilder whereUpdatedAt($value)
	 * @method static Company baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Company create(array $attributes = [])
	 * @method static _CompanyQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _CompanyCollection|Company[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _CompanyQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Company|null find($id, array $columns = [ '*' ])
	 * @method static _CompanyCollection|Company[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Company findOrFail($id, array $columns = [ '*' ])
	 * @method static _CompanyCollection|Company[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Company first(array|string $columns = [ '*' ])
	 * @method static Company firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Company firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Company firstOrFail(array $columns = [ '*' ])
	 * @method static Company firstOrNew(array $attributes = [], array $values = [])
	 * @method static Company firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Company forceCreate(array $attributes)
	 * @method static _CompanyCollection|Company[] fromQuery(string $query, array $bindings = [])
	 * @method static _CompanyCollection|Company[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Company getModel()
	 * @method static Company[] getModels(array|string $columns = [ '*' ])
	 * @method static _CompanyQueryBuilder getQuery()
	 * @method static _CompanyQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _CompanyCollection|Company[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _CompanyQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _CompanyQueryBuilder latest(Expression|string $column = null)
	 * @method static _CompanyQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _CompanyQueryBuilder limit(int $value)
	 * @method static Company make(array $attributes = [])
	 * @method static Company newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _CompanyQueryBuilder offset(int $value)
	 * @method static _CompanyQueryBuilder oldest(Expression|string $column = null)
	 * @method static _CompanyQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _CompanyQueryBuilder orderByDesc(string $column)
	 * @method static _CompanyQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Company[]|_CompanyCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _CompanyQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _CompanyQueryBuilder select(array $columns = [ '*' ])
	 * @method static _CompanyQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Company[]|_CompanyCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _CompanyQueryBuilder skip(int $value)
	 * @method static Company sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _CompanyQueryBuilder take(int $value)
	 * @method static _CompanyQueryBuilder tap(callable $callback)
	 * @method static _CompanyQueryBuilder truncate()
	 * @method static _CompanyQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Company updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _CompanyQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _CompanyQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _CompanyQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _CompanyQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _CompanyQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _CompanyQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CompanyQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CompanyQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _CompanyQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _CompanyQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _CompanyQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _CompanyQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _CompanyQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _CompanyQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _CompanyQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _CompanyQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _CompanyQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _CompanyQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _CompanyQueryBuilder whereKey($id)
	 * @method static _CompanyQueryBuilder whereKeyNot($id)
	 * @method static _CompanyQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CompanyQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _CompanyQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _CompanyQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _CompanyQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _CompanyQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _CompanyQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _CompanyQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _CompanyQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _CompanyQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _CompanyQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CompanyQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _CompanyQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _CompanyQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _CompanyQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _CompanyQueryBuilder withCasts(array $casts)
	 * @method static _CompanyQueryBuilder withCount($relations)
	 * @method static _CompanyQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _CompanyQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _CompanyQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _CompanyQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _CompanyQueryBuilder without($relations)
	 * @method static _CompanyQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _CompanyQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Company extends Model { }
}

namespace App\Domain\Consignee\Models {

    use Illuminate\Support\Carbon;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use LaravelIdea\Helper\App\Domain\Consignee\Models\_ConsigneeCollection;
    use LaravelIdea\Helper\App\Domain\Consignee\Models\_ConsigneeQueryBuilder;

    /**
	 * @property int         $id
	 * @property string      $name
	 * @property string      $address
	 * @property string      $gstin_uin
	 * @property string      $pan
	 * @property string      $state_name
	 * @property int         $company_id
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _ConsigneeQueryBuilder newModelQuery()
	 * @method _ConsigneeQueryBuilder newQuery()
	 * @method static _ConsigneeQueryBuilder query()
	 * @method static _ConsigneeCollection|Consignee[] all()
	 * @method static _ConsigneeQueryBuilder whereId($value)
	 * @method static _ConsigneeQueryBuilder whereName($value)
	 * @method static _ConsigneeQueryBuilder whereAddress($value)
	 * @method static _ConsigneeQueryBuilder whereGstinUin($value)
	 * @method static _ConsigneeQueryBuilder wherePan($value)
	 * @method static _ConsigneeQueryBuilder whereStateName($value)
	 * @method static _ConsigneeQueryBuilder whereCompanyId($value)
	 * @method static _ConsigneeQueryBuilder whereCreatedAt($value)
	 * @method static _ConsigneeQueryBuilder whereUpdatedAt($value)
	 * @method static Consignee baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Consignee create(array $attributes = [])
	 * @method static _ConsigneeQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _ConsigneeCollection|Consignee[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _ConsigneeQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Consignee|null find($id, array $columns = [ '*' ])
	 * @method static _ConsigneeCollection|Consignee[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Consignee findOrFail($id, array $columns = [ '*' ])
	 * @method static _ConsigneeCollection|Consignee[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Consignee first(array|string $columns = [ '*' ])
	 * @method static Consignee firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Consignee firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Consignee firstOrFail(array $columns = [ '*' ])
	 * @method static Consignee firstOrNew(array $attributes = [], array $values = [])
	 * @method static Consignee firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Consignee forceCreate(array $attributes)
	 * @method static _ConsigneeCollection|Consignee[] fromQuery(string $query, array $bindings = [])
	 * @method static _ConsigneeCollection|Consignee[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Consignee getModel()
	 * @method static Consignee[] getModels(array|string $columns = [ '*' ])
	 * @method static _ConsigneeQueryBuilder getQuery()
	 * @method static _ConsigneeQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _ConsigneeCollection|Consignee[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _ConsigneeQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _ConsigneeQueryBuilder latest(Expression|string $column = null)
	 * @method static _ConsigneeQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _ConsigneeQueryBuilder limit(int $value)
	 * @method static Consignee make(array $attributes = [])
	 * @method static Consignee newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _ConsigneeQueryBuilder offset(int $value)
	 * @method static _ConsigneeQueryBuilder oldest(Expression|string $column = null)
	 * @method static _ConsigneeQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _ConsigneeQueryBuilder orderByDesc(string $column)
	 * @method static _ConsigneeQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Consignee[]|_ConsigneeCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _ConsigneeQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _ConsigneeQueryBuilder select(array $columns = [ '*' ])
	 * @method static _ConsigneeQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Consignee[]|_ConsigneeCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _ConsigneeQueryBuilder skip(int $value)
	 * @method static Consignee sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _ConsigneeQueryBuilder take(int $value)
	 * @method static _ConsigneeQueryBuilder tap(callable $callback)
	 * @method static _ConsigneeQueryBuilder truncate()
	 * @method static _ConsigneeQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Consignee updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _ConsigneeQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _ConsigneeQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _ConsigneeQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _ConsigneeQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _ConsigneeQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _ConsigneeQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ConsigneeQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ConsigneeQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _ConsigneeQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _ConsigneeQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _ConsigneeQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _ConsigneeQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _ConsigneeQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _ConsigneeQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _ConsigneeQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _ConsigneeQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _ConsigneeQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _ConsigneeQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _ConsigneeQueryBuilder whereKey($id)
	 * @method static _ConsigneeQueryBuilder whereKeyNot($id)
	 * @method static _ConsigneeQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ConsigneeQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _ConsigneeQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _ConsigneeQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _ConsigneeQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _ConsigneeQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _ConsigneeQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _ConsigneeQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _ConsigneeQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _ConsigneeQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _ConsigneeQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ConsigneeQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _ConsigneeQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _ConsigneeQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _ConsigneeQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _ConsigneeQueryBuilder withCasts(array $casts)
	 * @method static _ConsigneeQueryBuilder withCount($relations)
	 * @method static _ConsigneeQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _ConsigneeQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _ConsigneeQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _ConsigneeQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _ConsigneeQueryBuilder without($relations)
	 * @method static _ConsigneeQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _ConsigneeQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Consignee extends Model { }
}

namespace App\Domain\Document\Models {

    use Illuminate\Support\Carbon;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\HasMany;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Relations\BelongsTo;
    use LaravelIdea\Helper\App\Domain\Document\Models\_DocumentCollection;
    use LaravelIdea\Helper\App\Domain\Document\Models\_DocumentQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Document\Models\_DocumentCategoryCollection;
    use LaravelIdea\Helper\App\Domain\Document\Models\_DocumentCategoryQueryBuilder;

    /**
	 * @property int                                            $id
	 * @property string|null                                    $uid_num
	 * @property string                                         $path
	 * @property int                                            $document_category_id
	 * @property int                                            $documentable_id
	 * @property string                                         $documentable_type
	 * @property Carbon|null                                    $created_at
	 * @property Carbon|null                                    $updated_at
	 * @property int|null                                       $trip_id
	 * @property _DocumentCategoryCollection|DocumentCategory[] $categories
	 * @method HasMany|_DocumentCategoryQueryBuilder categories()
	 * @property Model                                          $documentable
	 * @method MorphTo documentable()
	 * @method _DocumentQueryBuilder newModelQuery()
	 * @method _DocumentQueryBuilder newQuery()
	 * @method static _DocumentQueryBuilder query()
	 * @method static _DocumentCollection|Document[] all()
	 * @method static _DocumentQueryBuilder whereId($value)
	 * @method static _DocumentQueryBuilder whereUidNum($value)
	 * @method static _DocumentQueryBuilder wherePath($value)
	 * @method static _DocumentQueryBuilder whereDocumentCategoryId($value)
	 * @method static _DocumentQueryBuilder whereDocumentableId($value)
	 * @method static _DocumentQueryBuilder whereDocumentableType($value)
	 * @method static _DocumentQueryBuilder whereCreatedAt($value)
	 * @method static _DocumentQueryBuilder whereUpdatedAt($value)
	 * @method static _DocumentQueryBuilder whereTripId($value)
	 * @method static Document baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Document create(array $attributes = [])
	 * @method static _DocumentQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _DocumentCollection|Document[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _DocumentQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Document|null find($id, array $columns = [ '*' ])
	 * @method static _DocumentCollection|Document[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Document findOrFail($id, array $columns = [ '*' ])
	 * @method static _DocumentCollection|Document[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Document first(array|string $columns = [ '*' ])
	 * @method static Document firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Document firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Document firstOrFail(array $columns = [ '*' ])
	 * @method static Document firstOrNew(array $attributes = [], array $values = [])
	 * @method static Document firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Document forceCreate(array $attributes)
	 * @method static _DocumentCollection|Document[] fromQuery(string $query, array $bindings = [])
	 * @method static _DocumentCollection|Document[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Document getModel()
	 * @method static Document[] getModels(array|string $columns = [ '*' ])
	 * @method static _DocumentQueryBuilder getQuery()
	 * @method static _DocumentQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _DocumentCollection|Document[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _DocumentQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _DocumentQueryBuilder latest(Expression|string $column = null)
	 * @method static _DocumentQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _DocumentQueryBuilder limit(int $value)
	 * @method static Document make(array $attributes = [])
	 * @method static Document newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _DocumentQueryBuilder offset(int $value)
	 * @method static _DocumentQueryBuilder oldest(Expression|string $column = null)
	 * @method static _DocumentQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _DocumentQueryBuilder orderByDesc(string $column)
	 * @method static _DocumentQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Document[]|_DocumentCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _DocumentQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _DocumentQueryBuilder select(array $columns = [ '*' ])
	 * @method static _DocumentQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Document[]|_DocumentCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _DocumentQueryBuilder skip(int $value)
	 * @method static Document sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _DocumentQueryBuilder take(int $value)
	 * @method static _DocumentQueryBuilder tap(callable $callback)
	 * @method static _DocumentQueryBuilder truncate()
	 * @method static _DocumentQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Document updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _DocumentQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _DocumentQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _DocumentQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _DocumentQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _DocumentQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _DocumentQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _DocumentQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _DocumentQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _DocumentQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _DocumentQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _DocumentQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _DocumentQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _DocumentQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _DocumentQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _DocumentQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _DocumentQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _DocumentQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _DocumentQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _DocumentQueryBuilder whereKey($id)
	 * @method static _DocumentQueryBuilder whereKeyNot($id)
	 * @method static _DocumentQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _DocumentQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _DocumentQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _DocumentQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _DocumentQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _DocumentQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _DocumentQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _DocumentQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _DocumentQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _DocumentQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _DocumentQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _DocumentQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _DocumentQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _DocumentQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _DocumentQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _DocumentQueryBuilder withCasts(array $casts)
	 * @method static _DocumentQueryBuilder withCount($relations)
	 * @method static _DocumentQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _DocumentQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _DocumentQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _DocumentQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _DocumentQueryBuilder without($relations)
	 * @method static _DocumentQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _DocumentQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Document extends Model { }

	/**
	 * @property int         $id
	 * @property string      $name
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @property Document    $categories
	 * @method BelongsTo|_DocumentQueryBuilder categories()
	 * @method _DocumentCategoryQueryBuilder newModelQuery()
	 * @method _DocumentCategoryQueryBuilder newQuery()
	 * @method static _DocumentCategoryQueryBuilder query()
	 * @method static _DocumentCategoryCollection|DocumentCategory[] all()
	 * @method static _DocumentCategoryQueryBuilder whereId($value)
	 * @method static _DocumentCategoryQueryBuilder whereName($value)
	 * @method static _DocumentCategoryQueryBuilder whereCreatedAt($value)
	 * @method static _DocumentCategoryQueryBuilder whereUpdatedAt($value)
	 * @method static DocumentCategory baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static DocumentCategory create(array $attributes = [])
	 * @method static _DocumentCategoryQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _DocumentCategoryCollection|DocumentCategory[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _DocumentCategoryQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static DocumentCategory|null find($id, array $columns = [ '*' ])
	 * @method static _DocumentCategoryCollection|DocumentCategory[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static DocumentCategory findOrFail($id, array $columns = [ '*' ])
	 * @method static _DocumentCategoryCollection|DocumentCategory[] findOrNew($id, array $columns = [ '*' ])
	 * @method static DocumentCategory first(array|string $columns = [ '*' ])
	 * @method static DocumentCategory firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static DocumentCategory firstOrCreate(array $attributes = [], array $values = [])
	 * @method static DocumentCategory firstOrFail(array $columns = [ '*' ])
	 * @method static DocumentCategory firstOrNew(array $attributes = [], array $values = [])
	 * @method static DocumentCategory firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static DocumentCategory forceCreate(array $attributes)
	 * @method static _DocumentCategoryCollection|DocumentCategory[] fromQuery(string $query, array $bindings = [])
	 * @method static _DocumentCategoryCollection|DocumentCategory[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static DocumentCategory getModel()
	 * @method static DocumentCategory[] getModels(array|string $columns = [ '*' ])
	 * @method static _DocumentCategoryQueryBuilder getQuery()
	 * @method static _DocumentCategoryQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _DocumentCategoryCollection|DocumentCategory[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _DocumentCategoryQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _DocumentCategoryQueryBuilder latest(Expression|string $column = null)
	 * @method static _DocumentCategoryQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _DocumentCategoryQueryBuilder limit(int $value)
	 * @method static DocumentCategory make(array $attributes = [])
	 * @method static DocumentCategory newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _DocumentCategoryQueryBuilder offset(int $value)
	 * @method static _DocumentCategoryQueryBuilder oldest(Expression|string $column = null)
	 * @method static _DocumentCategoryQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _DocumentCategoryQueryBuilder orderByDesc(string $column)
	 * @method static _DocumentCategoryQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|DocumentCategory[]|_DocumentCategoryCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _DocumentCategoryQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _DocumentCategoryQueryBuilder select(array $columns = [ '*' ])
	 * @method static _DocumentCategoryQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|DocumentCategory[]|_DocumentCategoryCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _DocumentCategoryQueryBuilder skip(int $value)
	 * @method static DocumentCategory sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _DocumentCategoryQueryBuilder take(int $value)
	 * @method static _DocumentCategoryQueryBuilder tap(callable $callback)
	 * @method static _DocumentCategoryQueryBuilder truncate()
	 * @method static _DocumentCategoryQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static DocumentCategory updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _DocumentCategoryQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _DocumentCategoryQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _DocumentCategoryQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _DocumentCategoryQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _DocumentCategoryQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _DocumentCategoryQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _DocumentCategoryQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _DocumentCategoryQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _DocumentCategoryQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _DocumentCategoryQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _DocumentCategoryQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _DocumentCategoryQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _DocumentCategoryQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _DocumentCategoryQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _DocumentCategoryQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _DocumentCategoryQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _DocumentCategoryQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _DocumentCategoryQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _DocumentCategoryQueryBuilder whereKey($id)
	 * @method static _DocumentCategoryQueryBuilder whereKeyNot($id)
	 * @method static _DocumentCategoryQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _DocumentCategoryQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _DocumentCategoryQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _DocumentCategoryQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _DocumentCategoryQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _DocumentCategoryQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _DocumentCategoryQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _DocumentCategoryQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _DocumentCategoryQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _DocumentCategoryQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _DocumentCategoryQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _DocumentCategoryQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _DocumentCategoryQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _DocumentCategoryQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _DocumentCategoryQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _DocumentCategoryQueryBuilder withCasts(array $casts)
	 * @method static _DocumentCategoryQueryBuilder withCount($relations)
	 * @method static _DocumentCategoryQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _DocumentCategoryQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _DocumentCategoryQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _DocumentCategoryQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _DocumentCategoryQueryBuilder without($relations)
	 * @method static _DocumentCategoryQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _DocumentCategoryQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class DocumentCategory extends Model { }
}

namespace App\Domain\Employee\Models {

    use Illuminate\Support\Carbon;
    use App\Domain\Trip\Models\Trip;
    use App\Domain\Office\Models\Office;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use App\Domain\General\Models\PhoneNumber;
    use App\Domain\Payment\Models\BankAccount;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\HasOne;
    use Illuminate\Database\Eloquent\Relations\HasMany;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Relations\BelongsTo;
    use Illuminate\Database\Eloquent\Relations\MorphToMany;
    use LaravelIdea\Helper\App\Domain\Trip\Models\_TripCollection;
    use LaravelIdea\Helper\App\Domain\Trip\Models\_TripQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Office\Models\_OfficeQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Employee\Models\_EmployeeCollection;
    use LaravelIdea\Helper\App\Domain\Employee\Models\_EmployeeQueryBuilder;
    use LaravelIdea\Helper\App\Domain\General\Models\_PhoneNumberQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Payment\Models\_BankAccountQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Employee\Models\_EmployeesAttendanceCollection;
    use LaravelIdea\Helper\App\Domain\Employee\Models\_EmployeesDesignationCollection;
    use LaravelIdea\Helper\App\Domain\Employee\Models\_EmployeesAttendanceQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Employee\Models\_EmployeePaymentDetailsCollection;
    use LaravelIdea\Helper\App\Domain\Employee\Models\_EmployeesDesignationQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Employee\Models\_EmployeePaymentDetailsQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Employee\Models\_EmployeeDesignationClassificationCollection;
    use LaravelIdea\Helper\App\Domain\Employee\Models\_EmployeeDesignationClassificationQueryBuilder;

    /**
	 * @property int                    $id
	 * @property string|null            $name
	 * @property float|null             $salary
	 * @property string|null            $email
	 * @property int                    $office_id
	 * @property int                    $company_id
	 * @property int                    $employee_designation_id
	 * @property bool|null              $is_currently_hired
	 * @property Carbon|null            $created_at
	 * @property Carbon|null            $updated_at
	 * @property BankAccount            $bankAccount
	 * @method MorphToMany|_BankAccountQueryBuilder bankAccount()
	 * @property EmployeesDesignation   $designation
	 * @method HasOne|_EmployeesDesignationQueryBuilder designation()
	 * @property Office                 $office
	 * @method HasOne|_OfficeQueryBuilder office()
	 * @property PhoneNumber            $phoneNumber
	 * @method MorphToMany|_PhoneNumberQueryBuilder phoneNumber()
	 * @property _TripCollection|Trip[] $trips
	 * @method MorphToMany|_TripQueryBuilder trips()
	 * @method _EmployeeQueryBuilder newModelQuery()
	 * @method _EmployeeQueryBuilder newQuery()
	 * @method static _EmployeeQueryBuilder query()
	 * @method static _EmployeeCollection|Employee[] all()
	 * @method static _EmployeeQueryBuilder whereId($value)
	 * @method static _EmployeeQueryBuilder whereName($value)
	 * @method static _EmployeeQueryBuilder whereSalary($value)
	 * @method static _EmployeeQueryBuilder whereEmail($value)
	 * @method static _EmployeeQueryBuilder whereOfficeId($value)
	 * @method static _EmployeeQueryBuilder whereCompanyId($value)
	 * @method static _EmployeeQueryBuilder whereEmployeeDesignationId($value)
	 * @method static _EmployeeQueryBuilder whereIsCurrentlyHired($value)
	 * @method static _EmployeeQueryBuilder whereCreatedAt($value)
	 * @method static _EmployeeQueryBuilder whereUpdatedAt($value)
	 * @method static Employee baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Employee create(array $attributes = [])
	 * @method static _EmployeeQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _EmployeeCollection|Employee[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _EmployeeQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Employee|null find($id, array $columns = [ '*' ])
	 * @method static _EmployeeCollection|Employee[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Employee findOrFail($id, array $columns = [ '*' ])
	 * @method static _EmployeeCollection|Employee[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Employee first(array|string $columns = [ '*' ])
	 * @method static Employee firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Employee firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Employee firstOrFail(array $columns = [ '*' ])
	 * @method static Employee firstOrNew(array $attributes = [], array $values = [])
	 * @method static Employee firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Employee forceCreate(array $attributes)
	 * @method static _EmployeeCollection|Employee[] fromQuery(string $query, array $bindings = [])
	 * @method static _EmployeeCollection|Employee[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Employee getModel()
	 * @method static Employee[] getModels(array|string $columns = [ '*' ])
	 * @method static _EmployeeQueryBuilder getQuery()
	 * @method static _EmployeeQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _EmployeeCollection|Employee[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _EmployeeQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _EmployeeQueryBuilder latest(Expression|string $column = null)
	 * @method static _EmployeeQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _EmployeeQueryBuilder limit(int $value)
	 * @method static Employee make(array $attributes = [])
	 * @method static Employee newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _EmployeeQueryBuilder offset(int $value)
	 * @method static _EmployeeQueryBuilder oldest(Expression|string $column = null)
	 * @method static _EmployeeQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _EmployeeQueryBuilder orderByDesc(string $column)
	 * @method static _EmployeeQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Employee[]|_EmployeeCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _EmployeeQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _EmployeeQueryBuilder select(array $columns = [ '*' ])
	 * @method static _EmployeeQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Employee[]|_EmployeeCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _EmployeeQueryBuilder skip(int $value)
	 * @method static Employee sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _EmployeeQueryBuilder take(int $value)
	 * @method static _EmployeeQueryBuilder tap(callable $callback)
	 * @method static _EmployeeQueryBuilder truncate()
	 * @method static _EmployeeQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Employee updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _EmployeeQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _EmployeeQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _EmployeeQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeeQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeeQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _EmployeeQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeeQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeeQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _EmployeeQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _EmployeeQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeeQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _EmployeeQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _EmployeeQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeeQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeeQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _EmployeeQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeeQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _EmployeeQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _EmployeeQueryBuilder whereKey($id)
	 * @method static _EmployeeQueryBuilder whereKeyNot($id)
	 * @method static _EmployeeQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeeQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _EmployeeQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _EmployeeQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _EmployeeQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _EmployeeQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _EmployeeQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _EmployeeQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeeQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _EmployeeQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _EmployeeQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeeQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeeQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _EmployeeQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _EmployeeQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _EmployeeQueryBuilder withCasts(array $casts)
	 * @method static _EmployeeQueryBuilder withCount($relations)
	 * @method static _EmployeeQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _EmployeeQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _EmployeeQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _EmployeeQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _EmployeeQueryBuilder without($relations)
	 * @method static _EmployeeQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _EmployeeQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Employee extends Model { }

	/**
	 * @property int                                                    $id
	 * @property string                                                 $name
	 * @property Carbon|null                                            $created_at
	 * @property Carbon|null                                            $updated_at
	 * @property _EmployeesDesignationCollection|EmployeesDesignation[] $designations
	 * @method HasMany|_EmployeesDesignationQueryBuilder designations()
	 * @method _EmployeeDesignationClassificationQueryBuilder newModelQuery()
	 * @method _EmployeeDesignationClassificationQueryBuilder newQuery()
	 * @method static _EmployeeDesignationClassificationQueryBuilder query()
	 * @method static _EmployeeDesignationClassificationCollection|EmployeeDesignationClassification[] all()
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereId($value)
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereName($value)
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereCreatedAt($value)
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereUpdatedAt($value)
	 * @method static EmployeeDesignationClassification baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static EmployeeDesignationClassification create(array $attributes = [])
	 * @method static _EmployeeDesignationClassificationQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _EmployeeDesignationClassificationCollection|EmployeeDesignationClassification[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _EmployeeDesignationClassificationQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static EmployeeDesignationClassification|null find($id, array $columns = [ '*' ])
	 * @method static _EmployeeDesignationClassificationCollection|EmployeeDesignationClassification[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static EmployeeDesignationClassification findOrFail($id, array $columns = [ '*' ])
	 * @method static _EmployeeDesignationClassificationCollection|EmployeeDesignationClassification[] findOrNew($id, array $columns = [ '*' ])
	 * @method static EmployeeDesignationClassification first(array|string $columns = [ '*' ])
	 * @method static EmployeeDesignationClassification firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static EmployeeDesignationClassification firstOrCreate(array $attributes = [], array $values = [])
	 * @method static EmployeeDesignationClassification firstOrFail(array $columns = [ '*' ])
	 * @method static EmployeeDesignationClassification firstOrNew(array $attributes = [], array $values = [])
	 * @method static EmployeeDesignationClassification firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static EmployeeDesignationClassification forceCreate(array $attributes)
	 * @method static _EmployeeDesignationClassificationCollection|EmployeeDesignationClassification[] fromQuery(string $query, array $bindings = [])
	 * @method static _EmployeeDesignationClassificationCollection|EmployeeDesignationClassification[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static EmployeeDesignationClassification getModel()
	 * @method static EmployeeDesignationClassification[] getModels(array|string $columns = [ '*' ])
	 * @method static _EmployeeDesignationClassificationQueryBuilder getQuery()
	 * @method static _EmployeeDesignationClassificationQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _EmployeeDesignationClassificationCollection|EmployeeDesignationClassification[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _EmployeeDesignationClassificationQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _EmployeeDesignationClassificationQueryBuilder latest(Expression|string $column = null)
	 * @method static _EmployeeDesignationClassificationQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _EmployeeDesignationClassificationQueryBuilder limit(int $value)
	 * @method static EmployeeDesignationClassification make(array $attributes = [])
	 * @method static EmployeeDesignationClassification newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _EmployeeDesignationClassificationQueryBuilder offset(int $value)
	 * @method static _EmployeeDesignationClassificationQueryBuilder oldest(Expression|string $column = null)
	 * @method static _EmployeeDesignationClassificationQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _EmployeeDesignationClassificationQueryBuilder orderByDesc(string $column)
	 * @method static _EmployeeDesignationClassificationQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|EmployeeDesignationClassification[]|_EmployeeDesignationClassificationCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _EmployeeDesignationClassificationQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _EmployeeDesignationClassificationQueryBuilder select(array $columns = [ '*' ])
	 * @method static _EmployeeDesignationClassificationQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|EmployeeDesignationClassification[]|_EmployeeDesignationClassificationCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _EmployeeDesignationClassificationQueryBuilder skip(int $value)
	 * @method static EmployeeDesignationClassification sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _EmployeeDesignationClassificationQueryBuilder take(int $value)
	 * @method static _EmployeeDesignationClassificationQueryBuilder tap(callable $callback)
	 * @method static _EmployeeDesignationClassificationQueryBuilder truncate()
	 * @method static _EmployeeDesignationClassificationQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static EmployeeDesignationClassification updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _EmployeeDesignationClassificationQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _EmployeeDesignationClassificationQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereKey($id)
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereKeyNot($id)
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeeDesignationClassificationQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeeDesignationClassificationQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _EmployeeDesignationClassificationQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _EmployeeDesignationClassificationQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _EmployeeDesignationClassificationQueryBuilder withCasts(array $casts)
	 * @method static _EmployeeDesignationClassificationQueryBuilder withCount($relations)
	 * @method static _EmployeeDesignationClassificationQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _EmployeeDesignationClassificationQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _EmployeeDesignationClassificationQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _EmployeeDesignationClassificationQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _EmployeeDesignationClassificationQueryBuilder without($relations)
	 * @method static _EmployeeDesignationClassificationQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _EmployeeDesignationClassificationQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class EmployeeDesignationClassification extends Model { }

	/**
	 * @property Employee $employee
	 * @method BelongsTo|_EmployeeQueryBuilder employee()
	 * @method _EmployeePaymentDetailsQueryBuilder newModelQuery()
	 * @method _EmployeePaymentDetailsQueryBuilder newQuery()
	 * @method static _EmployeePaymentDetailsQueryBuilder query()
	 * @method static _EmployeePaymentDetailsCollection|EmployeePaymentDetails[] all()
	 * @method static EmployeePaymentDetails baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static EmployeePaymentDetails create(array $attributes = [])
	 * @method static _EmployeePaymentDetailsQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _EmployeePaymentDetailsCollection|EmployeePaymentDetails[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _EmployeePaymentDetailsQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static EmployeePaymentDetails|null find($id, array $columns = [ '*' ])
	 * @method static _EmployeePaymentDetailsCollection|EmployeePaymentDetails[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static EmployeePaymentDetails findOrFail($id, array $columns = [ '*' ])
	 * @method static _EmployeePaymentDetailsCollection|EmployeePaymentDetails[] findOrNew($id, array $columns = [ '*' ])
	 * @method static EmployeePaymentDetails first(array|string $columns = [ '*' ])
	 * @method static EmployeePaymentDetails firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static EmployeePaymentDetails firstOrCreate(array $attributes = [], array $values = [])
	 * @method static EmployeePaymentDetails firstOrFail(array $columns = [ '*' ])
	 * @method static EmployeePaymentDetails firstOrNew(array $attributes = [], array $values = [])
	 * @method static EmployeePaymentDetails firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static EmployeePaymentDetails forceCreate(array $attributes)
	 * @method static _EmployeePaymentDetailsCollection|EmployeePaymentDetails[] fromQuery(string $query, array $bindings = [])
	 * @method static _EmployeePaymentDetailsCollection|EmployeePaymentDetails[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static EmployeePaymentDetails getModel()
	 * @method static EmployeePaymentDetails[] getModels(array|string $columns = [ '*' ])
	 * @method static _EmployeePaymentDetailsQueryBuilder getQuery()
	 * @method static _EmployeePaymentDetailsQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _EmployeePaymentDetailsCollection|EmployeePaymentDetails[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _EmployeePaymentDetailsQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _EmployeePaymentDetailsQueryBuilder latest(Expression|string $column = null)
	 * @method static _EmployeePaymentDetailsQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _EmployeePaymentDetailsQueryBuilder limit(int $value)
	 * @method static EmployeePaymentDetails make(array $attributes = [])
	 * @method static EmployeePaymentDetails newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _EmployeePaymentDetailsQueryBuilder offset(int $value)
	 * @method static _EmployeePaymentDetailsQueryBuilder oldest(Expression|string $column = null)
	 * @method static _EmployeePaymentDetailsQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _EmployeePaymentDetailsQueryBuilder orderByDesc(string $column)
	 * @method static _EmployeePaymentDetailsQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|EmployeePaymentDetails[]|_EmployeePaymentDetailsCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _EmployeePaymentDetailsQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _EmployeePaymentDetailsQueryBuilder select(array $columns = [ '*' ])
	 * @method static _EmployeePaymentDetailsQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|EmployeePaymentDetails[]|_EmployeePaymentDetailsCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _EmployeePaymentDetailsQueryBuilder skip(int $value)
	 * @method static EmployeePaymentDetails sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _EmployeePaymentDetailsQueryBuilder take(int $value)
	 * @method static _EmployeePaymentDetailsQueryBuilder tap(callable $callback)
	 * @method static _EmployeePaymentDetailsQueryBuilder truncate()
	 * @method static _EmployeePaymentDetailsQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static EmployeePaymentDetails updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _EmployeePaymentDetailsQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _EmployeePaymentDetailsQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _EmployeePaymentDetailsQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeePaymentDetailsQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeePaymentDetailsQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _EmployeePaymentDetailsQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeePaymentDetailsQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeePaymentDetailsQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _EmployeePaymentDetailsQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _EmployeePaymentDetailsQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeePaymentDetailsQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _EmployeePaymentDetailsQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _EmployeePaymentDetailsQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeePaymentDetailsQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeePaymentDetailsQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _EmployeePaymentDetailsQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeePaymentDetailsQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _EmployeePaymentDetailsQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _EmployeePaymentDetailsQueryBuilder whereKey($id)
	 * @method static _EmployeePaymentDetailsQueryBuilder whereKeyNot($id)
	 * @method static _EmployeePaymentDetailsQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeePaymentDetailsQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _EmployeePaymentDetailsQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _EmployeePaymentDetailsQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _EmployeePaymentDetailsQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _EmployeePaymentDetailsQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _EmployeePaymentDetailsQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _EmployeePaymentDetailsQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeePaymentDetailsQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _EmployeePaymentDetailsQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _EmployeePaymentDetailsQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeePaymentDetailsQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeePaymentDetailsQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _EmployeePaymentDetailsQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _EmployeePaymentDetailsQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _EmployeePaymentDetailsQueryBuilder withCasts(array $casts)
	 * @method static _EmployeePaymentDetailsQueryBuilder withCount($relations)
	 * @method static _EmployeePaymentDetailsQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _EmployeePaymentDetailsQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _EmployeePaymentDetailsQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _EmployeePaymentDetailsQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _EmployeePaymentDetailsQueryBuilder without($relations)
	 * @method static _EmployeePaymentDetailsQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _EmployeePaymentDetailsQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class EmployeePaymentDetails extends Model { }

	/**
	 * @property int         $id
	 * @property Carbon      $date
	 * @property int         $employee_id
	 * @property int         $company_id
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _EmployeesAttendanceQueryBuilder newModelQuery()
	 * @method _EmployeesAttendanceQueryBuilder newQuery()
	 * @method static _EmployeesAttendanceQueryBuilder query()
	 * @method static _EmployeesAttendanceCollection|EmployeesAttendance[] all()
	 * @method static _EmployeesAttendanceQueryBuilder whereId($value)
	 * @method static _EmployeesAttendanceQueryBuilder whereDate($value)
	 * @method static _EmployeesAttendanceQueryBuilder whereEmployeeId($value)
	 * @method static _EmployeesAttendanceQueryBuilder whereCompanyId($value)
	 * @method static _EmployeesAttendanceQueryBuilder whereCreatedAt($value)
	 * @method static _EmployeesAttendanceQueryBuilder whereUpdatedAt($value)
	 * @method static EmployeesAttendance baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static EmployeesAttendance create(array $attributes = [])
	 * @method static _EmployeesAttendanceQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _EmployeesAttendanceCollection|EmployeesAttendance[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _EmployeesAttendanceQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static EmployeesAttendance|null find($id, array $columns = [ '*' ])
	 * @method static _EmployeesAttendanceCollection|EmployeesAttendance[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static EmployeesAttendance findOrFail($id, array $columns = [ '*' ])
	 * @method static _EmployeesAttendanceCollection|EmployeesAttendance[] findOrNew($id, array $columns = [ '*' ])
	 * @method static EmployeesAttendance first(array|string $columns = [ '*' ])
	 * @method static EmployeesAttendance firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static EmployeesAttendance firstOrCreate(array $attributes = [], array $values = [])
	 * @method static EmployeesAttendance firstOrFail(array $columns = [ '*' ])
	 * @method static EmployeesAttendance firstOrNew(array $attributes = [], array $values = [])
	 * @method static EmployeesAttendance firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static EmployeesAttendance forceCreate(array $attributes)
	 * @method static _EmployeesAttendanceCollection|EmployeesAttendance[] fromQuery(string $query, array $bindings = [])
	 * @method static _EmployeesAttendanceCollection|EmployeesAttendance[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static EmployeesAttendance getModel()
	 * @method static EmployeesAttendance[] getModels(array|string $columns = [ '*' ])
	 * @method static _EmployeesAttendanceQueryBuilder getQuery()
	 * @method static _EmployeesAttendanceQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _EmployeesAttendanceCollection|EmployeesAttendance[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _EmployeesAttendanceQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _EmployeesAttendanceQueryBuilder latest(Expression|string $column = null)
	 * @method static _EmployeesAttendanceQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _EmployeesAttendanceQueryBuilder limit(int $value)
	 * @method static EmployeesAttendance make(array $attributes = [])
	 * @method static EmployeesAttendance newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _EmployeesAttendanceQueryBuilder offset(int $value)
	 * @method static _EmployeesAttendanceQueryBuilder oldest(Expression|string $column = null)
	 * @method static _EmployeesAttendanceQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _EmployeesAttendanceQueryBuilder orderByDesc(string $column)
	 * @method static _EmployeesAttendanceQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|EmployeesAttendance[]|_EmployeesAttendanceCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _EmployeesAttendanceQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _EmployeesAttendanceQueryBuilder select(array $columns = [ '*' ])
	 * @method static _EmployeesAttendanceQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|EmployeesAttendance[]|_EmployeesAttendanceCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _EmployeesAttendanceQueryBuilder skip(int $value)
	 * @method static EmployeesAttendance sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _EmployeesAttendanceQueryBuilder take(int $value)
	 * @method static _EmployeesAttendanceQueryBuilder tap(callable $callback)
	 * @method static _EmployeesAttendanceQueryBuilder truncate()
	 * @method static _EmployeesAttendanceQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static EmployeesAttendance updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _EmployeesAttendanceQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _EmployeesAttendanceQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _EmployeesAttendanceQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeesAttendanceQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeesAttendanceQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _EmployeesAttendanceQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeesAttendanceQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _EmployeesAttendanceQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _EmployeesAttendanceQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeesAttendanceQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _EmployeesAttendanceQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _EmployeesAttendanceQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeesAttendanceQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeesAttendanceQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _EmployeesAttendanceQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeesAttendanceQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _EmployeesAttendanceQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _EmployeesAttendanceQueryBuilder whereKey($id)
	 * @method static _EmployeesAttendanceQueryBuilder whereKeyNot($id)
	 * @method static _EmployeesAttendanceQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeesAttendanceQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _EmployeesAttendanceQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _EmployeesAttendanceQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _EmployeesAttendanceQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _EmployeesAttendanceQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _EmployeesAttendanceQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _EmployeesAttendanceQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeesAttendanceQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _EmployeesAttendanceQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _EmployeesAttendanceQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeesAttendanceQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeesAttendanceQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _EmployeesAttendanceQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _EmployeesAttendanceQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _EmployeesAttendanceQueryBuilder withCasts(array $casts)
	 * @method static _EmployeesAttendanceQueryBuilder withCount($relations)
	 * @method static _EmployeesAttendanceQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _EmployeesAttendanceQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _EmployeesAttendanceQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _EmployeesAttendanceQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _EmployeesAttendanceQueryBuilder without($relations)
	 * @method static _EmployeesAttendanceQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _EmployeesAttendanceQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class EmployeesAttendance extends Model { }

	/**
	 * @property int                               $id
	 * @property string                            $name
	 * @property int                               $emp_desig_class_id
	 * @property Carbon|null                       $created_at
	 * @property Carbon|null                       $updated_at
	 * @property EmployeeDesignationClassification $classification
	 * @method BelongsTo|_EmployeeDesignationClassificationQueryBuilder classification()
	 * @method _EmployeesDesignationQueryBuilder newModelQuery()
	 * @method _EmployeesDesignationQueryBuilder newQuery()
	 * @method static _EmployeesDesignationQueryBuilder query()
	 * @method static _EmployeesDesignationCollection|EmployeesDesignation[] all()
	 * @method static _EmployeesDesignationQueryBuilder whereId($value)
	 * @method static _EmployeesDesignationQueryBuilder whereName($value)
	 * @method static _EmployeesDesignationQueryBuilder whereEmpDesigClassId($value)
	 * @method static _EmployeesDesignationQueryBuilder whereCreatedAt($value)
	 * @method static _EmployeesDesignationQueryBuilder whereUpdatedAt($value)
	 * @method static EmployeesDesignation baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static EmployeesDesignation create(array $attributes = [])
	 * @method static _EmployeesDesignationQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _EmployeesDesignationCollection|EmployeesDesignation[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _EmployeesDesignationQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static EmployeesDesignation|null find($id, array $columns = [ '*' ])
	 * @method static _EmployeesDesignationCollection|EmployeesDesignation[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static EmployeesDesignation findOrFail($id, array $columns = [ '*' ])
	 * @method static _EmployeesDesignationCollection|EmployeesDesignation[] findOrNew($id, array $columns = [ '*' ])
	 * @method static EmployeesDesignation first(array|string $columns = [ '*' ])
	 * @method static EmployeesDesignation firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static EmployeesDesignation firstOrCreate(array $attributes = [], array $values = [])
	 * @method static EmployeesDesignation firstOrFail(array $columns = [ '*' ])
	 * @method static EmployeesDesignation firstOrNew(array $attributes = [], array $values = [])
	 * @method static EmployeesDesignation firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static EmployeesDesignation forceCreate(array $attributes)
	 * @method static _EmployeesDesignationCollection|EmployeesDesignation[] fromQuery(string $query, array $bindings = [])
	 * @method static _EmployeesDesignationCollection|EmployeesDesignation[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static EmployeesDesignation getModel()
	 * @method static EmployeesDesignation[] getModels(array|string $columns = [ '*' ])
	 * @method static _EmployeesDesignationQueryBuilder getQuery()
	 * @method static _EmployeesDesignationQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _EmployeesDesignationCollection|EmployeesDesignation[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _EmployeesDesignationQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _EmployeesDesignationQueryBuilder latest(Expression|string $column = null)
	 * @method static _EmployeesDesignationQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _EmployeesDesignationQueryBuilder limit(int $value)
	 * @method static EmployeesDesignation make(array $attributes = [])
	 * @method static EmployeesDesignation newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _EmployeesDesignationQueryBuilder offset(int $value)
	 * @method static _EmployeesDesignationQueryBuilder oldest(Expression|string $column = null)
	 * @method static _EmployeesDesignationQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _EmployeesDesignationQueryBuilder orderByDesc(string $column)
	 * @method static _EmployeesDesignationQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|EmployeesDesignation[]|_EmployeesDesignationCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _EmployeesDesignationQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _EmployeesDesignationQueryBuilder select(array $columns = [ '*' ])
	 * @method static _EmployeesDesignationQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|EmployeesDesignation[]|_EmployeesDesignationCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _EmployeesDesignationQueryBuilder skip(int $value)
	 * @method static EmployeesDesignation sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _EmployeesDesignationQueryBuilder take(int $value)
	 * @method static _EmployeesDesignationQueryBuilder tap(callable $callback)
	 * @method static _EmployeesDesignationQueryBuilder truncate()
	 * @method static _EmployeesDesignationQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static EmployeesDesignation updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _EmployeesDesignationQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _EmployeesDesignationQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _EmployeesDesignationQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeesDesignationQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeesDesignationQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _EmployeesDesignationQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeesDesignationQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeesDesignationQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _EmployeesDesignationQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _EmployeesDesignationQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeesDesignationQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _EmployeesDesignationQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _EmployeesDesignationQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeesDesignationQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeesDesignationQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _EmployeesDesignationQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeesDesignationQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _EmployeesDesignationQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _EmployeesDesignationQueryBuilder whereKey($id)
	 * @method static _EmployeesDesignationQueryBuilder whereKeyNot($id)
	 * @method static _EmployeesDesignationQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeesDesignationQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _EmployeesDesignationQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _EmployeesDesignationQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _EmployeesDesignationQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _EmployeesDesignationQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _EmployeesDesignationQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _EmployeesDesignationQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _EmployeesDesignationQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _EmployeesDesignationQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _EmployeesDesignationQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeesDesignationQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _EmployeesDesignationQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _EmployeesDesignationQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _EmployeesDesignationQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _EmployeesDesignationQueryBuilder withCasts(array $casts)
	 * @method static _EmployeesDesignationQueryBuilder withCount($relations)
	 * @method static _EmployeesDesignationQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _EmployeesDesignationQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _EmployeesDesignationQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _EmployeesDesignationQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _EmployeesDesignationQueryBuilder without($relations)
	 * @method static _EmployeesDesignationQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _EmployeesDesignationQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class EmployeesDesignation extends Model { }
}

namespace App\Domain\Expense\Models {

    use Illuminate\Support\Carbon;
    use App\Domain\Office\Models\Office;
    use Illuminate\Pagination\Paginator;
    use App\Domain\Company\Models\Company;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\HasOne;
    use Illuminate\Database\Eloquent\Relations\HasMany;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Relations\BelongsTo;
    use LaravelIdea\Helper\App\Domain\Expense\Models\_ExpenseCollection;
    use LaravelIdea\Helper\App\Domain\Office\Models\_OfficeQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Company\Models\_CompanyQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Expense\Models\_ExpenseQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Expense\Models\_ExpenseCategoryCollection;
    use LaravelIdea\Helper\App\Domain\Expense\Models\_ExpenseCategoryQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Expense\Models\_ExpenseIndividualCollection;
    use LaravelIdea\Helper\App\Domain\Expense\Models\_ExpenseCategoryTypeCollection;
    use LaravelIdea\Helper\App\Domain\Expense\Models\_ExpenseIndividualQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Expense\Models\_ExpenseCategoryTypeQueryBuilder;

    /**
	 * @property int                                              $id
	 * @property Carbon                                           $date
	 * @property int                                              $amount
	 * @property string|null                                      $remark
	 * @property int                                              $expense_category_id
	 * @property int                                              $expense_individual_id
	 * @property int                                              $office_id
	 * @property int                                              $company_id
	 * @property int                                              $payment_method_id
	 * @property Carbon|null                                      $created_at
	 * @property Carbon|null                                      $updated_at
	 * @property ExpenseCategory                                  $category
	 * @method BelongsTo|_ExpenseCategoryQueryBuilder category()
	 * @property _ExpenseIndividualCollection|ExpenseIndividual[] $expenseIndividuals
	 * @method HasMany|_ExpenseIndividualQueryBuilder expenseIndividuals()
	 * @property Office                                           $office
	 * @method BelongsTo|_OfficeQueryBuilder office()
	 * @property ExpenseCategory                                  $payment_method
	 * @method HasOne|_ExpenseCategoryQueryBuilder payment_method()
	 * @method _ExpenseQueryBuilder newModelQuery()
	 * @method _ExpenseQueryBuilder newQuery()
	 * @method static _ExpenseQueryBuilder query()
	 * @method static _ExpenseCollection|Expense[] all()
	 * @method static _ExpenseQueryBuilder whereId($value)
	 * @method static _ExpenseQueryBuilder whereDate($value)
	 * @method static _ExpenseQueryBuilder whereAmount($value)
	 * @method static _ExpenseQueryBuilder whereRemark($value)
	 * @method static _ExpenseQueryBuilder whereExpenseCategoryId($value)
	 * @method static _ExpenseQueryBuilder whereExpenseIndividualId($value)
	 * @method static _ExpenseQueryBuilder whereOfficeId($value)
	 * @method static _ExpenseQueryBuilder whereCompanyId($value)
	 * @method static _ExpenseQueryBuilder wherePaymentMethodId($value)
	 * @method static _ExpenseQueryBuilder whereCreatedAt($value)
	 * @method static _ExpenseQueryBuilder whereUpdatedAt($value)
	 * @method static Expense baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Expense create(array $attributes = [])
	 * @method static _ExpenseQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _ExpenseCollection|Expense[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _ExpenseQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Expense|null find($id, array $columns = [ '*' ])
	 * @method static _ExpenseCollection|Expense[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Expense findOrFail($id, array $columns = [ '*' ])
	 * @method static _ExpenseCollection|Expense[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Expense first(array|string $columns = [ '*' ])
	 * @method static Expense firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Expense firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Expense firstOrFail(array $columns = [ '*' ])
	 * @method static Expense firstOrNew(array $attributes = [], array $values = [])
	 * @method static Expense firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Expense forceCreate(array $attributes)
	 * @method static _ExpenseCollection|Expense[] fromQuery(string $query, array $bindings = [])
	 * @method static _ExpenseCollection|Expense[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Expense getModel()
	 * @method static Expense[] getModels(array|string $columns = [ '*' ])
	 * @method static _ExpenseQueryBuilder getQuery()
	 * @method static _ExpenseQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _ExpenseCollection|Expense[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _ExpenseQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _ExpenseQueryBuilder latest(Expression|string $column = null)
	 * @method static _ExpenseQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _ExpenseQueryBuilder limit(int $value)
	 * @method static Expense make(array $attributes = [])
	 * @method static Expense newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _ExpenseQueryBuilder offset(int $value)
	 * @method static _ExpenseQueryBuilder oldest(Expression|string $column = null)
	 * @method static _ExpenseQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _ExpenseQueryBuilder orderByDesc(string $column)
	 * @method static _ExpenseQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Expense[]|_ExpenseCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _ExpenseQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _ExpenseQueryBuilder select(array $columns = [ '*' ])
	 * @method static _ExpenseQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Expense[]|_ExpenseCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _ExpenseQueryBuilder skip(int $value)
	 * @method static Expense sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _ExpenseQueryBuilder take(int $value)
	 * @method static _ExpenseQueryBuilder tap(callable $callback)
	 * @method static _ExpenseQueryBuilder truncate()
	 * @method static _ExpenseQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Expense updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _ExpenseQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _ExpenseQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _ExpenseQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _ExpenseQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _ExpenseQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _ExpenseQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _ExpenseQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _ExpenseQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _ExpenseQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _ExpenseQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _ExpenseQueryBuilder whereKey($id)
	 * @method static _ExpenseQueryBuilder whereKeyNot($id)
	 * @method static _ExpenseQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _ExpenseQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _ExpenseQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _ExpenseQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _ExpenseQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _ExpenseQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _ExpenseQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _ExpenseQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _ExpenseQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _ExpenseQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _ExpenseQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _ExpenseQueryBuilder withCasts(array $casts)
	 * @method static _ExpenseQueryBuilder withCount($relations)
	 * @method static _ExpenseQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _ExpenseQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _ExpenseQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _ExpenseQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _ExpenseQueryBuilder without($relations)
	 * @method static _ExpenseQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _ExpenseQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Expense extends Model { }

	/**
	 * @property int         $id
	 * @property string      $name
	 * @property int         $expense_category_type_id
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _ExpenseCategoryQueryBuilder newModelQuery()
	 * @method _ExpenseCategoryQueryBuilder newQuery()
	 * @method static _ExpenseCategoryQueryBuilder query()
	 * @method static _ExpenseCategoryCollection|ExpenseCategory[] all()
	 * @method static _ExpenseCategoryQueryBuilder whereId($value)
	 * @method static _ExpenseCategoryQueryBuilder whereName($value)
	 * @method static _ExpenseCategoryQueryBuilder whereExpenseCategoryTypeId($value)
	 * @method static _ExpenseCategoryQueryBuilder whereCreatedAt($value)
	 * @method static _ExpenseCategoryQueryBuilder whereUpdatedAt($value)
	 * @method static ExpenseCategory baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static ExpenseCategory create(array $attributes = [])
	 * @method static _ExpenseCategoryQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _ExpenseCategoryCollection|ExpenseCategory[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _ExpenseCategoryQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static ExpenseCategory|null find($id, array $columns = [ '*' ])
	 * @method static _ExpenseCategoryCollection|ExpenseCategory[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static ExpenseCategory findOrFail($id, array $columns = [ '*' ])
	 * @method static _ExpenseCategoryCollection|ExpenseCategory[] findOrNew($id, array $columns = [ '*' ])
	 * @method static ExpenseCategory first(array|string $columns = [ '*' ])
	 * @method static ExpenseCategory firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static ExpenseCategory firstOrCreate(array $attributes = [], array $values = [])
	 * @method static ExpenseCategory firstOrFail(array $columns = [ '*' ])
	 * @method static ExpenseCategory firstOrNew(array $attributes = [], array $values = [])
	 * @method static ExpenseCategory firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static ExpenseCategory forceCreate(array $attributes)
	 * @method static _ExpenseCategoryCollection|ExpenseCategory[] fromQuery(string $query, array $bindings = [])
	 * @method static _ExpenseCategoryCollection|ExpenseCategory[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static ExpenseCategory getModel()
	 * @method static ExpenseCategory[] getModels(array|string $columns = [ '*' ])
	 * @method static _ExpenseCategoryQueryBuilder getQuery()
	 * @method static _ExpenseCategoryQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _ExpenseCategoryCollection|ExpenseCategory[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _ExpenseCategoryQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _ExpenseCategoryQueryBuilder latest(Expression|string $column = null)
	 * @method static _ExpenseCategoryQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _ExpenseCategoryQueryBuilder limit(int $value)
	 * @method static ExpenseCategory make(array $attributes = [])
	 * @method static ExpenseCategory newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _ExpenseCategoryQueryBuilder offset(int $value)
	 * @method static _ExpenseCategoryQueryBuilder oldest(Expression|string $column = null)
	 * @method static _ExpenseCategoryQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _ExpenseCategoryQueryBuilder orderByDesc(string $column)
	 * @method static _ExpenseCategoryQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|ExpenseCategory[]|_ExpenseCategoryCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _ExpenseCategoryQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _ExpenseCategoryQueryBuilder select(array $columns = [ '*' ])
	 * @method static _ExpenseCategoryQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|ExpenseCategory[]|_ExpenseCategoryCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _ExpenseCategoryQueryBuilder skip(int $value)
	 * @method static ExpenseCategory sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _ExpenseCategoryQueryBuilder take(int $value)
	 * @method static _ExpenseCategoryQueryBuilder tap(callable $callback)
	 * @method static _ExpenseCategoryQueryBuilder truncate()
	 * @method static _ExpenseCategoryQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static ExpenseCategory updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _ExpenseCategoryQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _ExpenseCategoryQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _ExpenseCategoryQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseCategoryQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseCategoryQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _ExpenseCategoryQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseCategoryQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseCategoryQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _ExpenseCategoryQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _ExpenseCategoryQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseCategoryQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _ExpenseCategoryQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _ExpenseCategoryQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseCategoryQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseCategoryQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _ExpenseCategoryQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseCategoryQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _ExpenseCategoryQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _ExpenseCategoryQueryBuilder whereKey($id)
	 * @method static _ExpenseCategoryQueryBuilder whereKeyNot($id)
	 * @method static _ExpenseCategoryQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseCategoryQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _ExpenseCategoryQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _ExpenseCategoryQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _ExpenseCategoryQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _ExpenseCategoryQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _ExpenseCategoryQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _ExpenseCategoryQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseCategoryQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _ExpenseCategoryQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _ExpenseCategoryQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseCategoryQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseCategoryQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _ExpenseCategoryQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _ExpenseCategoryQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _ExpenseCategoryQueryBuilder withCasts(array $casts)
	 * @method static _ExpenseCategoryQueryBuilder withCount($relations)
	 * @method static _ExpenseCategoryQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _ExpenseCategoryQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _ExpenseCategoryQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _ExpenseCategoryQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _ExpenseCategoryQueryBuilder without($relations)
	 * @method static _ExpenseCategoryQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _ExpenseCategoryQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class ExpenseCategory extends Model { }

	/**
	 * @property int         $id
	 * @property string      $name
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _ExpenseCategoryTypeQueryBuilder newModelQuery()
	 * @method _ExpenseCategoryTypeQueryBuilder newQuery()
	 * @method static _ExpenseCategoryTypeQueryBuilder query()
	 * @method static _ExpenseCategoryTypeCollection|ExpenseCategoryType[] all()
	 * @method static _ExpenseCategoryTypeQueryBuilder whereId($value)
	 * @method static _ExpenseCategoryTypeQueryBuilder whereName($value)
	 * @method static _ExpenseCategoryTypeQueryBuilder whereCreatedAt($value)
	 * @method static _ExpenseCategoryTypeQueryBuilder whereUpdatedAt($value)
	 * @method static ExpenseCategoryType baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static ExpenseCategoryType create(array $attributes = [])
	 * @method static _ExpenseCategoryTypeQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _ExpenseCategoryTypeCollection|ExpenseCategoryType[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _ExpenseCategoryTypeQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static ExpenseCategoryType|null find($id, array $columns = [ '*' ])
	 * @method static _ExpenseCategoryTypeCollection|ExpenseCategoryType[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static ExpenseCategoryType findOrFail($id, array $columns = [ '*' ])
	 * @method static _ExpenseCategoryTypeCollection|ExpenseCategoryType[] findOrNew($id, array $columns = [ '*' ])
	 * @method static ExpenseCategoryType first(array|string $columns = [ '*' ])
	 * @method static ExpenseCategoryType firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static ExpenseCategoryType firstOrCreate(array $attributes = [], array $values = [])
	 * @method static ExpenseCategoryType firstOrFail(array $columns = [ '*' ])
	 * @method static ExpenseCategoryType firstOrNew(array $attributes = [], array $values = [])
	 * @method static ExpenseCategoryType firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static ExpenseCategoryType forceCreate(array $attributes)
	 * @method static _ExpenseCategoryTypeCollection|ExpenseCategoryType[] fromQuery(string $query, array $bindings = [])
	 * @method static _ExpenseCategoryTypeCollection|ExpenseCategoryType[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static ExpenseCategoryType getModel()
	 * @method static ExpenseCategoryType[] getModels(array|string $columns = [ '*' ])
	 * @method static _ExpenseCategoryTypeQueryBuilder getQuery()
	 * @method static _ExpenseCategoryTypeQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _ExpenseCategoryTypeCollection|ExpenseCategoryType[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _ExpenseCategoryTypeQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _ExpenseCategoryTypeQueryBuilder latest(Expression|string $column = null)
	 * @method static _ExpenseCategoryTypeQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _ExpenseCategoryTypeQueryBuilder limit(int $value)
	 * @method static ExpenseCategoryType make(array $attributes = [])
	 * @method static ExpenseCategoryType newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _ExpenseCategoryTypeQueryBuilder offset(int $value)
	 * @method static _ExpenseCategoryTypeQueryBuilder oldest(Expression|string $column = null)
	 * @method static _ExpenseCategoryTypeQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _ExpenseCategoryTypeQueryBuilder orderByDesc(string $column)
	 * @method static _ExpenseCategoryTypeQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|ExpenseCategoryType[]|_ExpenseCategoryTypeCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _ExpenseCategoryTypeQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _ExpenseCategoryTypeQueryBuilder select(array $columns = [ '*' ])
	 * @method static _ExpenseCategoryTypeQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|ExpenseCategoryType[]|_ExpenseCategoryTypeCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _ExpenseCategoryTypeQueryBuilder skip(int $value)
	 * @method static ExpenseCategoryType sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _ExpenseCategoryTypeQueryBuilder take(int $value)
	 * @method static _ExpenseCategoryTypeQueryBuilder tap(callable $callback)
	 * @method static _ExpenseCategoryTypeQueryBuilder truncate()
	 * @method static _ExpenseCategoryTypeQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static ExpenseCategoryType updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _ExpenseCategoryTypeQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _ExpenseCategoryTypeQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _ExpenseCategoryTypeQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseCategoryTypeQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseCategoryTypeQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _ExpenseCategoryTypeQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseCategoryTypeQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseCategoryTypeQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _ExpenseCategoryTypeQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _ExpenseCategoryTypeQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseCategoryTypeQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _ExpenseCategoryTypeQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _ExpenseCategoryTypeQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseCategoryTypeQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseCategoryTypeQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _ExpenseCategoryTypeQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseCategoryTypeQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _ExpenseCategoryTypeQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _ExpenseCategoryTypeQueryBuilder whereKey($id)
	 * @method static _ExpenseCategoryTypeQueryBuilder whereKeyNot($id)
	 * @method static _ExpenseCategoryTypeQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseCategoryTypeQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _ExpenseCategoryTypeQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _ExpenseCategoryTypeQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _ExpenseCategoryTypeQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _ExpenseCategoryTypeQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _ExpenseCategoryTypeQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _ExpenseCategoryTypeQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseCategoryTypeQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _ExpenseCategoryTypeQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _ExpenseCategoryTypeQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseCategoryTypeQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseCategoryTypeQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _ExpenseCategoryTypeQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _ExpenseCategoryTypeQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _ExpenseCategoryTypeQueryBuilder withCasts(array $casts)
	 * @method static _ExpenseCategoryTypeQueryBuilder withCount($relations)
	 * @method static _ExpenseCategoryTypeQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _ExpenseCategoryTypeQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _ExpenseCategoryTypeQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _ExpenseCategoryTypeQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _ExpenseCategoryTypeQueryBuilder without($relations)
	 * @method static _ExpenseCategoryTypeQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _ExpenseCategoryTypeQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class ExpenseCategoryType extends Model { }

	/**
	 * @property int         $id
	 * @property string      $name
	 * @property int         $company_id
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @property Company     $company
	 * @method BelongsTo|_CompanyQueryBuilder company()
	 * @method _ExpenseIndividualQueryBuilder newModelQuery()
	 * @method _ExpenseIndividualQueryBuilder newQuery()
	 * @method static _ExpenseIndividualQueryBuilder query()
	 * @method static _ExpenseIndividualCollection|ExpenseIndividual[] all()
	 * @method static _ExpenseIndividualQueryBuilder whereId($value)
	 * @method static _ExpenseIndividualQueryBuilder whereName($value)
	 * @method static _ExpenseIndividualQueryBuilder whereCompanyId($value)
	 * @method static _ExpenseIndividualQueryBuilder whereCreatedAt($value)
	 * @method static _ExpenseIndividualQueryBuilder whereUpdatedAt($value)
	 * @method static ExpenseIndividual baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static ExpenseIndividual create(array $attributes = [])
	 * @method static _ExpenseIndividualQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _ExpenseIndividualCollection|ExpenseIndividual[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _ExpenseIndividualQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static ExpenseIndividual|null find($id, array $columns = [ '*' ])
	 * @method static _ExpenseIndividualCollection|ExpenseIndividual[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static ExpenseIndividual findOrFail($id, array $columns = [ '*' ])
	 * @method static _ExpenseIndividualCollection|ExpenseIndividual[] findOrNew($id, array $columns = [ '*' ])
	 * @method static ExpenseIndividual first(array|string $columns = [ '*' ])
	 * @method static ExpenseIndividual firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static ExpenseIndividual firstOrCreate(array $attributes = [], array $values = [])
	 * @method static ExpenseIndividual firstOrFail(array $columns = [ '*' ])
	 * @method static ExpenseIndividual firstOrNew(array $attributes = [], array $values = [])
	 * @method static ExpenseIndividual firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static ExpenseIndividual forceCreate(array $attributes)
	 * @method static _ExpenseIndividualCollection|ExpenseIndividual[] fromQuery(string $query, array $bindings = [])
	 * @method static _ExpenseIndividualCollection|ExpenseIndividual[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static ExpenseIndividual getModel()
	 * @method static ExpenseIndividual[] getModels(array|string $columns = [ '*' ])
	 * @method static _ExpenseIndividualQueryBuilder getQuery()
	 * @method static _ExpenseIndividualQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _ExpenseIndividualCollection|ExpenseIndividual[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _ExpenseIndividualQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _ExpenseIndividualQueryBuilder latest(Expression|string $column = null)
	 * @method static _ExpenseIndividualQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _ExpenseIndividualQueryBuilder limit(int $value)
	 * @method static ExpenseIndividual make(array $attributes = [])
	 * @method static ExpenseIndividual newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _ExpenseIndividualQueryBuilder offset(int $value)
	 * @method static _ExpenseIndividualQueryBuilder oldest(Expression|string $column = null)
	 * @method static _ExpenseIndividualQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _ExpenseIndividualQueryBuilder orderByDesc(string $column)
	 * @method static _ExpenseIndividualQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|ExpenseIndividual[]|_ExpenseIndividualCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _ExpenseIndividualQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _ExpenseIndividualQueryBuilder select(array $columns = [ '*' ])
	 * @method static _ExpenseIndividualQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|ExpenseIndividual[]|_ExpenseIndividualCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _ExpenseIndividualQueryBuilder skip(int $value)
	 * @method static ExpenseIndividual sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _ExpenseIndividualQueryBuilder take(int $value)
	 * @method static _ExpenseIndividualQueryBuilder tap(callable $callback)
	 * @method static _ExpenseIndividualQueryBuilder truncate()
	 * @method static _ExpenseIndividualQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static ExpenseIndividual updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _ExpenseIndividualQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _ExpenseIndividualQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _ExpenseIndividualQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseIndividualQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseIndividualQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _ExpenseIndividualQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseIndividualQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseIndividualQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _ExpenseIndividualQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _ExpenseIndividualQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseIndividualQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _ExpenseIndividualQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _ExpenseIndividualQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseIndividualQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseIndividualQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _ExpenseIndividualQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseIndividualQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _ExpenseIndividualQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _ExpenseIndividualQueryBuilder whereKey($id)
	 * @method static _ExpenseIndividualQueryBuilder whereKeyNot($id)
	 * @method static _ExpenseIndividualQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseIndividualQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _ExpenseIndividualQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _ExpenseIndividualQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _ExpenseIndividualQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _ExpenseIndividualQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _ExpenseIndividualQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _ExpenseIndividualQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _ExpenseIndividualQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _ExpenseIndividualQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _ExpenseIndividualQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseIndividualQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _ExpenseIndividualQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _ExpenseIndividualQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _ExpenseIndividualQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _ExpenseIndividualQueryBuilder withCasts(array $casts)
	 * @method static _ExpenseIndividualQueryBuilder withCount($relations)
	 * @method static _ExpenseIndividualQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _ExpenseIndividualQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _ExpenseIndividualQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _ExpenseIndividualQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _ExpenseIndividualQueryBuilder without($relations)
	 * @method static _ExpenseIndividualQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _ExpenseIndividualQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class ExpenseIndividual extends Model { }
}

namespace App\Domain\Fleet\Models {

    use Illuminate\Support\Carbon;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\HasMany;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use LaravelIdea\Helper\App\Domain\Fleet\Models\_FleetCollection;
    use LaravelIdea\Helper\App\Domain\Fleet\Models\_FleetQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Fleet\Models\_FleetLiveCollection;
    use LaravelIdea\Helper\App\Domain\Fleet\Models\_FleetLiveQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Fleet\Models\_FleetVehicleCollection;
    use LaravelIdea\Helper\App\Domain\Fleet\Models\_FleetVehicleQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Fleet\Models\_FleetMaintenanceCollection;
    use LaravelIdea\Helper\App\Domain\Fleet\Models\_FleetTripCatcherCollection;
    use LaravelIdea\Helper\App\Domain\Fleet\Models\_FleetMaintenanceQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Fleet\Models\_FleetTripCatcherQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Fleet\Models\_FleetDailyInspectionCollection;
    use LaravelIdea\Helper\App\Domain\Fleet\Models\_FleetDailyInspectionQueryBuilder;

    /**
	 * @property int                                    $id
	 * @property string                                 $name
	 * @property int                                    $company_id
	 * @property Carbon|null                            $created_at
	 * @property Carbon|null                            $updated_at
	 * @property _FleetVehicleCollection|FleetVehicle[] $vehicles
	 * @method HasMany|_FleetVehicleQueryBuilder vehicles()
	 * @method _FleetQueryBuilder newModelQuery()
	 * @method _FleetQueryBuilder newQuery()
	 * @method static _FleetQueryBuilder query()
	 * @method static _FleetCollection|Fleet[] all()
	 * @method static _FleetQueryBuilder whereId($value)
	 * @method static _FleetQueryBuilder whereName($value)
	 * @method static _FleetQueryBuilder whereCompanyId($value)
	 * @method static _FleetQueryBuilder whereCreatedAt($value)
	 * @method static _FleetQueryBuilder whereUpdatedAt($value)
	 * @method static Fleet baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Fleet create(array $attributes = [])
	 * @method static _FleetQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _FleetCollection|Fleet[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _FleetQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Fleet|null find($id, array $columns = [ '*' ])
	 * @method static _FleetCollection|Fleet[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Fleet findOrFail($id, array $columns = [ '*' ])
	 * @method static _FleetCollection|Fleet[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Fleet first(array|string $columns = [ '*' ])
	 * @method static Fleet firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Fleet firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Fleet firstOrFail(array $columns = [ '*' ])
	 * @method static Fleet firstOrNew(array $attributes = [], array $values = [])
	 * @method static Fleet firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Fleet forceCreate(array $attributes)
	 * @method static _FleetCollection|Fleet[] fromQuery(string $query, array $bindings = [])
	 * @method static _FleetCollection|Fleet[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Fleet getModel()
	 * @method static Fleet[] getModels(array|string $columns = [ '*' ])
	 * @method static _FleetQueryBuilder getQuery()
	 * @method static _FleetQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _FleetCollection|Fleet[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _FleetQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _FleetQueryBuilder latest(Expression|string $column = null)
	 * @method static _FleetQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _FleetQueryBuilder limit(int $value)
	 * @method static Fleet make(array $attributes = [])
	 * @method static Fleet newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _FleetQueryBuilder offset(int $value)
	 * @method static _FleetQueryBuilder oldest(Expression|string $column = null)
	 * @method static _FleetQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _FleetQueryBuilder orderByDesc(string $column)
	 * @method static _FleetQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Fleet[]|_FleetCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _FleetQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _FleetQueryBuilder select(array $columns = [ '*' ])
	 * @method static _FleetQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Fleet[]|_FleetCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _FleetQueryBuilder skip(int $value)
	 * @method static Fleet sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _FleetQueryBuilder take(int $value)
	 * @method static _FleetQueryBuilder tap(callable $callback)
	 * @method static _FleetQueryBuilder truncate()
	 * @method static _FleetQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Fleet updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _FleetQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _FleetQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _FleetQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _FleetQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _FleetQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _FleetQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _FleetQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _FleetQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _FleetQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _FleetQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _FleetQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _FleetQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _FleetQueryBuilder whereKey($id)
	 * @method static _FleetQueryBuilder whereKeyNot($id)
	 * @method static _FleetQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _FleetQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _FleetQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _FleetQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _FleetQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _FleetQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _FleetQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _FleetQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _FleetQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _FleetQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _FleetQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _FleetQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _FleetQueryBuilder withCasts(array $casts)
	 * @method static _FleetQueryBuilder withCount($relations)
	 * @method static _FleetQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _FleetQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _FleetQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _FleetQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _FleetQueryBuilder without($relations)
	 * @method static _FleetQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _FleetQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Fleet extends Model { }

	/**
	 * @property bool        $air_filter
	 * @property float|null  $air_filter_charge
	 * @property bool        $grease
	 * @property float|null  $grease_charge
	 * @property bool        $tyre_repair
	 * @property float|null  $tyre_repair_charge
	 * @property bool        $urea
	 * @property float|null  $urea_amount
	 * @property float|null  $urea_charge
	 * @property bool        $misc
	 * @property string|null $misc_charge
	 * @property float|null  $misc_remark
	 * @property float|null  $total
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _FleetDailyInspectionQueryBuilder newModelQuery()
	 * @method _FleetDailyInspectionQueryBuilder newQuery()
	 * @method static _FleetDailyInspectionQueryBuilder query()
	 * @method static _FleetDailyInspectionCollection|FleetDailyInspection[] all()
	 * @method static _FleetDailyInspectionQueryBuilder whereAirFilter($value)
	 * @method static _FleetDailyInspectionQueryBuilder whereAirFilterCharge($value)
	 * @method static _FleetDailyInspectionQueryBuilder whereGrease($value)
	 * @method static _FleetDailyInspectionQueryBuilder whereGreaseCharge($value)
	 * @method static _FleetDailyInspectionQueryBuilder whereTyreRepair($value)
	 * @method static _FleetDailyInspectionQueryBuilder whereTyreRepairCharge($value)
	 * @method static _FleetDailyInspectionQueryBuilder whereUrea($value)
	 * @method static _FleetDailyInspectionQueryBuilder whereUreaAmount($value)
	 * @method static _FleetDailyInspectionQueryBuilder whereUreaCharge($value)
	 * @method static _FleetDailyInspectionQueryBuilder whereMisc($value)
	 * @method static _FleetDailyInspectionQueryBuilder whereMiscCharge($value)
	 * @method static _FleetDailyInspectionQueryBuilder whereMiscRemark($value)
	 * @method static _FleetDailyInspectionQueryBuilder whereTotal($value)
	 * @method static _FleetDailyInspectionQueryBuilder whereCreatedAt($value)
	 * @method static _FleetDailyInspectionQueryBuilder whereUpdatedAt($value)
	 * @method static FleetDailyInspection baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static FleetDailyInspection create(array $attributes = [])
	 * @method static _FleetDailyInspectionQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _FleetDailyInspectionCollection|FleetDailyInspection[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _FleetDailyInspectionQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static FleetDailyInspection|null find($id, array $columns = [ '*' ])
	 * @method static _FleetDailyInspectionCollection|FleetDailyInspection[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static FleetDailyInspection findOrFail($id, array $columns = [ '*' ])
	 * @method static _FleetDailyInspectionCollection|FleetDailyInspection[] findOrNew($id, array $columns = [ '*' ])
	 * @method static FleetDailyInspection first(array|string $columns = [ '*' ])
	 * @method static FleetDailyInspection firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static FleetDailyInspection firstOrCreate(array $attributes = [], array $values = [])
	 * @method static FleetDailyInspection firstOrFail(array $columns = [ '*' ])
	 * @method static FleetDailyInspection firstOrNew(array $attributes = [], array $values = [])
	 * @method static FleetDailyInspection firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static FleetDailyInspection forceCreate(array $attributes)
	 * @method static _FleetDailyInspectionCollection|FleetDailyInspection[] fromQuery(string $query, array $bindings = [])
	 * @method static _FleetDailyInspectionCollection|FleetDailyInspection[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static FleetDailyInspection getModel()
	 * @method static FleetDailyInspection[] getModels(array|string $columns = [ '*' ])
	 * @method static _FleetDailyInspectionQueryBuilder getQuery()
	 * @method static _FleetDailyInspectionQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _FleetDailyInspectionCollection|FleetDailyInspection[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _FleetDailyInspectionQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _FleetDailyInspectionQueryBuilder latest(Expression|string $column = null)
	 * @method static _FleetDailyInspectionQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _FleetDailyInspectionQueryBuilder limit(int $value)
	 * @method static FleetDailyInspection make(array $attributes = [])
	 * @method static FleetDailyInspection newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _FleetDailyInspectionQueryBuilder offset(int $value)
	 * @method static _FleetDailyInspectionQueryBuilder oldest(Expression|string $column = null)
	 * @method static _FleetDailyInspectionQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _FleetDailyInspectionQueryBuilder orderByDesc(string $column)
	 * @method static _FleetDailyInspectionQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|FleetDailyInspection[]|_FleetDailyInspectionCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _FleetDailyInspectionQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _FleetDailyInspectionQueryBuilder select(array $columns = [ '*' ])
	 * @method static _FleetDailyInspectionQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|FleetDailyInspection[]|_FleetDailyInspectionCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _FleetDailyInspectionQueryBuilder skip(int $value)
	 * @method static FleetDailyInspection sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _FleetDailyInspectionQueryBuilder take(int $value)
	 * @method static _FleetDailyInspectionQueryBuilder tap(callable $callback)
	 * @method static _FleetDailyInspectionQueryBuilder truncate()
	 * @method static _FleetDailyInspectionQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static FleetDailyInspection updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _FleetDailyInspectionQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _FleetDailyInspectionQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _FleetDailyInspectionQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetDailyInspectionQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetDailyInspectionQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _FleetDailyInspectionQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetDailyInspectionQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetDailyInspectionQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _FleetDailyInspectionQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _FleetDailyInspectionQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _FleetDailyInspectionQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _FleetDailyInspectionQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _FleetDailyInspectionQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetDailyInspectionQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetDailyInspectionQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _FleetDailyInspectionQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _FleetDailyInspectionQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _FleetDailyInspectionQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _FleetDailyInspectionQueryBuilder whereKey($id)
	 * @method static _FleetDailyInspectionQueryBuilder whereKeyNot($id)
	 * @method static _FleetDailyInspectionQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetDailyInspectionQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _FleetDailyInspectionQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _FleetDailyInspectionQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _FleetDailyInspectionQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _FleetDailyInspectionQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _FleetDailyInspectionQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _FleetDailyInspectionQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _FleetDailyInspectionQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _FleetDailyInspectionQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _FleetDailyInspectionQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetDailyInspectionQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetDailyInspectionQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _FleetDailyInspectionQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _FleetDailyInspectionQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _FleetDailyInspectionQueryBuilder withCasts(array $casts)
	 * @method static _FleetDailyInspectionQueryBuilder withCount($relations)
	 * @method static _FleetDailyInspectionQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _FleetDailyInspectionQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _FleetDailyInspectionQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _FleetDailyInspectionQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _FleetDailyInspectionQueryBuilder without($relations)
	 * @method static _FleetDailyInspectionQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _FleetDailyInspectionQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class FleetDailyInspection extends Model { }

	/**
	 * @property int         $id
	 * @property string|null $outtype
	 * @property string|null $ttime
	 * @property string|null $rectime
	 * @property string|null $trips
	 * @property string|null $rdev
	 * @property string|null $mineral
	 * @property string|null $sourcecode
	 * @property string|null $lessycode
	 * @property string|null $vehiclespeed
	 * @property string|null $ignumber
	 * @property string|null $gpsstatus
	 * @property string|null $circle
	 * @property string|null $starttime
	 * @property string|null $endtime
	 * @property string|null $destination
	 * @property string|null $routename
	 * @property string|null $latitude
	 * @property string|null $longitude
	 * @property string|null $imeino
	 * @property string|null $etpno
	 * @property string|null $vehcount
	 * @property string|null $tripcount
	 * @property string|null $vehicleno
	 * @property string|null $outtime
	 * @property string|null $intime
	 * @property string|null $rdevstarttime
	 * @property string|null $rdevendtime
	 * @property string|null $rdevtime
	 * @property string|null $pollingtime
	 * @property string|null $company
	 * @property string|null $destcode
	 * @property string|null $time
	 * @property string|null $index
	 * @property string|null $source
	 * @property string|null $status
	 * @property string|null $location
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _FleetLiveQueryBuilder newModelQuery()
	 * @method _FleetLiveQueryBuilder newQuery()
	 * @method static _FleetLiveQueryBuilder query()
	 * @method static _FleetLiveCollection|FleetLive[] all()
	 * @method static _FleetLiveQueryBuilder whereId($value)
	 * @method static _FleetLiveQueryBuilder whereOuttype($value)
	 * @method static _FleetLiveQueryBuilder whereTtime($value)
	 * @method static _FleetLiveQueryBuilder whereRectime($value)
	 * @method static _FleetLiveQueryBuilder whereTrips($value)
	 * @method static _FleetLiveQueryBuilder whereRdev($value)
	 * @method static _FleetLiveQueryBuilder whereMineral($value)
	 * @method static _FleetLiveQueryBuilder whereSourcecode($value)
	 * @method static _FleetLiveQueryBuilder whereLessycode($value)
	 * @method static _FleetLiveQueryBuilder whereVehiclespeed($value)
	 * @method static _FleetLiveQueryBuilder whereIgnumber($value)
	 * @method static _FleetLiveQueryBuilder whereGpsstatus($value)
	 * @method static _FleetLiveQueryBuilder whereCircle($value)
	 * @method static _FleetLiveQueryBuilder whereStarttime($value)
	 * @method static _FleetLiveQueryBuilder whereEndtime($value)
	 * @method static _FleetLiveQueryBuilder whereDestination($value)
	 * @method static _FleetLiveQueryBuilder whereRoutename($value)
	 * @method static _FleetLiveQueryBuilder whereLatitude($value)
	 * @method static _FleetLiveQueryBuilder whereLongitude($value)
	 * @method static _FleetLiveQueryBuilder whereImeino($value)
	 * @method static _FleetLiveQueryBuilder whereEtpno($value)
	 * @method static _FleetLiveQueryBuilder whereVehcount($value)
	 * @method static _FleetLiveQueryBuilder whereTripcount($value)
	 * @method static _FleetLiveQueryBuilder whereVehicleno($value)
	 * @method static _FleetLiveQueryBuilder whereOuttime($value)
	 * @method static _FleetLiveQueryBuilder whereIntime($value)
	 * @method static _FleetLiveQueryBuilder whereRdevstarttime($value)
	 * @method static _FleetLiveQueryBuilder whereRdevendtime($value)
	 * @method static _FleetLiveQueryBuilder whereRdevtime($value)
	 * @method static _FleetLiveQueryBuilder wherePollingtime($value)
	 * @method static _FleetLiveQueryBuilder whereCompany($value)
	 * @method static _FleetLiveQueryBuilder whereDestcode($value)
	 * @method static _FleetLiveQueryBuilder whereTime($value)
	 * @method static _FleetLiveQueryBuilder whereIndex($value)
	 * @method static _FleetLiveQueryBuilder whereSource($value)
	 * @method static _FleetLiveQueryBuilder whereStatus($value)
	 * @method static _FleetLiveQueryBuilder whereLocation($value)
	 * @method static _FleetLiveQueryBuilder whereCreatedAt($value)
	 * @method static _FleetLiveQueryBuilder whereUpdatedAt($value)
	 * @method static FleetLive baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static FleetLive create(array $attributes = [])
	 * @method static _FleetLiveQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _FleetLiveCollection|FleetLive[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _FleetLiveQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static FleetLive|null find($id, array $columns = [ '*' ])
	 * @method static _FleetLiveCollection|FleetLive[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static FleetLive findOrFail($id, array $columns = [ '*' ])
	 * @method static _FleetLiveCollection|FleetLive[] findOrNew($id, array $columns = [ '*' ])
	 * @method static FleetLive first(array|string $columns = [ '*' ])
	 * @method static FleetLive firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static FleetLive firstOrCreate(array $attributes = [], array $values = [])
	 * @method static FleetLive firstOrFail(array $columns = [ '*' ])
	 * @method static FleetLive firstOrNew(array $attributes = [], array $values = [])
	 * @method static FleetLive firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static FleetLive forceCreate(array $attributes)
	 * @method static _FleetLiveCollection|FleetLive[] fromQuery(string $query, array $bindings = [])
	 * @method static _FleetLiveCollection|FleetLive[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static FleetLive getModel()
	 * @method static FleetLive[] getModels(array|string $columns = [ '*' ])
	 * @method static _FleetLiveQueryBuilder getQuery()
	 * @method static _FleetLiveQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _FleetLiveCollection|FleetLive[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _FleetLiveQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _FleetLiveQueryBuilder latest(Expression|string $column = null)
	 * @method static _FleetLiveQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _FleetLiveQueryBuilder limit(int $value)
	 * @method static FleetLive make(array $attributes = [])
	 * @method static FleetLive newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _FleetLiveQueryBuilder offset(int $value)
	 * @method static _FleetLiveQueryBuilder oldest(Expression|string $column = null)
	 * @method static _FleetLiveQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _FleetLiveQueryBuilder orderByDesc(string $column)
	 * @method static _FleetLiveQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|FleetLive[]|_FleetLiveCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _FleetLiveQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _FleetLiveQueryBuilder select(array $columns = [ '*' ])
	 * @method static _FleetLiveQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|FleetLive[]|_FleetLiveCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _FleetLiveQueryBuilder skip(int $value)
	 * @method static FleetLive sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _FleetLiveQueryBuilder take(int $value)
	 * @method static _FleetLiveQueryBuilder tap(callable $callback)
	 * @method static _FleetLiveQueryBuilder truncate()
	 * @method static _FleetLiveQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static FleetLive updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _FleetLiveQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _FleetLiveQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _FleetLiveQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetLiveQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetLiveQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _FleetLiveQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetLiveQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetLiveQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _FleetLiveQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _FleetLiveQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _FleetLiveQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _FleetLiveQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _FleetLiveQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetLiveQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetLiveQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _FleetLiveQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _FleetLiveQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _FleetLiveQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _FleetLiveQueryBuilder whereKey($id)
	 * @method static _FleetLiveQueryBuilder whereKeyNot($id)
	 * @method static _FleetLiveQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetLiveQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _FleetLiveQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _FleetLiveQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _FleetLiveQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _FleetLiveQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _FleetLiveQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _FleetLiveQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _FleetLiveQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _FleetLiveQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _FleetLiveQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetLiveQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _FleetLiveQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _FleetLiveQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _FleetLiveQueryBuilder withCasts(array $casts)
	 * @method static _FleetLiveQueryBuilder withCount($relations)
	 * @method static _FleetLiveQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _FleetLiveQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _FleetLiveQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _FleetLiveQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _FleetLiveQueryBuilder without($relations)
	 * @method static _FleetLiveQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _FleetLiveQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class FleetLive extends Model { }

	/**
	 * @method _FleetMaintenanceQueryBuilder newModelQuery()
	 * @method _FleetMaintenanceQueryBuilder newQuery()
	 * @method static _FleetMaintenanceQueryBuilder query()
	 * @method static _FleetMaintenanceCollection|FleetMaintenance[] all()
	 * @method static FleetMaintenance baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static FleetMaintenance create(array $attributes = [])
	 * @method static _FleetMaintenanceQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _FleetMaintenanceCollection|FleetMaintenance[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _FleetMaintenanceQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static FleetMaintenance|null find($id, array $columns = [ '*' ])
	 * @method static _FleetMaintenanceCollection|FleetMaintenance[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static FleetMaintenance findOrFail($id, array $columns = [ '*' ])
	 * @method static _FleetMaintenanceCollection|FleetMaintenance[] findOrNew($id, array $columns = [ '*' ])
	 * @method static FleetMaintenance first(array|string $columns = [ '*' ])
	 * @method static FleetMaintenance firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static FleetMaintenance firstOrCreate(array $attributes = [], array $values = [])
	 * @method static FleetMaintenance firstOrFail(array $columns = [ '*' ])
	 * @method static FleetMaintenance firstOrNew(array $attributes = [], array $values = [])
	 * @method static FleetMaintenance firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static FleetMaintenance forceCreate(array $attributes)
	 * @method static _FleetMaintenanceCollection|FleetMaintenance[] fromQuery(string $query, array $bindings = [])
	 * @method static _FleetMaintenanceCollection|FleetMaintenance[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static FleetMaintenance getModel()
	 * @method static FleetMaintenance[] getModels(array|string $columns = [ '*' ])
	 * @method static _FleetMaintenanceQueryBuilder getQuery()
	 * @method static _FleetMaintenanceQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _FleetMaintenanceCollection|FleetMaintenance[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _FleetMaintenanceQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _FleetMaintenanceQueryBuilder latest(Expression|string $column = null)
	 * @method static _FleetMaintenanceQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _FleetMaintenanceQueryBuilder limit(int $value)
	 * @method static FleetMaintenance make(array $attributes = [])
	 * @method static FleetMaintenance newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _FleetMaintenanceQueryBuilder offset(int $value)
	 * @method static _FleetMaintenanceQueryBuilder oldest(Expression|string $column = null)
	 * @method static _FleetMaintenanceQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _FleetMaintenanceQueryBuilder orderByDesc(string $column)
	 * @method static _FleetMaintenanceQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|FleetMaintenance[]|_FleetMaintenanceCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _FleetMaintenanceQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _FleetMaintenanceQueryBuilder select(array $columns = [ '*' ])
	 * @method static _FleetMaintenanceQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|FleetMaintenance[]|_FleetMaintenanceCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _FleetMaintenanceQueryBuilder skip(int $value)
	 * @method static FleetMaintenance sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _FleetMaintenanceQueryBuilder take(int $value)
	 * @method static _FleetMaintenanceQueryBuilder tap(callable $callback)
	 * @method static _FleetMaintenanceQueryBuilder truncate()
	 * @method static _FleetMaintenanceQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static FleetMaintenance updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _FleetMaintenanceQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _FleetMaintenanceQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _FleetMaintenanceQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetMaintenanceQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetMaintenanceQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _FleetMaintenanceQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetMaintenanceQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetMaintenanceQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _FleetMaintenanceQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _FleetMaintenanceQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _FleetMaintenanceQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _FleetMaintenanceQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _FleetMaintenanceQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetMaintenanceQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetMaintenanceQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _FleetMaintenanceQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _FleetMaintenanceQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _FleetMaintenanceQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _FleetMaintenanceQueryBuilder whereKey($id)
	 * @method static _FleetMaintenanceQueryBuilder whereKeyNot($id)
	 * @method static _FleetMaintenanceQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetMaintenanceQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _FleetMaintenanceQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _FleetMaintenanceQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _FleetMaintenanceQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _FleetMaintenanceQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _FleetMaintenanceQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _FleetMaintenanceQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _FleetMaintenanceQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _FleetMaintenanceQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _FleetMaintenanceQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetMaintenanceQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetMaintenanceQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _FleetMaintenanceQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _FleetMaintenanceQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _FleetMaintenanceQueryBuilder withCasts(array $casts)
	 * @method static _FleetMaintenanceQueryBuilder withCount($relations)
	 * @method static _FleetMaintenanceQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _FleetMaintenanceQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _FleetMaintenanceQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _FleetMaintenanceQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _FleetMaintenanceQueryBuilder without($relations)
	 * @method static _FleetMaintenanceQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _FleetMaintenanceQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class FleetMaintenance extends Model { }

	/**
	 * @property int         $id
	 * @property string      $vehicleno
	 * @property string      $etpno
	 * @property string|null $source
	 * @property string|null $destination
	 * @property string|null $starttime
	 * @property string|null $pollingtime
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _FleetTripCatcherQueryBuilder newModelQuery()
	 * @method _FleetTripCatcherQueryBuilder newQuery()
	 * @method static _FleetTripCatcherQueryBuilder query()
	 * @method static _FleetTripCatcherCollection|FleetTripCatcher[] all()
	 * @method static _FleetTripCatcherQueryBuilder whereId($value)
	 * @method static _FleetTripCatcherQueryBuilder whereVehicleno($value)
	 * @method static _FleetTripCatcherQueryBuilder whereEtpno($value)
	 * @method static _FleetTripCatcherQueryBuilder whereSource($value)
	 * @method static _FleetTripCatcherQueryBuilder whereDestination($value)
	 * @method static _FleetTripCatcherQueryBuilder whereStarttime($value)
	 * @method static _FleetTripCatcherQueryBuilder wherePollingtime($value)
	 * @method static _FleetTripCatcherQueryBuilder whereCreatedAt($value)
	 * @method static _FleetTripCatcherQueryBuilder whereUpdatedAt($value)
	 * @method static FleetTripCatcher baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static FleetTripCatcher create(array $attributes = [])
	 * @method static _FleetTripCatcherQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _FleetTripCatcherCollection|FleetTripCatcher[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _FleetTripCatcherQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static FleetTripCatcher|null find($id, array $columns = [ '*' ])
	 * @method static _FleetTripCatcherCollection|FleetTripCatcher[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static FleetTripCatcher findOrFail($id, array $columns = [ '*' ])
	 * @method static _FleetTripCatcherCollection|FleetTripCatcher[] findOrNew($id, array $columns = [ '*' ])
	 * @method static FleetTripCatcher first(array|string $columns = [ '*' ])
	 * @method static FleetTripCatcher firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static FleetTripCatcher firstOrCreate(array $attributes = [], array $values = [])
	 * @method static FleetTripCatcher firstOrFail(array $columns = [ '*' ])
	 * @method static FleetTripCatcher firstOrNew(array $attributes = [], array $values = [])
	 * @method static FleetTripCatcher firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static FleetTripCatcher forceCreate(array $attributes)
	 * @method static _FleetTripCatcherCollection|FleetTripCatcher[] fromQuery(string $query, array $bindings = [])
	 * @method static _FleetTripCatcherCollection|FleetTripCatcher[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static FleetTripCatcher getModel()
	 * @method static FleetTripCatcher[] getModels(array|string $columns = [ '*' ])
	 * @method static _FleetTripCatcherQueryBuilder getQuery()
	 * @method static _FleetTripCatcherQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _FleetTripCatcherCollection|FleetTripCatcher[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _FleetTripCatcherQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _FleetTripCatcherQueryBuilder latest(Expression|string $column = null)
	 * @method static _FleetTripCatcherQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _FleetTripCatcherQueryBuilder limit(int $value)
	 * @method static FleetTripCatcher make(array $attributes = [])
	 * @method static FleetTripCatcher newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _FleetTripCatcherQueryBuilder offset(int $value)
	 * @method static _FleetTripCatcherQueryBuilder oldest(Expression|string $column = null)
	 * @method static _FleetTripCatcherQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _FleetTripCatcherQueryBuilder orderByDesc(string $column)
	 * @method static _FleetTripCatcherQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|FleetTripCatcher[]|_FleetTripCatcherCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _FleetTripCatcherQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _FleetTripCatcherQueryBuilder select(array $columns = [ '*' ])
	 * @method static _FleetTripCatcherQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|FleetTripCatcher[]|_FleetTripCatcherCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _FleetTripCatcherQueryBuilder skip(int $value)
	 * @method static FleetTripCatcher sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _FleetTripCatcherQueryBuilder take(int $value)
	 * @method static _FleetTripCatcherQueryBuilder tap(callable $callback)
	 * @method static _FleetTripCatcherQueryBuilder truncate()
	 * @method static _FleetTripCatcherQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static FleetTripCatcher updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _FleetTripCatcherQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _FleetTripCatcherQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _FleetTripCatcherQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetTripCatcherQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetTripCatcherQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _FleetTripCatcherQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetTripCatcherQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetTripCatcherQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _FleetTripCatcherQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _FleetTripCatcherQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _FleetTripCatcherQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _FleetTripCatcherQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _FleetTripCatcherQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetTripCatcherQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetTripCatcherQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _FleetTripCatcherQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _FleetTripCatcherQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _FleetTripCatcherQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _FleetTripCatcherQueryBuilder whereKey($id)
	 * @method static _FleetTripCatcherQueryBuilder whereKeyNot($id)
	 * @method static _FleetTripCatcherQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetTripCatcherQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _FleetTripCatcherQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _FleetTripCatcherQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _FleetTripCatcherQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _FleetTripCatcherQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _FleetTripCatcherQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _FleetTripCatcherQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _FleetTripCatcherQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _FleetTripCatcherQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _FleetTripCatcherQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetTripCatcherQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetTripCatcherQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _FleetTripCatcherQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _FleetTripCatcherQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _FleetTripCatcherQueryBuilder withCasts(array $casts)
	 * @method static _FleetTripCatcherQueryBuilder withCount($relations)
	 * @method static _FleetTripCatcherQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _FleetTripCatcherQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _FleetTripCatcherQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _FleetTripCatcherQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _FleetTripCatcherQueryBuilder without($relations)
	 * @method static _FleetTripCatcherQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _FleetTripCatcherQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class FleetTripCatcher extends Model { }

	/**
	 * @property int         $id
	 * @property string      $number
	 * @property int         $fleet_id
	 * @property string      $owner_name
	 * @property string      $reg_date
	 * @property string      $model
	 * @property string      $fitness_upto
	 * @property string      $insurance_upto
	 * @property string      $class
	 * @property string      $chassis_number
	 * @property string      $engine_number
	 * @property string      $authority
	 * @property string      $rto_code
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _FleetVehicleQueryBuilder newModelQuery()
	 * @method _FleetVehicleQueryBuilder newQuery()
	 * @method static _FleetVehicleQueryBuilder query()
	 * @method static _FleetVehicleCollection|FleetVehicle[] all()
	 * @method static _FleetVehicleQueryBuilder whereId($value)
	 * @method static _FleetVehicleQueryBuilder whereNumber($value)
	 * @method static _FleetVehicleQueryBuilder whereFleetId($value)
	 * @method static _FleetVehicleQueryBuilder whereOwnerName($value)
	 * @method static _FleetVehicleQueryBuilder whereRegDate($value)
	 * @method static _FleetVehicleQueryBuilder whereModel($value)
	 * @method static _FleetVehicleQueryBuilder whereFitnessUpto($value)
	 * @method static _FleetVehicleQueryBuilder whereInsuranceUpto($value)
	 * @method static _FleetVehicleQueryBuilder whereClass($value)
	 * @method static _FleetVehicleQueryBuilder whereChassisNumber($value)
	 * @method static _FleetVehicleQueryBuilder whereEngineNumber($value)
	 * @method static _FleetVehicleQueryBuilder whereAuthority($value)
	 * @method static _FleetVehicleQueryBuilder whereRtoCode($value)
	 * @method static _FleetVehicleQueryBuilder whereCreatedAt($value)
	 * @method static _FleetVehicleQueryBuilder whereUpdatedAt($value)
	 * @method static FleetVehicle baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static FleetVehicle create(array $attributes = [])
	 * @method static _FleetVehicleQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _FleetVehicleCollection|FleetVehicle[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _FleetVehicleQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static FleetVehicle|null find($id, array $columns = [ '*' ])
	 * @method static _FleetVehicleCollection|FleetVehicle[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static FleetVehicle findOrFail($id, array $columns = [ '*' ])
	 * @method static _FleetVehicleCollection|FleetVehicle[] findOrNew($id, array $columns = [ '*' ])
	 * @method static FleetVehicle first(array|string $columns = [ '*' ])
	 * @method static FleetVehicle firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static FleetVehicle firstOrCreate(array $attributes = [], array $values = [])
	 * @method static FleetVehicle firstOrFail(array $columns = [ '*' ])
	 * @method static FleetVehicle firstOrNew(array $attributes = [], array $values = [])
	 * @method static FleetVehicle firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static FleetVehicle forceCreate(array $attributes)
	 * @method static _FleetVehicleCollection|FleetVehicle[] fromQuery(string $query, array $bindings = [])
	 * @method static _FleetVehicleCollection|FleetVehicle[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static FleetVehicle getModel()
	 * @method static FleetVehicle[] getModels(array|string $columns = [ '*' ])
	 * @method static _FleetVehicleQueryBuilder getQuery()
	 * @method static _FleetVehicleQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _FleetVehicleCollection|FleetVehicle[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _FleetVehicleQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _FleetVehicleQueryBuilder latest(Expression|string $column = null)
	 * @method static _FleetVehicleQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _FleetVehicleQueryBuilder limit(int $value)
	 * @method static FleetVehicle make(array $attributes = [])
	 * @method static FleetVehicle newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _FleetVehicleQueryBuilder offset(int $value)
	 * @method static _FleetVehicleQueryBuilder oldest(Expression|string $column = null)
	 * @method static _FleetVehicleQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _FleetVehicleQueryBuilder orderByDesc(string $column)
	 * @method static _FleetVehicleQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|FleetVehicle[]|_FleetVehicleCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _FleetVehicleQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _FleetVehicleQueryBuilder select(array $columns = [ '*' ])
	 * @method static _FleetVehicleQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|FleetVehicle[]|_FleetVehicleCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _FleetVehicleQueryBuilder skip(int $value)
	 * @method static FleetVehicle sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _FleetVehicleQueryBuilder take(int $value)
	 * @method static _FleetVehicleQueryBuilder tap(callable $callback)
	 * @method static _FleetVehicleQueryBuilder truncate()
	 * @method static _FleetVehicleQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static FleetVehicle updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _FleetVehicleQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _FleetVehicleQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _FleetVehicleQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetVehicleQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetVehicleQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _FleetVehicleQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetVehicleQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetVehicleQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _FleetVehicleQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _FleetVehicleQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _FleetVehicleQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _FleetVehicleQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _FleetVehicleQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetVehicleQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _FleetVehicleQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _FleetVehicleQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _FleetVehicleQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _FleetVehicleQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _FleetVehicleQueryBuilder whereKey($id)
	 * @method static _FleetVehicleQueryBuilder whereKeyNot($id)
	 * @method static _FleetVehicleQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetVehicleQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _FleetVehicleQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _FleetVehicleQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _FleetVehicleQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _FleetVehicleQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _FleetVehicleQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _FleetVehicleQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _FleetVehicleQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _FleetVehicleQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _FleetVehicleQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetVehicleQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _FleetVehicleQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _FleetVehicleQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _FleetVehicleQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _FleetVehicleQueryBuilder withCasts(array $casts)
	 * @method static _FleetVehicleQueryBuilder withCount($relations)
	 * @method static _FleetVehicleQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _FleetVehicleQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _FleetVehicleQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _FleetVehicleQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _FleetVehicleQueryBuilder without($relations)
	 * @method static _FleetVehicleQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _FleetVehicleQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class FleetVehicle extends Model { }
}

namespace App\Domain\General\Models {

    use Illuminate\Support\Carbon;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\HasMany;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Relations\BelongsTo;
    use LaravelIdea\Helper\App\Domain\General\Models\_MineCollection;
    use LaravelIdea\Helper\App\Domain\General\Models\_MineQueryBuilder;
    use LaravelIdea\Helper\App\Domain\General\Models\_SectorCollection;
    use LaravelIdea\Helper\App\Domain\General\Models\_AddressCollection;
    use LaravelIdea\Helper\App\Domain\General\Models\_MaterialCollection;
    use LaravelIdea\Helper\App\Domain\General\Models\_SectorQueryBuilder;
    use LaravelIdea\Helper\App\Domain\General\Models\_AddressQueryBuilder;
    use LaravelIdea\Helper\App\Domain\General\Models\_MaterialQueryBuilder;
    use LaravelIdea\Helper\App\Domain\General\Models\_PhoneNumberCollection;
    use LaravelIdea\Helper\App\Domain\General\Models\_PhoneNumberQueryBuilder;
    use LaravelIdea\Helper\App\Domain\General\Models\_UnloadingPointCollection;
    use LaravelIdea\Helper\App\Domain\General\Models\_UnloadingPointQueryBuilder;

    /**
	 * @property int         $id
	 * @property string|null $street_address
	 * @property string|null $street_address_two
	 * @property string|null $city
	 * @property string|null $state
	 * @property string|null $zip
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _AddressQueryBuilder newModelQuery()
	 * @method _AddressQueryBuilder newQuery()
	 * @method static _AddressQueryBuilder query()
	 * @method static _AddressCollection|Address[] all()
	 * @method static _AddressQueryBuilder whereId($value)
	 * @method static _AddressQueryBuilder whereStreetAddress($value)
	 * @method static _AddressQueryBuilder whereStreetAddressTwo($value)
	 * @method static _AddressQueryBuilder whereCity($value)
	 * @method static _AddressQueryBuilder whereState($value)
	 * @method static _AddressQueryBuilder whereZip($value)
	 * @method static _AddressQueryBuilder whereCreatedAt($value)
	 * @method static _AddressQueryBuilder whereUpdatedAt($value)
	 * @method static Address baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Address create(array $attributes = [])
	 * @method static _AddressQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _AddressCollection|Address[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _AddressQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Address|null find($id, array $columns = [ '*' ])
	 * @method static _AddressCollection|Address[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Address findOrFail($id, array $columns = [ '*' ])
	 * @method static _AddressCollection|Address[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Address first(array|string $columns = [ '*' ])
	 * @method static Address firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Address firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Address firstOrFail(array $columns = [ '*' ])
	 * @method static Address firstOrNew(array $attributes = [], array $values = [])
	 * @method static Address firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Address forceCreate(array $attributes)
	 * @method static _AddressCollection|Address[] fromQuery(string $query, array $bindings = [])
	 * @method static _AddressCollection|Address[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Address getModel()
	 * @method static Address[] getModels(array|string $columns = [ '*' ])
	 * @method static _AddressQueryBuilder getQuery()
	 * @method static _AddressQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _AddressCollection|Address[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _AddressQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _AddressQueryBuilder latest(Expression|string $column = null)
	 * @method static _AddressQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _AddressQueryBuilder limit(int $value)
	 * @method static Address make(array $attributes = [])
	 * @method static Address newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _AddressQueryBuilder offset(int $value)
	 * @method static _AddressQueryBuilder oldest(Expression|string $column = null)
	 * @method static _AddressQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _AddressQueryBuilder orderByDesc(string $column)
	 * @method static _AddressQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Address[]|_AddressCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _AddressQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _AddressQueryBuilder select(array $columns = [ '*' ])
	 * @method static _AddressQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Address[]|_AddressCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _AddressQueryBuilder skip(int $value)
	 * @method static Address sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _AddressQueryBuilder take(int $value)
	 * @method static _AddressQueryBuilder tap(callable $callback)
	 * @method static _AddressQueryBuilder truncate()
	 * @method static _AddressQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Address updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _AddressQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _AddressQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _AddressQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _AddressQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _AddressQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _AddressQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _AddressQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _AddressQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _AddressQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _AddressQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _AddressQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _AddressQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _AddressQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _AddressQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _AddressQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _AddressQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _AddressQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _AddressQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _AddressQueryBuilder whereKey($id)
	 * @method static _AddressQueryBuilder whereKeyNot($id)
	 * @method static _AddressQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _AddressQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _AddressQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _AddressQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _AddressQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _AddressQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _AddressQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _AddressQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _AddressQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _AddressQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _AddressQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _AddressQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _AddressQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _AddressQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _AddressQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _AddressQueryBuilder withCasts(array $casts)
	 * @method static _AddressQueryBuilder withCount($relations)
	 * @method static _AddressQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _AddressQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _AddressQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _AddressQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _AddressQueryBuilder without($relations)
	 * @method static _AddressQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _AddressQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Address extends Model { }

	/**
	 * @property int         $id
	 * @property string      $name
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _MaterialQueryBuilder newModelQuery()
	 * @method _MaterialQueryBuilder newQuery()
	 * @method static _MaterialQueryBuilder query()
	 * @method static _MaterialCollection|Material[] all()
	 * @method static _MaterialQueryBuilder whereId($value)
	 * @method static _MaterialQueryBuilder whereName($value)
	 * @method static _MaterialQueryBuilder whereCreatedAt($value)
	 * @method static _MaterialQueryBuilder whereUpdatedAt($value)
	 * @method static Material baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Material create(array $attributes = [])
	 * @method static _MaterialQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _MaterialCollection|Material[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _MaterialQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Material|null find($id, array $columns = [ '*' ])
	 * @method static _MaterialCollection|Material[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Material findOrFail($id, array $columns = [ '*' ])
	 * @method static _MaterialCollection|Material[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Material first(array|string $columns = [ '*' ])
	 * @method static Material firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Material firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Material firstOrFail(array $columns = [ '*' ])
	 * @method static Material firstOrNew(array $attributes = [], array $values = [])
	 * @method static Material firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Material forceCreate(array $attributes)
	 * @method static _MaterialCollection|Material[] fromQuery(string $query, array $bindings = [])
	 * @method static _MaterialCollection|Material[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Material getModel()
	 * @method static Material[] getModels(array|string $columns = [ '*' ])
	 * @method static _MaterialQueryBuilder getQuery()
	 * @method static _MaterialQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _MaterialCollection|Material[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _MaterialQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _MaterialQueryBuilder latest(Expression|string $column = null)
	 * @method static _MaterialQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _MaterialQueryBuilder limit(int $value)
	 * @method static Material make(array $attributes = [])
	 * @method static Material newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _MaterialQueryBuilder offset(int $value)
	 * @method static _MaterialQueryBuilder oldest(Expression|string $column = null)
	 * @method static _MaterialQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _MaterialQueryBuilder orderByDesc(string $column)
	 * @method static _MaterialQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Material[]|_MaterialCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _MaterialQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _MaterialQueryBuilder select(array $columns = [ '*' ])
	 * @method static _MaterialQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Material[]|_MaterialCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _MaterialQueryBuilder skip(int $value)
	 * @method static Material sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _MaterialQueryBuilder take(int $value)
	 * @method static _MaterialQueryBuilder tap(callable $callback)
	 * @method static _MaterialQueryBuilder truncate()
	 * @method static _MaterialQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Material updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _MaterialQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _MaterialQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _MaterialQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _MaterialQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _MaterialQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _MaterialQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MaterialQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MaterialQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _MaterialQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _MaterialQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _MaterialQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _MaterialQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _MaterialQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _MaterialQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _MaterialQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _MaterialQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _MaterialQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _MaterialQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _MaterialQueryBuilder whereKey($id)
	 * @method static _MaterialQueryBuilder whereKeyNot($id)
	 * @method static _MaterialQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MaterialQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _MaterialQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _MaterialQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _MaterialQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _MaterialQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _MaterialQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _MaterialQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _MaterialQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _MaterialQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _MaterialQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MaterialQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _MaterialQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _MaterialQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _MaterialQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _MaterialQueryBuilder withCasts(array $casts)
	 * @method static _MaterialQueryBuilder withCount($relations)
	 * @method static _MaterialQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _MaterialQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _MaterialQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _MaterialQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _MaterialQueryBuilder without($relations)
	 * @method static _MaterialQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _MaterialQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Material extends Model { }

	/**
	 * @property int         $id
	 * @property string      $name
	 * @property int         $sector_id
	 * @property bool        $visible
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @property Sector      $sector
	 * @method BelongsTo|_SectorQueryBuilder sector()
	 * @method _MineQueryBuilder newModelQuery()
	 * @method _MineQueryBuilder newQuery()
	 * @method static _MineQueryBuilder query()
	 * @method static _MineCollection|Mine[] all()
	 * @method static _MineQueryBuilder whereId($value)
	 * @method static _MineQueryBuilder whereName($value)
	 * @method static _MineQueryBuilder whereSectorId($value)
	 * @method static _MineQueryBuilder whereVisible($value)
	 * @method static _MineQueryBuilder whereCreatedAt($value)
	 * @method static _MineQueryBuilder whereUpdatedAt($value)
	 * @method static Mine baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Mine create(array $attributes = [])
	 * @method static _MineQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _MineCollection|Mine[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _MineQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Mine|null find($id, array $columns = [ '*' ])
	 * @method static _MineCollection|Mine[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Mine findOrFail($id, array $columns = [ '*' ])
	 * @method static _MineCollection|Mine[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Mine first(array|string $columns = [ '*' ])
	 * @method static Mine firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Mine firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Mine firstOrFail(array $columns = [ '*' ])
	 * @method static Mine firstOrNew(array $attributes = [], array $values = [])
	 * @method static Mine firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Mine forceCreate(array $attributes)
	 * @method static _MineCollection|Mine[] fromQuery(string $query, array $bindings = [])
	 * @method static _MineCollection|Mine[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Mine getModel()
	 * @method static Mine[] getModels(array|string $columns = [ '*' ])
	 * @method static _MineQueryBuilder getQuery()
	 * @method static _MineQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _MineCollection|Mine[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _MineQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _MineQueryBuilder latest(Expression|string $column = null)
	 * @method static _MineQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _MineQueryBuilder limit(int $value)
	 * @method static Mine make(array $attributes = [])
	 * @method static Mine newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _MineQueryBuilder offset(int $value)
	 * @method static _MineQueryBuilder oldest(Expression|string $column = null)
	 * @method static _MineQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _MineQueryBuilder orderByDesc(string $column)
	 * @method static _MineQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Mine[]|_MineCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _MineQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _MineQueryBuilder select(array $columns = [ '*' ])
	 * @method static _MineQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Mine[]|_MineCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _MineQueryBuilder skip(int $value)
	 * @method static Mine sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _MineQueryBuilder take(int $value)
	 * @method static _MineQueryBuilder tap(callable $callback)
	 * @method static _MineQueryBuilder truncate()
	 * @method static _MineQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Mine updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _MineQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _MineQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _MineQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _MineQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _MineQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _MineQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MineQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MineQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _MineQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _MineQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _MineQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _MineQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _MineQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _MineQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _MineQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _MineQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _MineQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _MineQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _MineQueryBuilder whereKey($id)
	 * @method static _MineQueryBuilder whereKeyNot($id)
	 * @method static _MineQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MineQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _MineQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _MineQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _MineQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _MineQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _MineQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _MineQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _MineQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _MineQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _MineQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MineQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _MineQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _MineQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _MineQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _MineQueryBuilder withCasts(array $casts)
	 * @method static _MineQueryBuilder withCount($relations)
	 * @method static _MineQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _MineQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _MineQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _MineQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _MineQueryBuilder without($relations)
	 * @method static _MineQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _MineQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Mine extends Model { }

	/**
	 * @property int         $id
	 * @property string      $phone_number
	 * @property int         $phoneable_id
	 * @property string      $phoneable_type
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @property Model       $phoneable
	 * @method MorphTo phoneable()
	 * @method _PhoneNumberQueryBuilder newModelQuery()
	 * @method _PhoneNumberQueryBuilder newQuery()
	 * @method static _PhoneNumberQueryBuilder query()
	 * @method static _PhoneNumberCollection|PhoneNumber[] all()
	 * @method static _PhoneNumberQueryBuilder whereId($value)
	 * @method static _PhoneNumberQueryBuilder wherePhoneNumber($value)
	 * @method static _PhoneNumberQueryBuilder wherePhoneableId($value)
	 * @method static _PhoneNumberQueryBuilder wherePhoneableType($value)
	 * @method static _PhoneNumberQueryBuilder whereCreatedAt($value)
	 * @method static _PhoneNumberQueryBuilder whereUpdatedAt($value)
	 * @method static PhoneNumber baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PhoneNumber create(array $attributes = [])
	 * @method static _PhoneNumberQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PhoneNumberCollection|PhoneNumber[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PhoneNumberQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PhoneNumber|null find($id, array $columns = [ '*' ])
	 * @method static _PhoneNumberCollection|PhoneNumber[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static PhoneNumber findOrFail($id, array $columns = [ '*' ])
	 * @method static _PhoneNumberCollection|PhoneNumber[] findOrNew($id, array $columns = [ '*' ])
	 * @method static PhoneNumber first(array|string $columns = [ '*' ])
	 * @method static PhoneNumber firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static PhoneNumber firstOrCreate(array $attributes = [], array $values = [])
	 * @method static PhoneNumber firstOrFail(array $columns = [ '*' ])
	 * @method static PhoneNumber firstOrNew(array $attributes = [], array $values = [])
	 * @method static PhoneNumber firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PhoneNumber forceCreate(array $attributes)
	 * @method static _PhoneNumberCollection|PhoneNumber[] fromQuery(string $query, array $bindings = [])
	 * @method static _PhoneNumberCollection|PhoneNumber[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static PhoneNumber getModel()
	 * @method static PhoneNumber[] getModels(array|string $columns = [ '*' ])
	 * @method static _PhoneNumberQueryBuilder getQuery()
	 * @method static _PhoneNumberQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _PhoneNumberCollection|PhoneNumber[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _PhoneNumberQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PhoneNumberQueryBuilder latest(Expression|string $column = null)
	 * @method static _PhoneNumberQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PhoneNumberQueryBuilder limit(int $value)
	 * @method static PhoneNumber make(array $attributes = [])
	 * @method static PhoneNumber newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _PhoneNumberQueryBuilder offset(int $value)
	 * @method static _PhoneNumberQueryBuilder oldest(Expression|string $column = null)
	 * @method static _PhoneNumberQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _PhoneNumberQueryBuilder orderByDesc(string $column)
	 * @method static _PhoneNumberQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|PhoneNumber[]|_PhoneNumberCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _PhoneNumberQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PhoneNumberQueryBuilder select(array $columns = [ '*' ])
	 * @method static _PhoneNumberQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|PhoneNumber[]|_PhoneNumberCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _PhoneNumberQueryBuilder skip(int $value)
	 * @method static PhoneNumber sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _PhoneNumberQueryBuilder take(int $value)
	 * @method static _PhoneNumberQueryBuilder tap(callable $callback)
	 * @method static _PhoneNumberQueryBuilder truncate()
	 * @method static _PhoneNumberQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PhoneNumber updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _PhoneNumberQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PhoneNumberQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PhoneNumberQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PhoneNumberQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PhoneNumberQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PhoneNumberQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PhoneNumberQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PhoneNumberQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PhoneNumberQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PhoneNumberQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PhoneNumberQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PhoneNumberQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PhoneNumberQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PhoneNumberQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PhoneNumberQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PhoneNumberQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PhoneNumberQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PhoneNumberQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PhoneNumberQueryBuilder whereKey($id)
	 * @method static _PhoneNumberQueryBuilder whereKeyNot($id)
	 * @method static _PhoneNumberQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PhoneNumberQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PhoneNumberQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PhoneNumberQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _PhoneNumberQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PhoneNumberQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PhoneNumberQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PhoneNumberQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PhoneNumberQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PhoneNumberQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PhoneNumberQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PhoneNumberQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PhoneNumberQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _PhoneNumberQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _PhoneNumberQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _PhoneNumberQueryBuilder withCasts(array $casts)
	 * @method static _PhoneNumberQueryBuilder withCount($relations)
	 * @method static _PhoneNumberQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _PhoneNumberQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _PhoneNumberQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _PhoneNumberQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _PhoneNumberQueryBuilder without($relations)
	 * @method static _PhoneNumberQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PhoneNumberQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class PhoneNumber extends Model { }

	/**
	 * @property int                    $id
	 * @property string                 $name
	 * @property bool                   $visible
	 * @property Carbon|null            $created_at
	 * @property Carbon|null            $updated_at
	 * @property _MineCollection|Mine[] $mines
	 * @method HasMany|_MineQueryBuilder mines()
	 * @property Sector                 $sector
	 * @method BelongsTo|_SectorQueryBuilder sector()
	 * @method _SectorQueryBuilder newModelQuery()
	 * @method _SectorQueryBuilder newQuery()
	 * @method static _SectorQueryBuilder query()
	 * @method static _SectorCollection|Sector[] all()
	 * @method static _SectorQueryBuilder whereId($value)
	 * @method static _SectorQueryBuilder whereName($value)
	 * @method static _SectorQueryBuilder whereVisible($value)
	 * @method static _SectorQueryBuilder whereCreatedAt($value)
	 * @method static _SectorQueryBuilder whereUpdatedAt($value)
	 * @method static Sector baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Sector create(array $attributes = [])
	 * @method static _SectorQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _SectorCollection|Sector[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _SectorQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Sector|null find($id, array $columns = [ '*' ])
	 * @method static _SectorCollection|Sector[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Sector findOrFail($id, array $columns = [ '*' ])
	 * @method static _SectorCollection|Sector[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Sector first(array|string $columns = [ '*' ])
	 * @method static Sector firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Sector firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Sector firstOrFail(array $columns = [ '*' ])
	 * @method static Sector firstOrNew(array $attributes = [], array $values = [])
	 * @method static Sector firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Sector forceCreate(array $attributes)
	 * @method static _SectorCollection|Sector[] fromQuery(string $query, array $bindings = [])
	 * @method static _SectorCollection|Sector[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Sector getModel()
	 * @method static Sector[] getModels(array|string $columns = [ '*' ])
	 * @method static _SectorQueryBuilder getQuery()
	 * @method static _SectorQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _SectorCollection|Sector[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _SectorQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _SectorQueryBuilder latest(Expression|string $column = null)
	 * @method static _SectorQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _SectorQueryBuilder limit(int $value)
	 * @method static Sector make(array $attributes = [])
	 * @method static Sector newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _SectorQueryBuilder offset(int $value)
	 * @method static _SectorQueryBuilder oldest(Expression|string $column = null)
	 * @method static _SectorQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _SectorQueryBuilder orderByDesc(string $column)
	 * @method static _SectorQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Sector[]|_SectorCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _SectorQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _SectorQueryBuilder select(array $columns = [ '*' ])
	 * @method static _SectorQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Sector[]|_SectorCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _SectorQueryBuilder skip(int $value)
	 * @method static Sector sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _SectorQueryBuilder take(int $value)
	 * @method static _SectorQueryBuilder tap(callable $callback)
	 * @method static _SectorQueryBuilder truncate()
	 * @method static _SectorQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Sector updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _SectorQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _SectorQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _SectorQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _SectorQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _SectorQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _SectorQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _SectorQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _SectorQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _SectorQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _SectorQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _SectorQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _SectorQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _SectorQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _SectorQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _SectorQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _SectorQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _SectorQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _SectorQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _SectorQueryBuilder whereKey($id)
	 * @method static _SectorQueryBuilder whereKeyNot($id)
	 * @method static _SectorQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _SectorQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _SectorQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _SectorQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _SectorQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _SectorQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _SectorQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _SectorQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _SectorQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _SectorQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _SectorQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _SectorQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _SectorQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _SectorQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _SectorQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _SectorQueryBuilder withCasts(array $casts)
	 * @method static _SectorQueryBuilder withCount($relations)
	 * @method static _SectorQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _SectorQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _SectorQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _SectorQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _SectorQueryBuilder without($relations)
	 * @method static _SectorQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _SectorQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Sector extends Model { }

	/**
	 * @property int         $id
	 * @property string|null $short_code
	 * @property string      $name
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _UnloadingPointQueryBuilder newModelQuery()
	 * @method _UnloadingPointQueryBuilder newQuery()
	 * @method static _UnloadingPointQueryBuilder query()
	 * @method static _UnloadingPointCollection|UnloadingPoint[] all()
	 * @method static _UnloadingPointQueryBuilder whereId($value)
	 * @method static _UnloadingPointQueryBuilder whereShortCode($value)
	 * @method static _UnloadingPointQueryBuilder whereName($value)
	 * @method static _UnloadingPointQueryBuilder whereCreatedAt($value)
	 * @method static _UnloadingPointQueryBuilder whereUpdatedAt($value)
	 * @method static UnloadingPoint baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static UnloadingPoint create(array $attributes = [])
	 * @method static _UnloadingPointQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _UnloadingPointCollection|UnloadingPoint[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _UnloadingPointQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static UnloadingPoint|null find($id, array $columns = [ '*' ])
	 * @method static _UnloadingPointCollection|UnloadingPoint[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static UnloadingPoint findOrFail($id, array $columns = [ '*' ])
	 * @method static _UnloadingPointCollection|UnloadingPoint[] findOrNew($id, array $columns = [ '*' ])
	 * @method static UnloadingPoint first(array|string $columns = [ '*' ])
	 * @method static UnloadingPoint firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static UnloadingPoint firstOrCreate(array $attributes = [], array $values = [])
	 * @method static UnloadingPoint firstOrFail(array $columns = [ '*' ])
	 * @method static UnloadingPoint firstOrNew(array $attributes = [], array $values = [])
	 * @method static UnloadingPoint firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static UnloadingPoint forceCreate(array $attributes)
	 * @method static _UnloadingPointCollection|UnloadingPoint[] fromQuery(string $query, array $bindings = [])
	 * @method static _UnloadingPointCollection|UnloadingPoint[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static UnloadingPoint getModel()
	 * @method static UnloadingPoint[] getModels(array|string $columns = [ '*' ])
	 * @method static _UnloadingPointQueryBuilder getQuery()
	 * @method static _UnloadingPointQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _UnloadingPointCollection|UnloadingPoint[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _UnloadingPointQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _UnloadingPointQueryBuilder latest(Expression|string $column = null)
	 * @method static _UnloadingPointQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _UnloadingPointQueryBuilder limit(int $value)
	 * @method static UnloadingPoint make(array $attributes = [])
	 * @method static UnloadingPoint newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _UnloadingPointQueryBuilder offset(int $value)
	 * @method static _UnloadingPointQueryBuilder oldest(Expression|string $column = null)
	 * @method static _UnloadingPointQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _UnloadingPointQueryBuilder orderByDesc(string $column)
	 * @method static _UnloadingPointQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|UnloadingPoint[]|_UnloadingPointCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _UnloadingPointQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _UnloadingPointQueryBuilder select(array $columns = [ '*' ])
	 * @method static _UnloadingPointQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|UnloadingPoint[]|_UnloadingPointCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _UnloadingPointQueryBuilder skip(int $value)
	 * @method static UnloadingPoint sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _UnloadingPointQueryBuilder take(int $value)
	 * @method static _UnloadingPointQueryBuilder tap(callable $callback)
	 * @method static _UnloadingPointQueryBuilder truncate()
	 * @method static _UnloadingPointQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static UnloadingPoint updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _UnloadingPointQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _UnloadingPointQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _UnloadingPointQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _UnloadingPointQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _UnloadingPointQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _UnloadingPointQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _UnloadingPointQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _UnloadingPointQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _UnloadingPointQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _UnloadingPointQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _UnloadingPointQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _UnloadingPointQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _UnloadingPointQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _UnloadingPointQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _UnloadingPointQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _UnloadingPointQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _UnloadingPointQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _UnloadingPointQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _UnloadingPointQueryBuilder whereKey($id)
	 * @method static _UnloadingPointQueryBuilder whereKeyNot($id)
	 * @method static _UnloadingPointQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _UnloadingPointQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _UnloadingPointQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _UnloadingPointQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _UnloadingPointQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _UnloadingPointQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _UnloadingPointQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _UnloadingPointQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _UnloadingPointQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _UnloadingPointQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _UnloadingPointQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _UnloadingPointQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _UnloadingPointQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _UnloadingPointQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _UnloadingPointQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _UnloadingPointQueryBuilder withCasts(array $casts)
	 * @method static _UnloadingPointQueryBuilder withCount($relations)
	 * @method static _UnloadingPointQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _UnloadingPointQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _UnloadingPointQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _UnloadingPointQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _UnloadingPointQueryBuilder without($relations)
	 * @method static _UnloadingPointQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _UnloadingPointQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class UnloadingPoint extends Model { }
}

namespace App\Domain\Invoice\Models {

    use Illuminate\Support\Carbon;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use LaravelIdea\Helper\App\Domain\Invoice\Models\_InvoiceCollection;
    use LaravelIdea\Helper\App\Domain\Invoice\Models\_InvoiceQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Invoice\Models\_InvoiceItemCollection;
    use LaravelIdea\Helper\App\Domain\Invoice\Models\_InvoiceItemQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Invoice\Models\_InvoiceStatusCollection;
    use LaravelIdea\Helper\App\Domain\Invoice\Models\_InvoiceStatusQueryBuilder;

    /**
	 * @property int         $id
	 * @property Carbon      $invoice_date
	 * @property Carbon      $due_date
	 * @property string      $invoice_number
	 * @property string      $bill_number
	 * @property string|null $reference_number
	 * @property int         $status
	 * @property string|null $notes
	 * @property int         $total
	 * @property int         $tax
	 * @property int         $due_amount
	 * @property int         $received_amount
	 * @property int         $consignee_id
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _InvoiceQueryBuilder newModelQuery()
	 * @method _InvoiceQueryBuilder newQuery()
	 * @method static _InvoiceQueryBuilder query()
	 * @method static _InvoiceCollection|Invoice[] all()
	 * @method static _InvoiceQueryBuilder whereId($value)
	 * @method static _InvoiceQueryBuilder whereInvoiceDate($value)
	 * @method static _InvoiceQueryBuilder whereDueDate($value)
	 * @method static _InvoiceQueryBuilder whereInvoiceNumber($value)
	 * @method static _InvoiceQueryBuilder whereBillNumber($value)
	 * @method static _InvoiceQueryBuilder whereReferenceNumber($value)
	 * @method static _InvoiceQueryBuilder whereStatus($value)
	 * @method static _InvoiceQueryBuilder whereNotes($value)
	 * @method static _InvoiceQueryBuilder whereTotal($value)
	 * @method static _InvoiceQueryBuilder whereTax($value)
	 * @method static _InvoiceQueryBuilder whereDueAmount($value)
	 * @method static _InvoiceQueryBuilder whereReceivedAmount($value)
	 * @method static _InvoiceQueryBuilder whereConsigneeId($value)
	 * @method static _InvoiceQueryBuilder whereCreatedAt($value)
	 * @method static _InvoiceQueryBuilder whereUpdatedAt($value)
	 * @method static Invoice baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Invoice create(array $attributes = [])
	 * @method static _InvoiceQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _InvoiceCollection|Invoice[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _InvoiceQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Invoice|null find($id, array $columns = [ '*' ])
	 * @method static _InvoiceCollection|Invoice[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Invoice findOrFail($id, array $columns = [ '*' ])
	 * @method static _InvoiceCollection|Invoice[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Invoice first(array|string $columns = [ '*' ])
	 * @method static Invoice firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Invoice firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Invoice firstOrFail(array $columns = [ '*' ])
	 * @method static Invoice firstOrNew(array $attributes = [], array $values = [])
	 * @method static Invoice firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Invoice forceCreate(array $attributes)
	 * @method static _InvoiceCollection|Invoice[] fromQuery(string $query, array $bindings = [])
	 * @method static _InvoiceCollection|Invoice[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Invoice getModel()
	 * @method static Invoice[] getModels(array|string $columns = [ '*' ])
	 * @method static _InvoiceQueryBuilder getQuery()
	 * @method static _InvoiceQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _InvoiceCollection|Invoice[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _InvoiceQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _InvoiceQueryBuilder latest(Expression|string $column = null)
	 * @method static _InvoiceQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _InvoiceQueryBuilder limit(int $value)
	 * @method static Invoice make(array $attributes = [])
	 * @method static Invoice newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _InvoiceQueryBuilder offset(int $value)
	 * @method static _InvoiceQueryBuilder oldest(Expression|string $column = null)
	 * @method static _InvoiceQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _InvoiceQueryBuilder orderByDesc(string $column)
	 * @method static _InvoiceQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Invoice[]|_InvoiceCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _InvoiceQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _InvoiceQueryBuilder select(array $columns = [ '*' ])
	 * @method static _InvoiceQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Invoice[]|_InvoiceCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _InvoiceQueryBuilder skip(int $value)
	 * @method static Invoice sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _InvoiceQueryBuilder take(int $value)
	 * @method static _InvoiceQueryBuilder tap(callable $callback)
	 * @method static _InvoiceQueryBuilder truncate()
	 * @method static _InvoiceQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Invoice updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _InvoiceQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _InvoiceQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _InvoiceQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _InvoiceQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _InvoiceQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _InvoiceQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _InvoiceQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _InvoiceQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _InvoiceQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _InvoiceQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _InvoiceQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _InvoiceQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _InvoiceQueryBuilder whereKey($id)
	 * @method static _InvoiceQueryBuilder whereKeyNot($id)
	 * @method static _InvoiceQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _InvoiceQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _InvoiceQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _InvoiceQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _InvoiceQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _InvoiceQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _InvoiceQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _InvoiceQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _InvoiceQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _InvoiceQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _InvoiceQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _InvoiceQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _InvoiceQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _InvoiceQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _InvoiceQueryBuilder withCasts(array $casts)
	 * @method static _InvoiceQueryBuilder withCount($relations)
	 * @method static _InvoiceQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _InvoiceQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _InvoiceQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _InvoiceQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _InvoiceQueryBuilder without($relations)
	 * @method static _InvoiceQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _InvoiceQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Invoice extends Model { }

	/**
	 * @property int         $id
	 * @property string      $name
	 * @property string|null $description
	 * @property int         $company_id
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _InvoiceItemQueryBuilder newModelQuery()
	 * @method _InvoiceItemQueryBuilder newQuery()
	 * @method static _InvoiceItemQueryBuilder query()
	 * @method static _InvoiceItemCollection|InvoiceItem[] all()
	 * @method static _InvoiceItemQueryBuilder whereId($value)
	 * @method static _InvoiceItemQueryBuilder whereName($value)
	 * @method static _InvoiceItemQueryBuilder whereDescription($value)
	 * @method static _InvoiceItemQueryBuilder whereCompanyId($value)
	 * @method static _InvoiceItemQueryBuilder whereCreatedAt($value)
	 * @method static _InvoiceItemQueryBuilder whereUpdatedAt($value)
	 * @method static InvoiceItem baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static InvoiceItem create(array $attributes = [])
	 * @method static _InvoiceItemQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _InvoiceItemCollection|InvoiceItem[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _InvoiceItemQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static InvoiceItem|null find($id, array $columns = [ '*' ])
	 * @method static _InvoiceItemCollection|InvoiceItem[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static InvoiceItem findOrFail($id, array $columns = [ '*' ])
	 * @method static _InvoiceItemCollection|InvoiceItem[] findOrNew($id, array $columns = [ '*' ])
	 * @method static InvoiceItem first(array|string $columns = [ '*' ])
	 * @method static InvoiceItem firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static InvoiceItem firstOrCreate(array $attributes = [], array $values = [])
	 * @method static InvoiceItem firstOrFail(array $columns = [ '*' ])
	 * @method static InvoiceItem firstOrNew(array $attributes = [], array $values = [])
	 * @method static InvoiceItem firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static InvoiceItem forceCreate(array $attributes)
	 * @method static _InvoiceItemCollection|InvoiceItem[] fromQuery(string $query, array $bindings = [])
	 * @method static _InvoiceItemCollection|InvoiceItem[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static InvoiceItem getModel()
	 * @method static InvoiceItem[] getModels(array|string $columns = [ '*' ])
	 * @method static _InvoiceItemQueryBuilder getQuery()
	 * @method static _InvoiceItemQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _InvoiceItemCollection|InvoiceItem[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _InvoiceItemQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _InvoiceItemQueryBuilder latest(Expression|string $column = null)
	 * @method static _InvoiceItemQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _InvoiceItemQueryBuilder limit(int $value)
	 * @method static InvoiceItem make(array $attributes = [])
	 * @method static InvoiceItem newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _InvoiceItemQueryBuilder offset(int $value)
	 * @method static _InvoiceItemQueryBuilder oldest(Expression|string $column = null)
	 * @method static _InvoiceItemQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _InvoiceItemQueryBuilder orderByDesc(string $column)
	 * @method static _InvoiceItemQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|InvoiceItem[]|_InvoiceItemCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _InvoiceItemQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _InvoiceItemQueryBuilder select(array $columns = [ '*' ])
	 * @method static _InvoiceItemQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|InvoiceItem[]|_InvoiceItemCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _InvoiceItemQueryBuilder skip(int $value)
	 * @method static InvoiceItem sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _InvoiceItemQueryBuilder take(int $value)
	 * @method static _InvoiceItemQueryBuilder tap(callable $callback)
	 * @method static _InvoiceItemQueryBuilder truncate()
	 * @method static _InvoiceItemQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static InvoiceItem updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _InvoiceItemQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _InvoiceItemQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _InvoiceItemQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceItemQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceItemQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _InvoiceItemQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _InvoiceItemQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _InvoiceItemQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _InvoiceItemQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _InvoiceItemQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceItemQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _InvoiceItemQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _InvoiceItemQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceItemQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceItemQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _InvoiceItemQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceItemQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _InvoiceItemQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _InvoiceItemQueryBuilder whereKey($id)
	 * @method static _InvoiceItemQueryBuilder whereKeyNot($id)
	 * @method static _InvoiceItemQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _InvoiceItemQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _InvoiceItemQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _InvoiceItemQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _InvoiceItemQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _InvoiceItemQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _InvoiceItemQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _InvoiceItemQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceItemQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _InvoiceItemQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _InvoiceItemQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _InvoiceItemQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _InvoiceItemQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _InvoiceItemQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _InvoiceItemQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _InvoiceItemQueryBuilder withCasts(array $casts)
	 * @method static _InvoiceItemQueryBuilder withCount($relations)
	 * @method static _InvoiceItemQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _InvoiceItemQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _InvoiceItemQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _InvoiceItemQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _InvoiceItemQueryBuilder without($relations)
	 * @method static _InvoiceItemQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _InvoiceItemQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class InvoiceItem extends Model { }

	/**
	 * @property int         $id
	 * @property string      $name
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _InvoiceStatusQueryBuilder newModelQuery()
	 * @method _InvoiceStatusQueryBuilder newQuery()
	 * @method static _InvoiceStatusQueryBuilder query()
	 * @method static _InvoiceStatusCollection|InvoiceStatus[] all()
	 * @method static _InvoiceStatusQueryBuilder whereId($value)
	 * @method static _InvoiceStatusQueryBuilder whereName($value)
	 * @method static _InvoiceStatusQueryBuilder whereCreatedAt($value)
	 * @method static _InvoiceStatusQueryBuilder whereUpdatedAt($value)
	 * @method static InvoiceStatus baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static InvoiceStatus create(array $attributes = [])
	 * @method static _InvoiceStatusQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _InvoiceStatusCollection|InvoiceStatus[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _InvoiceStatusQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static InvoiceStatus|null find($id, array $columns = [ '*' ])
	 * @method static _InvoiceStatusCollection|InvoiceStatus[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static InvoiceStatus findOrFail($id, array $columns = [ '*' ])
	 * @method static _InvoiceStatusCollection|InvoiceStatus[] findOrNew($id, array $columns = [ '*' ])
	 * @method static InvoiceStatus first(array|string $columns = [ '*' ])
	 * @method static InvoiceStatus firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static InvoiceStatus firstOrCreate(array $attributes = [], array $values = [])
	 * @method static InvoiceStatus firstOrFail(array $columns = [ '*' ])
	 * @method static InvoiceStatus firstOrNew(array $attributes = [], array $values = [])
	 * @method static InvoiceStatus firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static InvoiceStatus forceCreate(array $attributes)
	 * @method static _InvoiceStatusCollection|InvoiceStatus[] fromQuery(string $query, array $bindings = [])
	 * @method static _InvoiceStatusCollection|InvoiceStatus[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static InvoiceStatus getModel()
	 * @method static InvoiceStatus[] getModels(array|string $columns = [ '*' ])
	 * @method static _InvoiceStatusQueryBuilder getQuery()
	 * @method static _InvoiceStatusQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _InvoiceStatusCollection|InvoiceStatus[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _InvoiceStatusQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _InvoiceStatusQueryBuilder latest(Expression|string $column = null)
	 * @method static _InvoiceStatusQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _InvoiceStatusQueryBuilder limit(int $value)
	 * @method static InvoiceStatus make(array $attributes = [])
	 * @method static InvoiceStatus newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _InvoiceStatusQueryBuilder offset(int $value)
	 * @method static _InvoiceStatusQueryBuilder oldest(Expression|string $column = null)
	 * @method static _InvoiceStatusQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _InvoiceStatusQueryBuilder orderByDesc(string $column)
	 * @method static _InvoiceStatusQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|InvoiceStatus[]|_InvoiceStatusCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _InvoiceStatusQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _InvoiceStatusQueryBuilder select(array $columns = [ '*' ])
	 * @method static _InvoiceStatusQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|InvoiceStatus[]|_InvoiceStatusCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _InvoiceStatusQueryBuilder skip(int $value)
	 * @method static InvoiceStatus sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _InvoiceStatusQueryBuilder take(int $value)
	 * @method static _InvoiceStatusQueryBuilder tap(callable $callback)
	 * @method static _InvoiceStatusQueryBuilder truncate()
	 * @method static _InvoiceStatusQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static InvoiceStatus updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _InvoiceStatusQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _InvoiceStatusQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _InvoiceStatusQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceStatusQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceStatusQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _InvoiceStatusQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _InvoiceStatusQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _InvoiceStatusQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _InvoiceStatusQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _InvoiceStatusQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceStatusQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _InvoiceStatusQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _InvoiceStatusQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceStatusQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceStatusQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _InvoiceStatusQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceStatusQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _InvoiceStatusQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _InvoiceStatusQueryBuilder whereKey($id)
	 * @method static _InvoiceStatusQueryBuilder whereKeyNot($id)
	 * @method static _InvoiceStatusQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _InvoiceStatusQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _InvoiceStatusQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _InvoiceStatusQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _InvoiceStatusQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _InvoiceStatusQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _InvoiceStatusQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _InvoiceStatusQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _InvoiceStatusQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _InvoiceStatusQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _InvoiceStatusQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _InvoiceStatusQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _InvoiceStatusQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _InvoiceStatusQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _InvoiceStatusQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _InvoiceStatusQueryBuilder withCasts(array $casts)
	 * @method static _InvoiceStatusQueryBuilder withCount($relations)
	 * @method static _InvoiceStatusQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _InvoiceStatusQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _InvoiceStatusQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _InvoiceStatusQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _InvoiceStatusQueryBuilder without($relations)
	 * @method static _InvoiceStatusQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _InvoiceStatusQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class InvoiceStatus extends Model { }
}

namespace App\Domain\MarketVehicle\Models {

    use Illuminate\Support\Carbon;
    use App\Domain\Party\Models\Party;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\HasMany;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use LaravelIdea\Helper\App\Domain\Party\Models\_PartyCollection;
    use LaravelIdea\Helper\App\Domain\Party\Models\_PartyQueryBuilder;
    use LaravelIdea\Helper\App\Domain\MarketVehicle\Models\_MarketVehicleCollection;
    use LaravelIdea\Helper\App\Domain\MarketVehicle\Models\_MarketVehicleQueryBuilder;

    /**
	 * @property int                      $id
	 * @property string                   $number
	 * @property int                      $party_id
	 * @property int                      $company_id
	 * @property Carbon|null              $created_at
	 * @property Carbon|null              $updated_at
	 * @property _PartyCollection|Party[] $party
	 * @method HasMany|_PartyQueryBuilder party()
	 * @method _MarketVehicleQueryBuilder newModelQuery()
	 * @method _MarketVehicleQueryBuilder newQuery()
	 * @method static _MarketVehicleQueryBuilder query()
	 * @method static _MarketVehicleCollection|MarketVehicle[] all()
	 * @method static _MarketVehicleQueryBuilder whereId($value)
	 * @method static _MarketVehicleQueryBuilder whereNumber($value)
	 * @method static _MarketVehicleQueryBuilder wherePartyId($value)
	 * @method static _MarketVehicleQueryBuilder whereCompanyId($value)
	 * @method static _MarketVehicleQueryBuilder whereCreatedAt($value)
	 * @method static _MarketVehicleQueryBuilder whereUpdatedAt($value)
	 * @method static MarketVehicle baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static MarketVehicle create(array $attributes = [])
	 * @method static _MarketVehicleQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _MarketVehicleCollection|MarketVehicle[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _MarketVehicleQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static MarketVehicle|null find($id, array $columns = [ '*' ])
	 * @method static _MarketVehicleCollection|MarketVehicle[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static MarketVehicle findOrFail($id, array $columns = [ '*' ])
	 * @method static _MarketVehicleCollection|MarketVehicle[] findOrNew($id, array $columns = [ '*' ])
	 * @method static MarketVehicle first(array|string $columns = [ '*' ])
	 * @method static MarketVehicle firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static MarketVehicle firstOrCreate(array $attributes = [], array $values = [])
	 * @method static MarketVehicle firstOrFail(array $columns = [ '*' ])
	 * @method static MarketVehicle firstOrNew(array $attributes = [], array $values = [])
	 * @method static MarketVehicle firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static MarketVehicle forceCreate(array $attributes)
	 * @method static _MarketVehicleCollection|MarketVehicle[] fromQuery(string $query, array $bindings = [])
	 * @method static _MarketVehicleCollection|MarketVehicle[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static MarketVehicle getModel()
	 * @method static MarketVehicle[] getModels(array|string $columns = [ '*' ])
	 * @method static _MarketVehicleQueryBuilder getQuery()
	 * @method static _MarketVehicleQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _MarketVehicleCollection|MarketVehicle[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _MarketVehicleQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _MarketVehicleQueryBuilder latest(Expression|string $column = null)
	 * @method static _MarketVehicleQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _MarketVehicleQueryBuilder limit(int $value)
	 * @method static MarketVehicle make(array $attributes = [])
	 * @method static MarketVehicle newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _MarketVehicleQueryBuilder offset(int $value)
	 * @method static _MarketVehicleQueryBuilder oldest(Expression|string $column = null)
	 * @method static _MarketVehicleQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _MarketVehicleQueryBuilder orderByDesc(string $column)
	 * @method static _MarketVehicleQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|MarketVehicle[]|_MarketVehicleCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _MarketVehicleQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _MarketVehicleQueryBuilder select(array $columns = [ '*' ])
	 * @method static _MarketVehicleQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|MarketVehicle[]|_MarketVehicleCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _MarketVehicleQueryBuilder skip(int $value)
	 * @method static MarketVehicle sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _MarketVehicleQueryBuilder take(int $value)
	 * @method static _MarketVehicleQueryBuilder tap(callable $callback)
	 * @method static _MarketVehicleQueryBuilder truncate()
	 * @method static _MarketVehicleQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static MarketVehicle updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _MarketVehicleQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _MarketVehicleQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _MarketVehicleQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _MarketVehicleQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _MarketVehicleQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _MarketVehicleQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MarketVehicleQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MarketVehicleQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _MarketVehicleQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _MarketVehicleQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _MarketVehicleQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _MarketVehicleQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _MarketVehicleQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _MarketVehicleQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _MarketVehicleQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _MarketVehicleQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _MarketVehicleQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _MarketVehicleQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _MarketVehicleQueryBuilder whereKey($id)
	 * @method static _MarketVehicleQueryBuilder whereKeyNot($id)
	 * @method static _MarketVehicleQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MarketVehicleQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _MarketVehicleQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _MarketVehicleQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _MarketVehicleQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _MarketVehicleQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _MarketVehicleQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _MarketVehicleQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _MarketVehicleQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _MarketVehicleQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _MarketVehicleQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MarketVehicleQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _MarketVehicleQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _MarketVehicleQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _MarketVehicleQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _MarketVehicleQueryBuilder withCasts(array $casts)
	 * @method static _MarketVehicleQueryBuilder withCount($relations)
	 * @method static _MarketVehicleQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _MarketVehicleQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _MarketVehicleQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _MarketVehicleQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _MarketVehicleQueryBuilder without($relations)
	 * @method static _MarketVehicleQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _MarketVehicleQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class MarketVehicle extends Model { }
}

namespace App\Domain\Office\Models {

    use Illuminate\Support\Carbon;
    use Illuminate\Pagination\Paginator;
    use App\Domain\Company\Models\Company;
    use App\Domain\Expense\Models\Expense;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use App\Domain\Employee\Models\Employee;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\HasMany;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Relations\BelongsTo;
    use LaravelIdea\Helper\App\Domain\Office\Models\_OfficeCollection;
    use LaravelIdea\Helper\App\Domain\Expense\Models\_ExpenseCollection;
    use LaravelIdea\Helper\App\Domain\Office\Models\_OfficeQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Company\Models\_CompanyQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Employee\Models\_EmployeeCollection;
    use LaravelIdea\Helper\App\Domain\Expense\Models\_ExpenseQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Employee\Models\_EmployeeQueryBuilder;

    /**
	 * @property int                            $id
	 * @property string                         $name
	 * @property string|null                    $street_address
	 * @property string|null                    $city
	 * @property string|null                    $state
	 * @property string|null                    $zip
	 * @property int                            $company_id
	 * @property Carbon|null                    $created_at
	 * @property Carbon|null                    $updated_at
	 * @property Company                        $company
	 * @method BelongsTo|_CompanyQueryBuilder company()
	 * @property _EmployeeCollection|Employee[] $employees
	 * @method HasMany|_EmployeeQueryBuilder employees()
	 * @property _ExpenseCollection|Expense[]   $expenses
	 * @method HasMany|_ExpenseQueryBuilder expenses()
	 * @method _OfficeQueryBuilder newModelQuery()
	 * @method _OfficeQueryBuilder newQuery()
	 * @method static _OfficeQueryBuilder query()
	 * @method static _OfficeCollection|Office[] all()
	 * @method static _OfficeQueryBuilder whereId($value)
	 * @method static _OfficeQueryBuilder whereName($value)
	 * @method static _OfficeQueryBuilder whereStreetAddress($value)
	 * @method static _OfficeQueryBuilder whereCity($value)
	 * @method static _OfficeQueryBuilder whereState($value)
	 * @method static _OfficeQueryBuilder whereZip($value)
	 * @method static _OfficeQueryBuilder whereCompanyId($value)
	 * @method static _OfficeQueryBuilder whereCreatedAt($value)
	 * @method static _OfficeQueryBuilder whereUpdatedAt($value)
	 * @method static Office baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Office create(array $attributes = [])
	 * @method static _OfficeQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _OfficeCollection|Office[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _OfficeQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Office|null find($id, array $columns = [ '*' ])
	 * @method static _OfficeCollection|Office[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Office findOrFail($id, array $columns = [ '*' ])
	 * @method static _OfficeCollection|Office[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Office first(array|string $columns = [ '*' ])
	 * @method static Office firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Office firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Office firstOrFail(array $columns = [ '*' ])
	 * @method static Office firstOrNew(array $attributes = [], array $values = [])
	 * @method static Office firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Office forceCreate(array $attributes)
	 * @method static _OfficeCollection|Office[] fromQuery(string $query, array $bindings = [])
	 * @method static _OfficeCollection|Office[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Office getModel()
	 * @method static Office[] getModels(array|string $columns = [ '*' ])
	 * @method static _OfficeQueryBuilder getQuery()
	 * @method static _OfficeQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _OfficeCollection|Office[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _OfficeQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _OfficeQueryBuilder latest(Expression|string $column = null)
	 * @method static _OfficeQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _OfficeQueryBuilder limit(int $value)
	 * @method static Office make(array $attributes = [])
	 * @method static Office newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _OfficeQueryBuilder offset(int $value)
	 * @method static _OfficeQueryBuilder oldest(Expression|string $column = null)
	 * @method static _OfficeQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _OfficeQueryBuilder orderByDesc(string $column)
	 * @method static _OfficeQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Office[]|_OfficeCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _OfficeQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _OfficeQueryBuilder select(array $columns = [ '*' ])
	 * @method static _OfficeQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Office[]|_OfficeCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _OfficeQueryBuilder skip(int $value)
	 * @method static Office sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _OfficeQueryBuilder take(int $value)
	 * @method static _OfficeQueryBuilder tap(callable $callback)
	 * @method static _OfficeQueryBuilder truncate()
	 * @method static _OfficeQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Office updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _OfficeQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _OfficeQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _OfficeQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _OfficeQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _OfficeQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _OfficeQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _OfficeQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _OfficeQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _OfficeQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _OfficeQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _OfficeQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _OfficeQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _OfficeQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _OfficeQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _OfficeQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _OfficeQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _OfficeQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _OfficeQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _OfficeQueryBuilder whereKey($id)
	 * @method static _OfficeQueryBuilder whereKeyNot($id)
	 * @method static _OfficeQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _OfficeQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _OfficeQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _OfficeQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _OfficeQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _OfficeQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _OfficeQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _OfficeQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _OfficeQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _OfficeQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _OfficeQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _OfficeQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _OfficeQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _OfficeQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _OfficeQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _OfficeQueryBuilder withCasts(array $casts)
	 * @method static _OfficeQueryBuilder withCount($relations)
	 * @method static _OfficeQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _OfficeQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _OfficeQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _OfficeQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _OfficeQueryBuilder without($relations)
	 * @method static _OfficeQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _OfficeQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Office extends Model { }
}

namespace App\Domain\Party\Models {

    use Illuminate\Support\Carbon;
    use App\Domain\Trip\Models\Trip;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use App\Domain\Payment\Models\BankAccount;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use App\Domain\MarketVehicle\Models\MarketVehicle;
    use Illuminate\Database\Eloquent\Relations\HasMany;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Relations\MorphToMany;
    use LaravelIdea\Helper\App\Domain\Trip\Models\_TripCollection;
    use LaravelIdea\Helper\App\Domain\Party\Models\_PartyCollection;
    use LaravelIdea\Helper\App\Domain\Trip\Models\_TripQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Party\Models\_PartyQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Payment\Models\_BankAccountCollection;
    use LaravelIdea\Helper\App\Domain\Payment\Models\_BankAccountQueryBuilder;
    use LaravelIdea\Helper\App\Domain\MarketVehicle\Models\_MarketVehicleCollection;
    use LaravelIdea\Helper\App\Domain\MarketVehicle\Models\_MarketVehicleQueryBuilder;
    use LaravelIdea\Helper\Spatie\MediaLibrary\MediaCollections\Models\_MediaCollection;
    use LaravelIdea\Helper\Spatie\MediaLibrary\MediaCollections\Models\_MediaQueryBuilder;

    /**
	 * @property int                                      $id
	 * @property string                                   $name
	 * @property string|null                              $pan
	 * @property int                                      $company_id
	 * @property string                                   $razorpay_contact_id
	 * @property Carbon|null                              $created_at
	 * @property Carbon|null                              $updated_at
	 * @property _BankAccountCollection|BankAccount[]     $bankAccounts
	 * @method MorphToMany|_BankAccountQueryBuilder bankAccounts()
	 * @property _MediaCollection|Media[]                 $media
	 * @method MorphToMany|_MediaQueryBuilder media()
	 * @property _TripCollection|Trip[]                   $trips
	 * @method HasMany|_TripQueryBuilder trips()
	 * @property _MarketVehicleCollection|MarketVehicle[] $vehicles
	 * @method HasMany|_MarketVehicleQueryBuilder vehicles()
	 * @method _PartyQueryBuilder newModelQuery()
	 * @method _PartyQueryBuilder newQuery()
	 * @method static _PartyQueryBuilder query()
	 * @method static _PartyCollection|Party[] all()
	 * @method static _PartyQueryBuilder whereId($value)
	 * @method static _PartyQueryBuilder whereName($value)
	 * @method static _PartyQueryBuilder wherePan($value)
	 * @method static _PartyQueryBuilder whereCompanyId($value)
	 * @method static _PartyQueryBuilder whereRazorpayContactId($value)
	 * @method static _PartyQueryBuilder whereCreatedAt($value)
	 * @method static _PartyQueryBuilder whereUpdatedAt($value)
	 * @method static Party baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Party create(array $attributes = [])
	 * @method static _PartyQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PartyCollection|Party[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PartyQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Party|null find($id, array $columns = [ '*' ])
	 * @method static _PartyCollection|Party[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Party findOrFail($id, array $columns = [ '*' ])
	 * @method static _PartyCollection|Party[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Party first(array|string $columns = [ '*' ])
	 * @method static Party firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Party firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Party firstOrFail(array $columns = [ '*' ])
	 * @method static Party firstOrNew(array $attributes = [], array $values = [])
	 * @method static Party firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Party forceCreate(array $attributes)
	 * @method static _PartyCollection|Party[] fromQuery(string $query, array $bindings = [])
	 * @method static _PartyCollection|Party[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Party getModel()
	 * @method static Party[] getModels(array|string $columns = [ '*' ])
	 * @method static _PartyQueryBuilder getQuery()
	 * @method static _PartyQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _PartyCollection|Party[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _PartyQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PartyQueryBuilder latest(Expression|string $column = null)
	 * @method static _PartyQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PartyQueryBuilder limit(int $value)
	 * @method static Party make(array $attributes = [])
	 * @method static Party newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _PartyQueryBuilder offset(int $value)
	 * @method static _PartyQueryBuilder oldest(Expression|string $column = null)
	 * @method static _PartyQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _PartyQueryBuilder orderByDesc(string $column)
	 * @method static _PartyQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Party[]|_PartyCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _PartyQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PartyQueryBuilder select(array $columns = [ '*' ])
	 * @method static _PartyQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Party[]|_PartyCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _PartyQueryBuilder skip(int $value)
	 * @method static Party sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _PartyQueryBuilder take(int $value)
	 * @method static _PartyQueryBuilder tap(callable $callback)
	 * @method static _PartyQueryBuilder truncate()
	 * @method static _PartyQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Party updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _PartyQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PartyQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PartyQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PartyQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PartyQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PartyQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PartyQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PartyQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PartyQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PartyQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PartyQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PartyQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PartyQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PartyQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PartyQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PartyQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PartyQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PartyQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PartyQueryBuilder whereKey($id)
	 * @method static _PartyQueryBuilder whereKeyNot($id)
	 * @method static _PartyQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PartyQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PartyQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PartyQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _PartyQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PartyQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PartyQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PartyQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PartyQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PartyQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PartyQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PartyQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PartyQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _PartyQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _PartyQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _PartyQueryBuilder withCasts(array $casts)
	 * @method static _PartyQueryBuilder withCount($relations)
	 * @method static _PartyQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _PartyQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _PartyQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _PartyQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _PartyQueryBuilder without($relations)
	 * @method static _PartyQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PartyQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Party extends Model { }
}

namespace App\Domain\Payment\Models {

    use Illuminate\Support\Carbon;
    use App\Domain\Trip\Models\Trip;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\HasOne;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Relations\BelongsTo;
    use Illuminate\Database\Eloquent\Relations\MorphToMany;
    use LaravelIdea\Helper\App\Domain\Trip\Models\_TripQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Payment\Models\_PaymentCollection;
    use LaravelIdea\Helper\App\Domain\Payment\Models\_PaymentQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Payment\Models\_BankAccountCollection;
    use LaravelIdea\Helper\App\Domain\Payment\Models\_TaxCategoryCollection;
    use LaravelIdea\Helper\App\Domain\Payment\Models\_BankAccountQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Payment\Models\_PaymentMethodCollection;
    use LaravelIdea\Helper\App\Domain\Payment\Models\_PaymentStatusCollection;
    use LaravelIdea\Helper\App\Domain\Payment\Models\_TaxCategoryQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Payment\Models\_PaymentMethodQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Payment\Models\_PaymentStatusQueryBuilder;
    use LaravelIdea\Helper\Spatie\MediaLibrary\MediaCollections\Models\_MediaCollection;
    use LaravelIdea\Helper\Spatie\MediaLibrary\MediaCollections\Models\_MediaQueryBuilder;

    /**
	 * @property int         $id
	 * @property string|null $account_name
	 * @property string      $account_number
	 * @property string      $ifsc_code
	 * @property int         $bankable_id
	 * @property string      $bankable_type
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @property Model       $bankable
	 * @method MorphTo bankable()
	 * @method _BankAccountQueryBuilder newModelQuery()
	 * @method _BankAccountQueryBuilder newQuery()
	 * @method static _BankAccountQueryBuilder query()
	 * @method static _BankAccountCollection|BankAccount[] all()
	 * @method static _BankAccountQueryBuilder whereId($value)
	 * @method static _BankAccountQueryBuilder whereAccountName($value)
	 * @method static _BankAccountQueryBuilder whereAccountNumber($value)
	 * @method static _BankAccountQueryBuilder whereIfscCode($value)
	 * @method static _BankAccountQueryBuilder whereBankableId($value)
	 * @method static _BankAccountQueryBuilder whereBankableType($value)
	 * @method static _BankAccountQueryBuilder whereCreatedAt($value)
	 * @method static _BankAccountQueryBuilder whereUpdatedAt($value)
	 * @method static BankAccount baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static BankAccount create(array $attributes = [])
	 * @method static _BankAccountQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _BankAccountCollection|BankAccount[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _BankAccountQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static BankAccount|null find($id, array $columns = [ '*' ])
	 * @method static _BankAccountCollection|BankAccount[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static BankAccount findOrFail($id, array $columns = [ '*' ])
	 * @method static _BankAccountCollection|BankAccount[] findOrNew($id, array $columns = [ '*' ])
	 * @method static BankAccount first(array|string $columns = [ '*' ])
	 * @method static BankAccount firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static BankAccount firstOrCreate(array $attributes = [], array $values = [])
	 * @method static BankAccount firstOrFail(array $columns = [ '*' ])
	 * @method static BankAccount firstOrNew(array $attributes = [], array $values = [])
	 * @method static BankAccount firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static BankAccount forceCreate(array $attributes)
	 * @method static _BankAccountCollection|BankAccount[] fromQuery(string $query, array $bindings = [])
	 * @method static _BankAccountCollection|BankAccount[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static BankAccount getModel()
	 * @method static BankAccount[] getModels(array|string $columns = [ '*' ])
	 * @method static _BankAccountQueryBuilder getQuery()
	 * @method static _BankAccountQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _BankAccountCollection|BankAccount[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _BankAccountQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _BankAccountQueryBuilder latest(Expression|string $column = null)
	 * @method static _BankAccountQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _BankAccountQueryBuilder limit(int $value)
	 * @method static BankAccount make(array $attributes = [])
	 * @method static BankAccount newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _BankAccountQueryBuilder offset(int $value)
	 * @method static _BankAccountQueryBuilder oldest(Expression|string $column = null)
	 * @method static _BankAccountQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _BankAccountQueryBuilder orderByDesc(string $column)
	 * @method static _BankAccountQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|BankAccount[]|_BankAccountCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _BankAccountQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _BankAccountQueryBuilder select(array $columns = [ '*' ])
	 * @method static _BankAccountQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|BankAccount[]|_BankAccountCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _BankAccountQueryBuilder skip(int $value)
	 * @method static BankAccount sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _BankAccountQueryBuilder take(int $value)
	 * @method static _BankAccountQueryBuilder tap(callable $callback)
	 * @method static _BankAccountQueryBuilder truncate()
	 * @method static _BankAccountQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static BankAccount updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _BankAccountQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _BankAccountQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _BankAccountQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _BankAccountQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _BankAccountQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _BankAccountQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _BankAccountQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _BankAccountQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _BankAccountQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _BankAccountQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _BankAccountQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _BankAccountQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _BankAccountQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _BankAccountQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _BankAccountQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _BankAccountQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _BankAccountQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _BankAccountQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _BankAccountQueryBuilder whereKey($id)
	 * @method static _BankAccountQueryBuilder whereKeyNot($id)
	 * @method static _BankAccountQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _BankAccountQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _BankAccountQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _BankAccountQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _BankAccountQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _BankAccountQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _BankAccountQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _BankAccountQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _BankAccountQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _BankAccountQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _BankAccountQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _BankAccountQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _BankAccountQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _BankAccountQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _BankAccountQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _BankAccountQueryBuilder withCasts(array $casts)
	 * @method static _BankAccountQueryBuilder withCount($relations)
	 * @method static _BankAccountQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _BankAccountQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _BankAccountQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _BankAccountQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _BankAccountQueryBuilder without($relations)
	 * @method static _BankAccountQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _BankAccountQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class BankAccount extends Model { }

	/**
	 * @property int                      $id
	 * @property float                    $amount
	 * @property int                      $bank_account_id
	 * @property int                      $payment_method_id
	 * @property int                      $payment_status_id
	 * @property int                      $company_id
	 * @property float|null               $fees
	 * @property object|null              $remarks
	 * @property int|null                 $created_by
	 * @property int|null                 $finished_by
	 * @property Carbon|null              $created_at
	 * @property Carbon|null              $updated_at
	 * @property int|null                 $trip_id
	 * @property BankAccount              $bankAccount
	 * @method HasOne|_BankAccountQueryBuilder bankAccount()
	 * @property _MediaCollection|Media[] $media
	 * @method MorphToMany|_MediaQueryBuilder media()
	 * @property PaymentMethod            $method
	 * @method HasOne|_PaymentMethodQueryBuilder method()
	 * @property PaymentStatus            $status
	 * @method HasOne|_PaymentStatusQueryBuilder status()
	 * @property Trip                     $trip
	 * @method BelongsTo|_TripQueryBuilder trip()
	 * @method _PaymentQueryBuilder newModelQuery()
	 * @method _PaymentQueryBuilder newQuery()
	 * @method static _PaymentQueryBuilder query()
	 * @method static _PaymentCollection|Payment[] all()
	 * @method static _PaymentQueryBuilder whereId($value)
	 * @method static _PaymentQueryBuilder whereAmount($value)
	 * @method static _PaymentQueryBuilder whereBankAccountId($value)
	 * @method static _PaymentQueryBuilder wherePaymentMethodId($value)
	 * @method static _PaymentQueryBuilder wherePaymentStatusId($value)
	 * @method static _PaymentQueryBuilder whereCompanyId($value)
	 * @method static _PaymentQueryBuilder whereFees($value)
	 * @method static _PaymentQueryBuilder whereRemarks($value)
	 * @method static _PaymentQueryBuilder whereCreatedBy($value)
	 * @method static _PaymentQueryBuilder whereFinishedBy($value)
	 * @method static _PaymentQueryBuilder whereCreatedAt($value)
	 * @method static _PaymentQueryBuilder whereUpdatedAt($value)
	 * @method static _PaymentQueryBuilder whereTripId($value)
	 * @method static Payment baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Payment create(array $attributes = [])
	 * @method static _PaymentQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PaymentCollection|Payment[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PaymentQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Payment|null find($id, array $columns = [ '*' ])
	 * @method static _PaymentCollection|Payment[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Payment findOrFail($id, array $columns = [ '*' ])
	 * @method static _PaymentCollection|Payment[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Payment first(array|string $columns = [ '*' ])
	 * @method static Payment firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Payment firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Payment firstOrFail(array $columns = [ '*' ])
	 * @method static Payment firstOrNew(array $attributes = [], array $values = [])
	 * @method static Payment firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Payment forceCreate(array $attributes)
	 * @method static _PaymentCollection|Payment[] fromQuery(string $query, array $bindings = [])
	 * @method static _PaymentCollection|Payment[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Payment getModel()
	 * @method static Payment[] getModels(array|string $columns = [ '*' ])
	 * @method static _PaymentQueryBuilder getQuery()
	 * @method static _PaymentQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _PaymentCollection|Payment[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _PaymentQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PaymentQueryBuilder latest(Expression|string $column = null)
	 * @method static _PaymentQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PaymentQueryBuilder limit(int $value)
	 * @method static Payment make(array $attributes = [])
	 * @method static Payment newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _PaymentQueryBuilder offset(int $value)
	 * @method static _PaymentQueryBuilder oldest(Expression|string $column = null)
	 * @method static _PaymentQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _PaymentQueryBuilder orderByDesc(string $column)
	 * @method static _PaymentQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Payment[]|_PaymentCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _PaymentQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PaymentQueryBuilder select(array $columns = [ '*' ])
	 * @method static _PaymentQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Payment[]|_PaymentCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _PaymentQueryBuilder skip(int $value)
	 * @method static Payment sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _PaymentQueryBuilder take(int $value)
	 * @method static _PaymentQueryBuilder tap(callable $callback)
	 * @method static _PaymentQueryBuilder truncate()
	 * @method static _PaymentQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Payment updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _PaymentQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PaymentQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PaymentQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PaymentQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PaymentQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PaymentQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PaymentQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PaymentQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PaymentQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PaymentQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PaymentQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PaymentQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PaymentQueryBuilder whereKey($id)
	 * @method static _PaymentQueryBuilder whereKeyNot($id)
	 * @method static _PaymentQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PaymentQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PaymentQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PaymentQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _PaymentQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PaymentQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PaymentQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PaymentQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PaymentQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PaymentQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PaymentQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PaymentQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _PaymentQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _PaymentQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _PaymentQueryBuilder withCasts(array $casts)
	 * @method static _PaymentQueryBuilder withCount($relations)
	 * @method static _PaymentQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _PaymentQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _PaymentQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _PaymentQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _PaymentQueryBuilder without($relations)
	 * @method static _PaymentQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PaymentQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Payment extends Model { }

	/**
	 * @property int         $id
	 * @property string      $name
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @property Model       $paymentable
	 * @method MorphTo paymentable()
	 * @method _PaymentMethodQueryBuilder newModelQuery()
	 * @method _PaymentMethodQueryBuilder newQuery()
	 * @method static _PaymentMethodQueryBuilder query()
	 * @method static _PaymentMethodCollection|PaymentMethod[] all()
	 * @method static _PaymentMethodQueryBuilder whereId($value)
	 * @method static _PaymentMethodQueryBuilder whereName($value)
	 * @method static _PaymentMethodQueryBuilder whereCreatedAt($value)
	 * @method static _PaymentMethodQueryBuilder whereUpdatedAt($value)
	 * @method static PaymentMethod baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PaymentMethod create(array $attributes = [])
	 * @method static _PaymentMethodQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PaymentMethodCollection|PaymentMethod[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PaymentMethodQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PaymentMethod|null find($id, array $columns = [ '*' ])
	 * @method static _PaymentMethodCollection|PaymentMethod[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static PaymentMethod findOrFail($id, array $columns = [ '*' ])
	 * @method static _PaymentMethodCollection|PaymentMethod[] findOrNew($id, array $columns = [ '*' ])
	 * @method static PaymentMethod first(array|string $columns = [ '*' ])
	 * @method static PaymentMethod firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static PaymentMethod firstOrCreate(array $attributes = [], array $values = [])
	 * @method static PaymentMethod firstOrFail(array $columns = [ '*' ])
	 * @method static PaymentMethod firstOrNew(array $attributes = [], array $values = [])
	 * @method static PaymentMethod firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PaymentMethod forceCreate(array $attributes)
	 * @method static _PaymentMethodCollection|PaymentMethod[] fromQuery(string $query, array $bindings = [])
	 * @method static _PaymentMethodCollection|PaymentMethod[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static PaymentMethod getModel()
	 * @method static PaymentMethod[] getModels(array|string $columns = [ '*' ])
	 * @method static _PaymentMethodQueryBuilder getQuery()
	 * @method static _PaymentMethodQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _PaymentMethodCollection|PaymentMethod[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _PaymentMethodQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PaymentMethodQueryBuilder latest(Expression|string $column = null)
	 * @method static _PaymentMethodQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PaymentMethodQueryBuilder limit(int $value)
	 * @method static PaymentMethod make(array $attributes = [])
	 * @method static PaymentMethod newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _PaymentMethodQueryBuilder offset(int $value)
	 * @method static _PaymentMethodQueryBuilder oldest(Expression|string $column = null)
	 * @method static _PaymentMethodQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _PaymentMethodQueryBuilder orderByDesc(string $column)
	 * @method static _PaymentMethodQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|PaymentMethod[]|_PaymentMethodCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _PaymentMethodQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PaymentMethodQueryBuilder select(array $columns = [ '*' ])
	 * @method static _PaymentMethodQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|PaymentMethod[]|_PaymentMethodCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _PaymentMethodQueryBuilder skip(int $value)
	 * @method static PaymentMethod sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _PaymentMethodQueryBuilder take(int $value)
	 * @method static _PaymentMethodQueryBuilder tap(callable $callback)
	 * @method static _PaymentMethodQueryBuilder truncate()
	 * @method static _PaymentMethodQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PaymentMethod updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _PaymentMethodQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PaymentMethodQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PaymentMethodQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentMethodQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentMethodQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PaymentMethodQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PaymentMethodQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PaymentMethodQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PaymentMethodQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PaymentMethodQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentMethodQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PaymentMethodQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PaymentMethodQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentMethodQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentMethodQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PaymentMethodQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentMethodQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PaymentMethodQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PaymentMethodQueryBuilder whereKey($id)
	 * @method static _PaymentMethodQueryBuilder whereKeyNot($id)
	 * @method static _PaymentMethodQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PaymentMethodQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PaymentMethodQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PaymentMethodQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _PaymentMethodQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PaymentMethodQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PaymentMethodQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PaymentMethodQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentMethodQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PaymentMethodQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PaymentMethodQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PaymentMethodQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PaymentMethodQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _PaymentMethodQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _PaymentMethodQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _PaymentMethodQueryBuilder withCasts(array $casts)
	 * @method static _PaymentMethodQueryBuilder withCount($relations)
	 * @method static _PaymentMethodQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _PaymentMethodQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _PaymentMethodQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _PaymentMethodQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _PaymentMethodQueryBuilder without($relations)
	 * @method static _PaymentMethodQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PaymentMethodQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class PaymentMethod extends Model { }

	/**
	 * @property int         $id
	 * @property string      $name
	 * @property string|null $desc
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _PaymentStatusQueryBuilder newModelQuery()
	 * @method _PaymentStatusQueryBuilder newQuery()
	 * @method static _PaymentStatusQueryBuilder query()
	 * @method static _PaymentStatusCollection|PaymentStatus[] all()
	 * @method static _PaymentStatusQueryBuilder whereId($value)
	 * @method static _PaymentStatusQueryBuilder whereName($value)
	 * @method static _PaymentStatusQueryBuilder whereDesc($value)
	 * @method static _PaymentStatusQueryBuilder whereCreatedAt($value)
	 * @method static _PaymentStatusQueryBuilder whereUpdatedAt($value)
	 * @method static PaymentStatus baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PaymentStatus create(array $attributes = [])
	 * @method static _PaymentStatusQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PaymentStatusCollection|PaymentStatus[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PaymentStatusQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PaymentStatus|null find($id, array $columns = [ '*' ])
	 * @method static _PaymentStatusCollection|PaymentStatus[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static PaymentStatus findOrFail($id, array $columns = [ '*' ])
	 * @method static _PaymentStatusCollection|PaymentStatus[] findOrNew($id, array $columns = [ '*' ])
	 * @method static PaymentStatus first(array|string $columns = [ '*' ])
	 * @method static PaymentStatus firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static PaymentStatus firstOrCreate(array $attributes = [], array $values = [])
	 * @method static PaymentStatus firstOrFail(array $columns = [ '*' ])
	 * @method static PaymentStatus firstOrNew(array $attributes = [], array $values = [])
	 * @method static PaymentStatus firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PaymentStatus forceCreate(array $attributes)
	 * @method static _PaymentStatusCollection|PaymentStatus[] fromQuery(string $query, array $bindings = [])
	 * @method static _PaymentStatusCollection|PaymentStatus[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static PaymentStatus getModel()
	 * @method static PaymentStatus[] getModels(array|string $columns = [ '*' ])
	 * @method static _PaymentStatusQueryBuilder getQuery()
	 * @method static _PaymentStatusQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _PaymentStatusCollection|PaymentStatus[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _PaymentStatusQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PaymentStatusQueryBuilder latest(Expression|string $column = null)
	 * @method static _PaymentStatusQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PaymentStatusQueryBuilder limit(int $value)
	 * @method static PaymentStatus make(array $attributes = [])
	 * @method static PaymentStatus newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _PaymentStatusQueryBuilder offset(int $value)
	 * @method static _PaymentStatusQueryBuilder oldest(Expression|string $column = null)
	 * @method static _PaymentStatusQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _PaymentStatusQueryBuilder orderByDesc(string $column)
	 * @method static _PaymentStatusQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|PaymentStatus[]|_PaymentStatusCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _PaymentStatusQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PaymentStatusQueryBuilder select(array $columns = [ '*' ])
	 * @method static _PaymentStatusQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|PaymentStatus[]|_PaymentStatusCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _PaymentStatusQueryBuilder skip(int $value)
	 * @method static PaymentStatus sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _PaymentStatusQueryBuilder take(int $value)
	 * @method static _PaymentStatusQueryBuilder tap(callable $callback)
	 * @method static _PaymentStatusQueryBuilder truncate()
	 * @method static _PaymentStatusQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PaymentStatus updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _PaymentStatusQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PaymentStatusQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PaymentStatusQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentStatusQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentStatusQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PaymentStatusQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PaymentStatusQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PaymentStatusQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PaymentStatusQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PaymentStatusQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentStatusQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PaymentStatusQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PaymentStatusQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentStatusQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentStatusQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PaymentStatusQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentStatusQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PaymentStatusQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PaymentStatusQueryBuilder whereKey($id)
	 * @method static _PaymentStatusQueryBuilder whereKeyNot($id)
	 * @method static _PaymentStatusQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PaymentStatusQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PaymentStatusQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PaymentStatusQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _PaymentStatusQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PaymentStatusQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PaymentStatusQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PaymentStatusQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PaymentStatusQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PaymentStatusQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PaymentStatusQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PaymentStatusQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PaymentStatusQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _PaymentStatusQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _PaymentStatusQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _PaymentStatusQueryBuilder withCasts(array $casts)
	 * @method static _PaymentStatusQueryBuilder withCount($relations)
	 * @method static _PaymentStatusQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _PaymentStatusQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _PaymentStatusQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _PaymentStatusQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _PaymentStatusQueryBuilder without($relations)
	 * @method static _PaymentStatusQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PaymentStatusQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class PaymentStatus extends Model { }

	/**
	 * @property int         $id
	 * @property string      $section
	 * @property float       $percentage
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _TaxCategoryQueryBuilder newModelQuery()
	 * @method _TaxCategoryQueryBuilder newQuery()
	 * @method static _TaxCategoryQueryBuilder query()
	 * @method static _TaxCategoryCollection|TaxCategory[] all()
	 * @method static _TaxCategoryQueryBuilder whereId($value)
	 * @method static _TaxCategoryQueryBuilder whereSection($value)
	 * @method static _TaxCategoryQueryBuilder wherePercentage($value)
	 * @method static _TaxCategoryQueryBuilder whereCreatedAt($value)
	 * @method static _TaxCategoryQueryBuilder whereUpdatedAt($value)
	 * @method static TaxCategory baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static TaxCategory create(array $attributes = [])
	 * @method static _TaxCategoryQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _TaxCategoryCollection|TaxCategory[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _TaxCategoryQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static TaxCategory|null find($id, array $columns = [ '*' ])
	 * @method static _TaxCategoryCollection|TaxCategory[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static TaxCategory findOrFail($id, array $columns = [ '*' ])
	 * @method static _TaxCategoryCollection|TaxCategory[] findOrNew($id, array $columns = [ '*' ])
	 * @method static TaxCategory first(array|string $columns = [ '*' ])
	 * @method static TaxCategory firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static TaxCategory firstOrCreate(array $attributes = [], array $values = [])
	 * @method static TaxCategory firstOrFail(array $columns = [ '*' ])
	 * @method static TaxCategory firstOrNew(array $attributes = [], array $values = [])
	 * @method static TaxCategory firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static TaxCategory forceCreate(array $attributes)
	 * @method static _TaxCategoryCollection|TaxCategory[] fromQuery(string $query, array $bindings = [])
	 * @method static _TaxCategoryCollection|TaxCategory[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static TaxCategory getModel()
	 * @method static TaxCategory[] getModels(array|string $columns = [ '*' ])
	 * @method static _TaxCategoryQueryBuilder getQuery()
	 * @method static _TaxCategoryQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _TaxCategoryCollection|TaxCategory[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _TaxCategoryQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _TaxCategoryQueryBuilder latest(Expression|string $column = null)
	 * @method static _TaxCategoryQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _TaxCategoryQueryBuilder limit(int $value)
	 * @method static TaxCategory make(array $attributes = [])
	 * @method static TaxCategory newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _TaxCategoryQueryBuilder offset(int $value)
	 * @method static _TaxCategoryQueryBuilder oldest(Expression|string $column = null)
	 * @method static _TaxCategoryQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _TaxCategoryQueryBuilder orderByDesc(string $column)
	 * @method static _TaxCategoryQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|TaxCategory[]|_TaxCategoryCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _TaxCategoryQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _TaxCategoryQueryBuilder select(array $columns = [ '*' ])
	 * @method static _TaxCategoryQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|TaxCategory[]|_TaxCategoryCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _TaxCategoryQueryBuilder skip(int $value)
	 * @method static TaxCategory sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _TaxCategoryQueryBuilder take(int $value)
	 * @method static _TaxCategoryQueryBuilder tap(callable $callback)
	 * @method static _TaxCategoryQueryBuilder truncate()
	 * @method static _TaxCategoryQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static TaxCategory updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _TaxCategoryQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _TaxCategoryQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _TaxCategoryQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _TaxCategoryQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _TaxCategoryQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _TaxCategoryQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TaxCategoryQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TaxCategoryQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _TaxCategoryQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _TaxCategoryQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _TaxCategoryQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _TaxCategoryQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _TaxCategoryQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _TaxCategoryQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _TaxCategoryQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _TaxCategoryQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _TaxCategoryQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _TaxCategoryQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _TaxCategoryQueryBuilder whereKey($id)
	 * @method static _TaxCategoryQueryBuilder whereKeyNot($id)
	 * @method static _TaxCategoryQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TaxCategoryQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _TaxCategoryQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _TaxCategoryQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _TaxCategoryQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _TaxCategoryQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _TaxCategoryQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _TaxCategoryQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _TaxCategoryQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _TaxCategoryQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _TaxCategoryQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TaxCategoryQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _TaxCategoryQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _TaxCategoryQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _TaxCategoryQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _TaxCategoryQueryBuilder withCasts(array $casts)
	 * @method static _TaxCategoryQueryBuilder withCount($relations)
	 * @method static _TaxCategoryQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _TaxCategoryQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _TaxCategoryQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _TaxCategoryQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _TaxCategoryQueryBuilder without($relations)
	 * @method static _TaxCategoryQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _TaxCategoryQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class TaxCategory extends Model { }
}

namespace App\Domain\Project\Models {

    use Illuminate\Support\Carbon;
    use App\Domain\Trip\Models\Trip;
    use App\Domain\General\Models\Mine;
    use Illuminate\Pagination\Paginator;
    use App\Domain\Company\Models\Company;
    use App\Domain\General\Models\Material;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use App\Domain\Consignee\Models\Consignee;
    use Illuminate\Contracts\Support\Arrayable;
    use App\Domain\General\Models\UnloadingPoint;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\HasOne;
    use Illuminate\Database\Eloquent\Relations\HasMany;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Relations\BelongsTo;
    use LaravelIdea\Helper\App\Domain\Trip\Models\_TripCollection;
    use LaravelIdea\Helper\App\Domain\Trip\Models\_TripQueryBuilder;
    use LaravelIdea\Helper\App\Domain\General\Models\_MineQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Project\Models\_ProjectCollection;
    use LaravelIdea\Helper\App\Domain\Company\Models\_CompanyQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Project\Models\_ProjectQueryBuilder;
    use LaravelIdea\Helper\App\Domain\General\Models\_MaterialQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Consignee\Models\_ConsigneeQueryBuilder;
    use LaravelIdea\Helper\App\Domain\General\Models\_UnloadingPointQueryBuilder;

    /**
	 * @property int                    $id
	 * @property string|null            $name
	 * @property int                    $material_id
	 * @property int                    $mine_id
	 * @property int                    $unloading_point_id
	 * @property int                    $consignee_id
	 * @property int                    $company_id
	 * @property bool                   $status
	 * @property Carbon|null            $created_at
	 * @property Carbon|null            $updated_at
	 * @property Company                $company
	 * @method BelongsTo|_CompanyQueryBuilder company()
	 * @property Consignee              $consignee
	 * @method HasOne|_ConsigneeQueryBuilder consignee()
	 * @property UnloadingPoint         $destination
	 * @method HasOne|_UnloadingPointQueryBuilder destination()
	 * @property Material               $material
	 * @method HasOne|_MaterialQueryBuilder material()
	 * @property Mine                   $source
	 * @method HasOne|_MineQueryBuilder source()
	 * @property _TripCollection|Trip[] $trips
	 * @method HasMany|_TripQueryBuilder trips()
	 * @method _ProjectQueryBuilder newModelQuery()
	 * @method _ProjectQueryBuilder newQuery()
	 * @method static _ProjectQueryBuilder query()
	 * @method static _ProjectCollection|Project[] all()
	 * @method static _ProjectQueryBuilder whereId($value)
	 * @method static _ProjectQueryBuilder whereName($value)
	 * @method static _ProjectQueryBuilder whereMaterialId($value)
	 * @method static _ProjectQueryBuilder whereMineId($value)
	 * @method static _ProjectQueryBuilder whereUnloadingPointId($value)
	 * @method static _ProjectQueryBuilder whereConsigneeId($value)
	 * @method static _ProjectQueryBuilder whereCompanyId($value)
	 * @method static _ProjectQueryBuilder whereStatus($value)
	 * @method static _ProjectQueryBuilder whereCreatedAt($value)
	 * @method static _ProjectQueryBuilder whereUpdatedAt($value)
	 * @method static Project baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Project create(array $attributes = [])
	 * @method static _ProjectQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _ProjectCollection|Project[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _ProjectQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Project|null find($id, array $columns = [ '*' ])
	 * @method static _ProjectCollection|Project[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Project findOrFail($id, array $columns = [ '*' ])
	 * @method static _ProjectCollection|Project[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Project first(array|string $columns = [ '*' ])
	 * @method static Project firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Project firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Project firstOrFail(array $columns = [ '*' ])
	 * @method static Project firstOrNew(array $attributes = [], array $values = [])
	 * @method static Project firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Project forceCreate(array $attributes)
	 * @method static _ProjectCollection|Project[] fromQuery(string $query, array $bindings = [])
	 * @method static _ProjectCollection|Project[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Project getModel()
	 * @method static Project[] getModels(array|string $columns = [ '*' ])
	 * @method static _ProjectQueryBuilder getQuery()
	 * @method static _ProjectQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _ProjectCollection|Project[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _ProjectQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _ProjectQueryBuilder latest(Expression|string $column = null)
	 * @method static _ProjectQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _ProjectQueryBuilder limit(int $value)
	 * @method static Project make(array $attributes = [])
	 * @method static Project newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _ProjectQueryBuilder offset(int $value)
	 * @method static _ProjectQueryBuilder oldest(Expression|string $column = null)
	 * @method static _ProjectQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _ProjectQueryBuilder orderByDesc(string $column)
	 * @method static _ProjectQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Project[]|_ProjectCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _ProjectQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _ProjectQueryBuilder select(array $columns = [ '*' ])
	 * @method static _ProjectQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Project[]|_ProjectCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _ProjectQueryBuilder skip(int $value)
	 * @method static Project sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _ProjectQueryBuilder take(int $value)
	 * @method static _ProjectQueryBuilder tap(callable $callback)
	 * @method static _ProjectQueryBuilder truncate()
	 * @method static _ProjectQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Project updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _ProjectQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _ProjectQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _ProjectQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _ProjectQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _ProjectQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _ProjectQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ProjectQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ProjectQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _ProjectQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _ProjectQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _ProjectQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _ProjectQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _ProjectQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _ProjectQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _ProjectQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _ProjectQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _ProjectQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _ProjectQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _ProjectQueryBuilder whereKey($id)
	 * @method static _ProjectQueryBuilder whereKeyNot($id)
	 * @method static _ProjectQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ProjectQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _ProjectQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _ProjectQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _ProjectQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _ProjectQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _ProjectQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _ProjectQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _ProjectQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _ProjectQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _ProjectQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ProjectQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _ProjectQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _ProjectQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _ProjectQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _ProjectQueryBuilder withCasts(array $casts)
	 * @method static _ProjectQueryBuilder withCount($relations)
	 * @method static _ProjectQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _ProjectQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _ProjectQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _ProjectQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _ProjectQueryBuilder without($relations)
	 * @method static _ProjectQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _ProjectQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Project extends Model { }
}

namespace App\Domain\Trip\Models {

    use Illuminate\Support\Carbon;
    use App\Domain\Agent\Models\Agent;
    use App\Domain\Party\Models\Party;
    use Illuminate\Pagination\Paginator;
    use App\Domain\Payment\Models\Payment;
    use App\Domain\Project\Models\Project;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use App\Domain\Document\Models\Document;
    use App\Domain\Fleet\Models\FleetVehicle;
    use Illuminate\Database\Query\Expression;
    use App\Domain\Consignee\Models\Consignee;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use App\Domain\MarketVehicle\Models\MarketVehicle;
    use Illuminate\Database\Eloquent\Relations\HasOne;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Relations\BelongsTo;
    use Illuminate\Database\Eloquent\Relations\MorphToMany;
    use LaravelIdea\Helper\Database\Factories\_TripFactory;
    use LaravelIdea\Helper\App\Domain\Trip\Models\_TripCollection;
    use LaravelIdea\Helper\App\Domain\Trip\Models\_TripQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Agent\Models\_AgentQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Party\Models\_PartyQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Trip\Models\_TripTypeCollection;
    use LaravelIdea\Helper\App\Domain\Trip\Models\_TripTypeQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Document\Models\_DocumentCollection;
    use LaravelIdea\Helper\App\Domain\Payment\Models\_PaymentQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Project\Models\_ProjectQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Document\Models\_DocumentQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Fleet\Models\_FleetVehicleQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Consignee\Models\_ConsigneeQueryBuilder;
    use LaravelIdea\Helper\App\Domain\MarketVehicle\Models\_MarketVehicleQueryBuilder;
    use LaravelIdea\Helper\Spatie\MediaLibrary\MediaCollections\Models\_MediaCollection;
    use LaravelIdea\Helper\Spatie\MediaLibrary\MediaCollections\Models\_MediaQueryBuilder;

    /**
	 * @property int                            $id
	 * @property Carbon                         $date
	 * @property int                            $trip_type
	 * @property int                            $project_id
	 * @property int                            $company_id
	 * @property string|null                    $challan_serial
	 * @property string                         $tp_number
	 * @property int                            $tp_serial
	 * @property float|null                     $gross_weight
	 * @property float|null                     $tare_weight
	 * @property float                          $net_weight
	 * @property float                          $rate
	 * @property float|null                     $hsd
	 * @property float|null                     $cash
	 * @property string|null                    $market_vehicle_number
	 * @property string|null                    $party_name
	 * @property string|null                    $party_number
	 * @property string|null                    $driver_name
	 * @property string|null                    $driver_phone_num
	 * @property string|null                    $driver_license_num
	 * @property float|null                     $premium_rate
	 * @property float|null                     $total_amount
	 * @property float|null                     $cash_adv_pct
	 * @property float|null                     $cash_adv_fees
	 * @property bool|null                      $tds_sbm_bool
	 * @property float|null                     $tds
	 * @property int|null                       $tax_category_id
	 * @property int|null                       $two_pay
	 * @property float|null                     $final_payable
	 * @property int|null                       $payment_id
	 * @property float|null                     $profit
	 * @property int|null                       $market_vehicle_id
	 * @property int|null                       $fleet_vehicle_id
	 * @property int|null                       $fleet_driver_id
	 * @property int|null                       $party_id
	 * @property int|null                       $agent_id
	 * @property bool                           $loading_done
	 * @property bool                           $payment_done
	 * @property bool                           $completed
	 * @property int|null                       $created_by
	 * @property int|null                       $finished_by
	 * @property Carbon|null                    $created_at
	 * @property Carbon|null                    $updated_at
	 * @property Agent                          $agent
	 * @method HasOne|_AgentQueryBuilder agent()
	 * @property Consignee                      $consignee
	 * @method HasOne|_ConsigneeQueryBuilder consignee()
	 * @property _DocumentCollection|Document[] $documents
	 * @method MorphToMany|_DocumentQueryBuilder documents()
	 * @property FleetVehicle                   $fleetVehicle
	 * @method HasOne|_FleetVehicleQueryBuilder fleetVehicle()
	 * @property MarketVehicle                  $marketVehicle
	 * @method HasOne|_MarketVehicleQueryBuilder marketVehicle()
	 * @property _MediaCollection|Media[]       $media
	 * @method MorphToMany|_MediaQueryBuilder media()
	 * @property Party                          $party
	 * @method BelongsTo|_PartyQueryBuilder party()
	 * @property Payment                        $payment
	 * @method HasOne|_PaymentQueryBuilder payment()
	 * @property Project                        $project
	 * @method HasOne|_ProjectQueryBuilder project()
	 * @property TripType                       $trip_type
	 * @method BelongsTo|_TripTypeQueryBuilder trip_type()
	 * @method _TripQueryBuilder newModelQuery()
	 * @method _TripQueryBuilder newQuery()
	 * @method static _TripQueryBuilder query()
	 * @method static _TripCollection|Trip[] all()
	 * @method static _TripQueryBuilder whereId($value)
	 * @method static _TripQueryBuilder whereDate($value)
	 * @method static _TripQueryBuilder whereTripType($value)
	 * @method static _TripQueryBuilder whereProjectId($value)
	 * @method static _TripQueryBuilder whereCompanyId($value)
	 * @method static _TripQueryBuilder whereChallanSerial($value)
	 * @method static _TripQueryBuilder whereTpNumber($value)
	 * @method static _TripQueryBuilder whereTpSerial($value)
	 * @method static _TripQueryBuilder whereGrossWeight($value)
	 * @method static _TripQueryBuilder whereTareWeight($value)
	 * @method static _TripQueryBuilder whereNetWeight($value)
	 * @method static _TripQueryBuilder whereRate($value)
	 * @method static _TripQueryBuilder whereHsd($value)
	 * @method static _TripQueryBuilder whereCash($value)
	 * @method static _TripQueryBuilder whereMarketVehicleNumber($value)
	 * @method static _TripQueryBuilder wherePartyName($value)
	 * @method static _TripQueryBuilder wherePartyNumber($value)
	 * @method static _TripQueryBuilder whereDriverName($value)
	 * @method static _TripQueryBuilder whereDriverPhoneNum($value)
	 * @method static _TripQueryBuilder whereDriverLicenseNum($value)
	 * @method static _TripQueryBuilder wherePremiumRate($value)
	 * @method static _TripQueryBuilder whereTotalAmount($value)
	 * @method static _TripQueryBuilder whereCashAdvPct($value)
	 * @method static _TripQueryBuilder whereCashAdvFees($value)
	 * @method static _TripQueryBuilder whereTdsSbmBool($value)
	 * @method static _TripQueryBuilder whereTds($value)
	 * @method static _TripQueryBuilder whereTaxCategoryId($value)
	 * @method static _TripQueryBuilder whereTwoPay($value)
	 * @method static _TripQueryBuilder whereFinalPayable($value)
	 * @method static _TripQueryBuilder wherePaymentId($value)
	 * @method static _TripQueryBuilder whereProfit($value)
	 * @method static _TripQueryBuilder whereMarketVehicleId($value)
	 * @method static _TripQueryBuilder whereFleetVehicleId($value)
	 * @method static _TripQueryBuilder whereFleetDriverId($value)
	 * @method static _TripQueryBuilder wherePartyId($value)
	 * @method static _TripQueryBuilder whereAgentId($value)
	 * @method static _TripQueryBuilder whereLoadingDone($value)
	 * @method static _TripQueryBuilder wherePaymentDone($value)
	 * @method static _TripQueryBuilder whereCompleted($value)
	 * @method static _TripQueryBuilder whereCreatedBy($value)
	 * @method static _TripQueryBuilder whereFinishedBy($value)
	 * @method static _TripQueryBuilder whereCreatedAt($value)
	 * @method static _TripQueryBuilder whereUpdatedAt($value)
	 * @method static Trip baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Trip create(array $attributes = [])
	 * @method static _TripQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _TripCollection|Trip[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _TripQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Trip|null find($id, array $columns = [ '*' ])
	 * @method static _TripCollection|Trip[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Trip findOrFail($id, array $columns = [ '*' ])
	 * @method static _TripCollection|Trip[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Trip first(array|string $columns = [ '*' ])
	 * @method static Trip firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Trip firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Trip firstOrFail(array $columns = [ '*' ])
	 * @method static Trip firstOrNew(array $attributes = [], array $values = [])
	 * @method static Trip firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Trip forceCreate(array $attributes)
	 * @method static _TripCollection|Trip[] fromQuery(string $query, array $bindings = [])
	 * @method static _TripCollection|Trip[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Trip getModel()
	 * @method static Trip[] getModels(array|string $columns = [ '*' ])
	 * @method static _TripQueryBuilder getQuery()
	 * @method static _TripQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _TripCollection|Trip[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _TripQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _TripQueryBuilder latest(Expression|string $column = null)
	 * @method static _TripQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _TripQueryBuilder limit(int $value)
	 * @method static Trip make(array $attributes = [])
	 * @method static Trip newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _TripQueryBuilder offset(int $value)
	 * @method static _TripQueryBuilder oldest(Expression|string $column = null)
	 * @method static _TripQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _TripQueryBuilder orderByDesc(string $column)
	 * @method static _TripQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Trip[]|_TripCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _TripQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _TripQueryBuilder select(array $columns = [ '*' ])
	 * @method static _TripQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Trip[]|_TripCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _TripQueryBuilder skip(int $value)
	 * @method static Trip sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _TripQueryBuilder take(int $value)
	 * @method static _TripQueryBuilder tap(callable $callback)
	 * @method static _TripQueryBuilder truncate()
	 * @method static _TripQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Trip updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _TripQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _TripQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _TripQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _TripQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _TripQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _TripQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TripQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _TripQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _TripQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _TripQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _TripQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _TripQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _TripQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _TripQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _TripQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _TripQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _TripQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _TripQueryBuilder whereKey($id)
	 * @method static _TripQueryBuilder whereKeyNot($id)
	 * @method static _TripQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TripQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _TripQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _TripQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _TripQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _TripQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _TripQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _TripQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _TripQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _TripQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _TripQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TripQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _TripQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _TripQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _TripQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _TripQueryBuilder withCasts(array $casts)
	 * @method static _TripQueryBuilder withCount($relations)
	 * @method static _TripQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _TripQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _TripQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _TripQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _TripQueryBuilder without($relations)
	 * @method static _TripQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _TripQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _TripFactory factory(...$parameters)
	 */
	class Trip extends Model { }

	/**
	 * @property int         $id
	 * @property string      $name
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _TripTypeQueryBuilder newModelQuery()
	 * @method _TripTypeQueryBuilder newQuery()
	 * @method static _TripTypeQueryBuilder query()
	 * @method static _TripTypeCollection|TripType[] all()
	 * @method static _TripTypeQueryBuilder whereId($value)
	 * @method static _TripTypeQueryBuilder whereName($value)
	 * @method static _TripTypeQueryBuilder whereCreatedAt($value)
	 * @method static _TripTypeQueryBuilder whereUpdatedAt($value)
	 * @method static TripType baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static TripType create(array $attributes = [])
	 * @method static _TripTypeQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _TripTypeCollection|TripType[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _TripTypeQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static TripType|null find($id, array $columns = [ '*' ])
	 * @method static _TripTypeCollection|TripType[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static TripType findOrFail($id, array $columns = [ '*' ])
	 * @method static _TripTypeCollection|TripType[] findOrNew($id, array $columns = [ '*' ])
	 * @method static TripType first(array|string $columns = [ '*' ])
	 * @method static TripType firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static TripType firstOrCreate(array $attributes = [], array $values = [])
	 * @method static TripType firstOrFail(array $columns = [ '*' ])
	 * @method static TripType firstOrNew(array $attributes = [], array $values = [])
	 * @method static TripType firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static TripType forceCreate(array $attributes)
	 * @method static _TripTypeCollection|TripType[] fromQuery(string $query, array $bindings = [])
	 * @method static _TripTypeCollection|TripType[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static TripType getModel()
	 * @method static TripType[] getModels(array|string $columns = [ '*' ])
	 * @method static _TripTypeQueryBuilder getQuery()
	 * @method static _TripTypeQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _TripTypeCollection|TripType[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _TripTypeQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _TripTypeQueryBuilder latest(Expression|string $column = null)
	 * @method static _TripTypeQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _TripTypeQueryBuilder limit(int $value)
	 * @method static TripType make(array $attributes = [])
	 * @method static TripType newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _TripTypeQueryBuilder offset(int $value)
	 * @method static _TripTypeQueryBuilder oldest(Expression|string $column = null)
	 * @method static _TripTypeQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _TripTypeQueryBuilder orderByDesc(string $column)
	 * @method static _TripTypeQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|TripType[]|_TripTypeCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _TripTypeQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _TripTypeQueryBuilder select(array $columns = [ '*' ])
	 * @method static _TripTypeQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|TripType[]|_TripTypeCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _TripTypeQueryBuilder skip(int $value)
	 * @method static TripType sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _TripTypeQueryBuilder take(int $value)
	 * @method static _TripTypeQueryBuilder tap(callable $callback)
	 * @method static _TripTypeQueryBuilder truncate()
	 * @method static _TripTypeQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static TripType updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _TripTypeQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _TripTypeQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _TripTypeQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _TripTypeQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _TripTypeQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _TripTypeQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TripTypeQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TripTypeQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _TripTypeQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _TripTypeQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _TripTypeQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _TripTypeQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _TripTypeQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _TripTypeQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _TripTypeQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _TripTypeQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _TripTypeQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _TripTypeQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _TripTypeQueryBuilder whereKey($id)
	 * @method static _TripTypeQueryBuilder whereKeyNot($id)
	 * @method static _TripTypeQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TripTypeQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _TripTypeQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _TripTypeQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _TripTypeQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _TripTypeQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _TripTypeQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _TripTypeQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _TripTypeQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _TripTypeQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _TripTypeQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TripTypeQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _TripTypeQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _TripTypeQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _TripTypeQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _TripTypeQueryBuilder withCasts(array $casts)
	 * @method static _TripTypeQueryBuilder withCount($relations)
	 * @method static _TripTypeQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _TripTypeQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _TripTypeQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _TripTypeQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _TripTypeQueryBuilder without($relations)
	 * @method static _TripTypeQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _TripTypeQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class TripType extends Model { }
}

namespace App\Domain\VehicleRC\Models {

    use Illuminate\Support\Carbon;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use LaravelIdea\Helper\App\Domain\VehicleRC\Models\_VehicleRCCollection;
    use LaravelIdea\Helper\App\Domain\VehicleRC\Models\_VehicleRCQueryBuilder;

    /**
	 * @property int         $id
	 * @property string      $number
	 * @property string|null $model
	 * @property string|null $class
	 * @property string|null $reg_date
	 * @property string|null $puc_upto
	 * @property string|null $rto_code
	 * @property string|null $fuel_norm
	 * @property string|null $fuel_type
	 * @property string|null $authority
	 * @property string|null $owner_name
	 * @property string|null $mvtax_upto
	 * @property string|null $noc_details
	 * @property string|null $fitness_upto
	 * @property string|null $roadtax_upto
	 * @property string|null $vehicle_type
	 * @property string|null $engine_number
	 * @property string|null $insurance_upto
	 * @property string|null $chassis_number
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _VehicleRCQueryBuilder newModelQuery()
	 * @method _VehicleRCQueryBuilder newQuery()
	 * @method static _VehicleRCQueryBuilder query()
	 * @method static _VehicleRCCollection|VehicleRC[] all()
	 * @method static _VehicleRCQueryBuilder whereId($value)
	 * @method static _VehicleRCQueryBuilder whereNumber($value)
	 * @method static _VehicleRCQueryBuilder whereModel($value)
	 * @method static _VehicleRCQueryBuilder whereClass($value)
	 * @method static _VehicleRCQueryBuilder whereRegDate($value)
	 * @method static _VehicleRCQueryBuilder wherePucUpto($value)
	 * @method static _VehicleRCQueryBuilder whereRtoCode($value)
	 * @method static _VehicleRCQueryBuilder whereFuelNorm($value)
	 * @method static _VehicleRCQueryBuilder whereFuelType($value)
	 * @method static _VehicleRCQueryBuilder whereAuthority($value)
	 * @method static _VehicleRCQueryBuilder whereOwnerName($value)
	 * @method static _VehicleRCQueryBuilder whereMvtaxUpto($value)
	 * @method static _VehicleRCQueryBuilder whereNocDetails($value)
	 * @method static _VehicleRCQueryBuilder whereFitnessUpto($value)
	 * @method static _VehicleRCQueryBuilder whereRoadtaxUpto($value)
	 * @method static _VehicleRCQueryBuilder whereVehicleType($value)
	 * @method static _VehicleRCQueryBuilder whereEngineNumber($value)
	 * @method static _VehicleRCQueryBuilder whereInsuranceUpto($value)
	 * @method static _VehicleRCQueryBuilder whereChassisNumber($value)
	 * @method static _VehicleRCQueryBuilder whereCreatedAt($value)
	 * @method static _VehicleRCQueryBuilder whereUpdatedAt($value)
	 * @method static VehicleRC baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static VehicleRC create(array $attributes = [])
	 * @method static _VehicleRCQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _VehicleRCCollection|VehicleRC[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _VehicleRCQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static VehicleRC|null find($id, array $columns = [ '*' ])
	 * @method static _VehicleRCCollection|VehicleRC[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static VehicleRC findOrFail($id, array $columns = [ '*' ])
	 * @method static _VehicleRCCollection|VehicleRC[] findOrNew($id, array $columns = [ '*' ])
	 * @method static VehicleRC first(array|string $columns = [ '*' ])
	 * @method static VehicleRC firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static VehicleRC firstOrCreate(array $attributes = [], array $values = [])
	 * @method static VehicleRC firstOrFail(array $columns = [ '*' ])
	 * @method static VehicleRC firstOrNew(array $attributes = [], array $values = [])
	 * @method static VehicleRC firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static VehicleRC forceCreate(array $attributes)
	 * @method static _VehicleRCCollection|VehicleRC[] fromQuery(string $query, array $bindings = [])
	 * @method static _VehicleRCCollection|VehicleRC[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static VehicleRC getModel()
	 * @method static VehicleRC[] getModels(array|string $columns = [ '*' ])
	 * @method static _VehicleRCQueryBuilder getQuery()
	 * @method static _VehicleRCQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _VehicleRCCollection|VehicleRC[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _VehicleRCQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _VehicleRCQueryBuilder latest(Expression|string $column = null)
	 * @method static _VehicleRCQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _VehicleRCQueryBuilder limit(int $value)
	 * @method static VehicleRC make(array $attributes = [])
	 * @method static VehicleRC newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _VehicleRCQueryBuilder offset(int $value)
	 * @method static _VehicleRCQueryBuilder oldest(Expression|string $column = null)
	 * @method static _VehicleRCQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _VehicleRCQueryBuilder orderByDesc(string $column)
	 * @method static _VehicleRCQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|VehicleRC[]|_VehicleRCCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _VehicleRCQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _VehicleRCQueryBuilder select(array $columns = [ '*' ])
	 * @method static _VehicleRCQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|VehicleRC[]|_VehicleRCCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _VehicleRCQueryBuilder skip(int $value)
	 * @method static VehicleRC sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _VehicleRCQueryBuilder take(int $value)
	 * @method static _VehicleRCQueryBuilder tap(callable $callback)
	 * @method static _VehicleRCQueryBuilder truncate()
	 * @method static _VehicleRCQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static VehicleRC updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _VehicleRCQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _VehicleRCQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _VehicleRCQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _VehicleRCQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _VehicleRCQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _VehicleRCQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _VehicleRCQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _VehicleRCQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _VehicleRCQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _VehicleRCQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _VehicleRCQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _VehicleRCQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _VehicleRCQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _VehicleRCQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _VehicleRCQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _VehicleRCQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _VehicleRCQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _VehicleRCQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _VehicleRCQueryBuilder whereKey($id)
	 * @method static _VehicleRCQueryBuilder whereKeyNot($id)
	 * @method static _VehicleRCQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _VehicleRCQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _VehicleRCQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _VehicleRCQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _VehicleRCQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _VehicleRCQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _VehicleRCQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _VehicleRCQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _VehicleRCQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _VehicleRCQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _VehicleRCQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _VehicleRCQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _VehicleRCQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _VehicleRCQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _VehicleRCQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _VehicleRCQueryBuilder withCasts(array $casts)
	 * @method static _VehicleRCQueryBuilder withCount($relations)
	 * @method static _VehicleRCQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _VehicleRCQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _VehicleRCQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _VehicleRCQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _VehicleRCQueryBuilder without($relations)
	 * @method static _VehicleRCQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _VehicleRCQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class VehicleRC extends Model { }
}

namespace App\Models {

    use Illuminate\Support\Carbon;
    use Illuminate\Pagination\Paginator;
    use App\Domain\Company\Models\Company;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\HasOne;
    use LaravelIdea\Helper\App\Models\_RoleCollection;
    use LaravelIdea\Helper\App\Models\_TeamCollection;
    use LaravelIdea\Helper\App\Models\_UserCollection;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use LaravelIdea\Helper\App\Models\_RoleQueryBuilder;
    use LaravelIdea\Helper\App\Models\_TeamQueryBuilder;
    use LaravelIdea\Helper\App\Models\_UserQueryBuilder;
    use Illuminate\Database\Eloquent\Relations\MorphToMany;
    use LaravelIdea\Helper\Database\Factories\_UserFactory;
    use LaravelIdea\Helper\App\Models\_MembershipCollection;
    use LaravelIdea\Helper\App\Models\_PermissionCollection;
    use Illuminate\Database\Eloquent\Relations\BelongsToMany;
    use LaravelIdea\Helper\App\Models\_MembershipQueryBuilder;
    use LaravelIdea\Helper\App\Models\_PermissionQueryBuilder;
    use LaravelIdea\Helper\App\Domain\Company\Models\_CompanyQueryBuilder;
    use LaravelIdea\Helper\Illuminate\Notifications\_DatabaseNotificationCollection;
    use LaravelIdea\Helper\Illuminate\Notifications\_DatabaseNotificationQueryBuilder;

    /**
	 * @method _MembershipQueryBuilder newModelQuery()
	 * @method _MembershipQueryBuilder newQuery()
	 * @method static _MembershipQueryBuilder query()
	 * @method static _MembershipCollection|Membership[] all()
	 * @method static Membership baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Membership create(array $attributes = [])
	 * @method static _MembershipQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _MembershipCollection|Membership[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _MembershipQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Membership|null find($id, array $columns = [ '*' ])
	 * @method static _MembershipCollection|Membership[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Membership findOrFail($id, array $columns = [ '*' ])
	 * @method static _MembershipCollection|Membership[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Membership first(array|string $columns = [ '*' ])
	 * @method static Membership firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Membership firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Membership firstOrFail(array $columns = [ '*' ])
	 * @method static Membership firstOrNew(array $attributes = [], array $values = [])
	 * @method static Membership firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Membership forceCreate(array $attributes)
	 * @method static _MembershipCollection|Membership[] fromQuery(string $query, array $bindings = [])
	 * @method static _MembershipCollection|Membership[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Membership getModel()
	 * @method static Membership[] getModels(array|string $columns = [ '*' ])
	 * @method static _MembershipQueryBuilder getQuery()
	 * @method static _MembershipQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _MembershipCollection|Membership[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _MembershipQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _MembershipQueryBuilder latest(Expression|string $column = null)
	 * @method static _MembershipQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _MembershipQueryBuilder limit(int $value)
	 * @method static Membership make(array $attributes = [])
	 * @method static Membership newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _MembershipQueryBuilder offset(int $value)
	 * @method static _MembershipQueryBuilder oldest(Expression|string $column = null)
	 * @method static _MembershipQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _MembershipQueryBuilder orderByDesc(string $column)
	 * @method static _MembershipQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Membership[]|_MembershipCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _MembershipQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _MembershipQueryBuilder select(array $columns = [ '*' ])
	 * @method static _MembershipQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Membership[]|_MembershipCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _MembershipQueryBuilder skip(int $value)
	 * @method static Membership sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _MembershipQueryBuilder take(int $value)
	 * @method static _MembershipQueryBuilder tap(callable $callback)
	 * @method static _MembershipQueryBuilder truncate()
	 * @method static _MembershipQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Membership updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _MembershipQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _MembershipQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _MembershipQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _MembershipQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _MembershipQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _MembershipQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MembershipQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MembershipQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _MembershipQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _MembershipQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _MembershipQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _MembershipQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _MembershipQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _MembershipQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _MembershipQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _MembershipQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _MembershipQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _MembershipQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _MembershipQueryBuilder whereKey($id)
	 * @method static _MembershipQueryBuilder whereKeyNot($id)
	 * @method static _MembershipQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MembershipQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _MembershipQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _MembershipQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _MembershipQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _MembershipQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _MembershipQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _MembershipQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _MembershipQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _MembershipQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _MembershipQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MembershipQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _MembershipQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _MembershipQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _MembershipQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _MembershipQueryBuilder withCasts(array $casts)
	 * @method static _MembershipQueryBuilder withCount($relations)
	 * @method static _MembershipQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _MembershipQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _MembershipQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _MembershipQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _MembershipQueryBuilder without($relations)
	 * @method static _MembershipQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _MembershipQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Membership extends Model { }

	/**
	 * @property int                    $id
	 * @property string                 $name
	 * @property string|null            $display_name
	 * @property string|null            $description
	 * @property Carbon|null            $created_at
	 * @property Carbon|null            $updated_at
	 * @property _RoleCollection|Role[] $roles
	 * @method BelongsToMany|_RoleQueryBuilder roles()
	 * @method _PermissionQueryBuilder newModelQuery()
	 * @method _PermissionQueryBuilder newQuery()
	 * @method static _PermissionQueryBuilder query()
	 * @method static _PermissionCollection|Permission[] all()
	 * @method static _PermissionQueryBuilder whereId($value)
	 * @method static _PermissionQueryBuilder whereName($value)
	 * @method static _PermissionQueryBuilder whereDisplayName($value)
	 * @method static _PermissionQueryBuilder whereDescription($value)
	 * @method static _PermissionQueryBuilder whereCreatedAt($value)
	 * @method static _PermissionQueryBuilder whereUpdatedAt($value)
	 * @method static Permission baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Permission create(array $attributes = [])
	 * @method static _PermissionQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PermissionCollection|Permission[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PermissionQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Permission|null find($id, array $columns = [ '*' ])
	 * @method static _PermissionCollection|Permission[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Permission findOrFail($id, array $columns = [ '*' ])
	 * @method static _PermissionCollection|Permission[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Permission first(array|string $columns = [ '*' ])
	 * @method static Permission firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Permission firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Permission firstOrFail(array $columns = [ '*' ])
	 * @method static Permission firstOrNew(array $attributes = [], array $values = [])
	 * @method static Permission firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Permission forceCreate(array $attributes)
	 * @method static _PermissionCollection|Permission[] fromQuery(string $query, array $bindings = [])
	 * @method static _PermissionCollection|Permission[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Permission getModel()
	 * @method static Permission[] getModels(array|string $columns = [ '*' ])
	 * @method static _PermissionQueryBuilder getQuery()
	 * @method static _PermissionQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _PermissionCollection|Permission[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _PermissionQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PermissionQueryBuilder latest(Expression|string $column = null)
	 * @method static _PermissionQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PermissionQueryBuilder limit(int $value)
	 * @method static Permission make(array $attributes = [])
	 * @method static Permission newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _PermissionQueryBuilder offset(int $value)
	 * @method static _PermissionQueryBuilder oldest(Expression|string $column = null)
	 * @method static _PermissionQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _PermissionQueryBuilder orderByDesc(string $column)
	 * @method static _PermissionQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Permission[]|_PermissionCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _PermissionQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PermissionQueryBuilder select(array $columns = [ '*' ])
	 * @method static _PermissionQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Permission[]|_PermissionCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _PermissionQueryBuilder skip(int $value)
	 * @method static Permission sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _PermissionQueryBuilder take(int $value)
	 * @method static _PermissionQueryBuilder tap(callable $callback)
	 * @method static _PermissionQueryBuilder truncate()
	 * @method static _PermissionQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Permission updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _PermissionQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PermissionQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PermissionQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PermissionQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PermissionQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PermissionQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PermissionQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PermissionQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PermissionQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PermissionQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PermissionQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PermissionQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PermissionQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PermissionQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PermissionQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PermissionQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PermissionQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PermissionQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PermissionQueryBuilder whereKey($id)
	 * @method static _PermissionQueryBuilder whereKeyNot($id)
	 * @method static _PermissionQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PermissionQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PermissionQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PermissionQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _PermissionQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PermissionQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PermissionQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PermissionQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PermissionQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PermissionQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PermissionQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PermissionQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PermissionQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _PermissionQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _PermissionQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _PermissionQueryBuilder withCasts(array $casts)
	 * @method static _PermissionQueryBuilder withCount($relations)
	 * @method static _PermissionQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _PermissionQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _PermissionQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _PermissionQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _PermissionQueryBuilder without($relations)
	 * @method static _PermissionQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PermissionQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Permission extends Model { }

	/**
	 * @property int                                $id
	 * @property string                             $name
	 * @property string|null                        $display_name
	 * @property string|null                        $description
	 * @property Carbon|null                        $created_at
	 * @property Carbon|null                        $updated_at
	 * @property _PermissionCollection|Permission[] $permissions
	 * @method BelongsToMany|_PermissionQueryBuilder permissions()
	 * @method _RoleQueryBuilder newModelQuery()
	 * @method _RoleQueryBuilder newQuery()
	 * @method static _RoleQueryBuilder query()
	 * @method static _RoleCollection|Role[] all()
	 * @method static _RoleQueryBuilder whereId($value)
	 * @method static _RoleQueryBuilder whereName($value)
	 * @method static _RoleQueryBuilder whereDisplayName($value)
	 * @method static _RoleQueryBuilder whereDescription($value)
	 * @method static _RoleQueryBuilder whereCreatedAt($value)
	 * @method static _RoleQueryBuilder whereUpdatedAt($value)
	 * @method static Role baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Role create(array $attributes = [])
	 * @method static _RoleQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _RoleCollection|Role[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _RoleQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Role|null find($id, array $columns = [ '*' ])
	 * @method static _RoleCollection|Role[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Role findOrFail($id, array $columns = [ '*' ])
	 * @method static _RoleCollection|Role[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Role first(array|string $columns = [ '*' ])
	 * @method static Role firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Role firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Role firstOrFail(array $columns = [ '*' ])
	 * @method static Role firstOrNew(array $attributes = [], array $values = [])
	 * @method static Role firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Role forceCreate(array $attributes)
	 * @method static _RoleCollection|Role[] fromQuery(string $query, array $bindings = [])
	 * @method static _RoleCollection|Role[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Role getModel()
	 * @method static Role[] getModels(array|string $columns = [ '*' ])
	 * @method static _RoleQueryBuilder getQuery()
	 * @method static _RoleQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _RoleCollection|Role[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _RoleQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _RoleQueryBuilder latest(Expression|string $column = null)
	 * @method static _RoleQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _RoleQueryBuilder limit(int $value)
	 * @method static Role make(array $attributes = [])
	 * @method static Role newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _RoleQueryBuilder offset(int $value)
	 * @method static _RoleQueryBuilder oldest(Expression|string $column = null)
	 * @method static _RoleQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _RoleQueryBuilder orderByDesc(string $column)
	 * @method static _RoleQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Role[]|_RoleCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _RoleQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _RoleQueryBuilder select(array $columns = [ '*' ])
	 * @method static _RoleQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Role[]|_RoleCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _RoleQueryBuilder skip(int $value)
	 * @method static Role sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _RoleQueryBuilder take(int $value)
	 * @method static _RoleQueryBuilder tap(callable $callback)
	 * @method static _RoleQueryBuilder truncate()
	 * @method static _RoleQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Role updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _RoleQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _RoleQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _RoleQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _RoleQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _RoleQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _RoleQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _RoleQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _RoleQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _RoleQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _RoleQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _RoleQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _RoleQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _RoleQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _RoleQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _RoleQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _RoleQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _RoleQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _RoleQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _RoleQueryBuilder whereKey($id)
	 * @method static _RoleQueryBuilder whereKeyNot($id)
	 * @method static _RoleQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _RoleQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _RoleQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _RoleQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _RoleQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _RoleQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _RoleQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _RoleQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _RoleQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _RoleQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _RoleQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _RoleQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _RoleQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _RoleQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _RoleQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _RoleQueryBuilder withCasts(array $casts)
	 * @method static _RoleQueryBuilder withCount($relations)
	 * @method static _RoleQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _RoleQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _RoleQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _RoleQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _RoleQueryBuilder without($relations)
	 * @method static _RoleQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _RoleQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Role extends Model { }

	/**
	 * @property int         $id
	 * @property string      $name
	 * @property string|null $display_name
	 * @property string|null $description
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @method _TeamQueryBuilder newModelQuery()
	 * @method _TeamQueryBuilder newQuery()
	 * @method static _TeamQueryBuilder query()
	 * @method static _TeamCollection|Team[] all()
	 * @method static _TeamQueryBuilder whereId($value)
	 * @method static _TeamQueryBuilder whereName($value)
	 * @method static _TeamQueryBuilder whereDisplayName($value)
	 * @method static _TeamQueryBuilder whereDescription($value)
	 * @method static _TeamQueryBuilder whereCreatedAt($value)
	 * @method static _TeamQueryBuilder whereUpdatedAt($value)
	 * @method static Team baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Team create(array $attributes = [])
	 * @method static _TeamQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _TeamCollection|Team[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _TeamQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Team|null find($id, array $columns = [ '*' ])
	 * @method static _TeamCollection|Team[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Team findOrFail($id, array $columns = [ '*' ])
	 * @method static _TeamCollection|Team[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Team first(array|string $columns = [ '*' ])
	 * @method static Team firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Team firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Team firstOrFail(array $columns = [ '*' ])
	 * @method static Team firstOrNew(array $attributes = [], array $values = [])
	 * @method static Team firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Team forceCreate(array $attributes)
	 * @method static _TeamCollection|Team[] fromQuery(string $query, array $bindings = [])
	 * @method static _TeamCollection|Team[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Team getModel()
	 * @method static Team[] getModels(array|string $columns = [ '*' ])
	 * @method static _TeamQueryBuilder getQuery()
	 * @method static _TeamQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _TeamCollection|Team[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _TeamQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _TeamQueryBuilder latest(Expression|string $column = null)
	 * @method static _TeamQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _TeamQueryBuilder limit(int $value)
	 * @method static Team make(array $attributes = [])
	 * @method static Team newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _TeamQueryBuilder offset(int $value)
	 * @method static _TeamQueryBuilder oldest(Expression|string $column = null)
	 * @method static _TeamQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _TeamQueryBuilder orderByDesc(string $column)
	 * @method static _TeamQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Team[]|_TeamCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _TeamQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _TeamQueryBuilder select(array $columns = [ '*' ])
	 * @method static _TeamQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Team[]|_TeamCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _TeamQueryBuilder skip(int $value)
	 * @method static Team sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _TeamQueryBuilder take(int $value)
	 * @method static _TeamQueryBuilder tap(callable $callback)
	 * @method static _TeamQueryBuilder truncate()
	 * @method static _TeamQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Team updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _TeamQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _TeamQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _TeamQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _TeamQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _TeamQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _TeamQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TeamQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TeamQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _TeamQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _TeamQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _TeamQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _TeamQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _TeamQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _TeamQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _TeamQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _TeamQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _TeamQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _TeamQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _TeamQueryBuilder whereKey($id)
	 * @method static _TeamQueryBuilder whereKeyNot($id)
	 * @method static _TeamQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TeamQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _TeamQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _TeamQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _TeamQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _TeamQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _TeamQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _TeamQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _TeamQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _TeamQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _TeamQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TeamQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _TeamQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _TeamQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _TeamQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _TeamQueryBuilder withCasts(array $casts)
	 * @method static _TeamQueryBuilder withCount($relations)
	 * @method static _TeamQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _TeamQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _TeamQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _TeamQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _TeamQueryBuilder without($relations)
	 * @method static _TeamQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _TeamQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Team extends Model { }

	/**
	 * @property int                                                    $id
	 * @property string                                                 $name
	 * @property int|null                                               $phone_number
	 * @property string                                                 $password
	 * @property string|null                                            $email
	 * @property Carbon|null                                            $email_verified_at
	 * @property string|null                                            $profile_photo_path
	 * @property string|null                                            $remember_token
	 * @property Carbon|null                                            $created_at
	 * @property Carbon|null                                            $updated_at
	 * @property string|null                                            $two_factor_secret
	 * @property string|null                                            $two_factor_recovery_codes
	 * @property int|null                                               $company_id
	 * @property-read string                                            $profile_photo_url
	 * @property Company                                                $company
	 * @method HasOne|_CompanyQueryBuilder company()
	 * @property _DatabaseNotificationCollection|DatabaseNotification[] $notifications
	 * @method MorphToMany|_DatabaseNotificationQueryBuilder notifications()
	 * @property _PermissionCollection|Permission[]                     $permissions
	 * @method MorphToMany|_PermissionQueryBuilder permissions()
	 * @property _RoleCollection|Role[]                                 $roles
	 * @method MorphToMany|_RoleQueryBuilder roles()
	 * @method _UserQueryBuilder newModelQuery()
	 * @method _UserQueryBuilder newQuery()
	 * @method static _UserQueryBuilder query()
	 * @method static _UserCollection|User[] all()
	 * @method static _UserQueryBuilder whereId($value)
	 * @method static _UserQueryBuilder whereName($value)
	 * @method static _UserQueryBuilder wherePhoneNumber($value)
	 * @method static _UserQueryBuilder wherePassword($value)
	 * @method static _UserQueryBuilder whereEmail($value)
	 * @method static _UserQueryBuilder whereEmailVerifiedAt($value)
	 * @method static _UserQueryBuilder whereProfilePhotoPath($value)
	 * @method static _UserQueryBuilder whereRememberToken($value)
	 * @method static _UserQueryBuilder whereCreatedAt($value)
	 * @method static _UserQueryBuilder whereUpdatedAt($value)
	 * @method static _UserQueryBuilder whereTwoFactorSecret($value)
	 * @method static _UserQueryBuilder whereTwoFactorRecoveryCodes($value)
	 * @method static _UserQueryBuilder whereCompanyId($value)
	 * @method static User baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static User create(array $attributes = [])
	 * @method static _UserQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _UserCollection|User[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _UserQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static User|null find($id, array $columns = [ '*' ])
	 * @method static _UserCollection|User[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static User findOrFail($id, array $columns = [ '*' ])
	 * @method static _UserCollection|User[] findOrNew($id, array $columns = [ '*' ])
	 * @method static User first(array|string $columns = [ '*' ])
	 * @method static User firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static User firstOrCreate(array $attributes = [], array $values = [])
	 * @method static User firstOrFail(array $columns = [ '*' ])
	 * @method static User firstOrNew(array $attributes = [], array $values = [])
	 * @method static User firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static User forceCreate(array $attributes)
	 * @method static _UserCollection|User[] fromQuery(string $query, array $bindings = [])
	 * @method static _UserCollection|User[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static User getModel()
	 * @method static User[] getModels(array|string $columns = [ '*' ])
	 * @method static _UserQueryBuilder getQuery()
	 * @method static _UserQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _UserCollection|User[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _UserQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _UserQueryBuilder latest(Expression|string $column = null)
	 * @method static _UserQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _UserQueryBuilder limit(int $value)
	 * @method static User make(array $attributes = [])
	 * @method static User newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _UserQueryBuilder offset(int $value)
	 * @method static _UserQueryBuilder oldest(Expression|string $column = null)
	 * @method static _UserQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _UserQueryBuilder orderByDesc(string $column)
	 * @method static _UserQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|User[]|_UserCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _UserQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _UserQueryBuilder select(array $columns = [ '*' ])
	 * @method static _UserQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|User[]|_UserCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _UserQueryBuilder skip(int $value)
	 * @method static User sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _UserQueryBuilder take(int $value)
	 * @method static _UserQueryBuilder tap(callable $callback)
	 * @method static _UserQueryBuilder truncate()
	 * @method static _UserQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static User updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _UserQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _UserQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _UserQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _UserQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _UserQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _UserQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _UserQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _UserQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _UserQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _UserQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _UserQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _UserQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _UserQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereKey($id)
	 * @method static _UserQueryBuilder whereKeyNot($id)
	 * @method static _UserQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _UserQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _UserQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _UserQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _UserQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _UserQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _UserQueryBuilder withCasts(array $casts)
	 * @method static _UserQueryBuilder withCount($relations)
	 * @method static _UserQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _UserQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _UserQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _UserQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _UserQueryBuilder without($relations)
	 * @method static _UserQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _UserQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _UserQueryBuilder orWherePermissionIs(string $permission = '')
	 * @method static _UserQueryBuilder orWhereRoleIs(string $role = '', $team = null)
	 * @method static _UserQueryBuilder whereDoesntHavePermission()
	 * @method static _UserQueryBuilder whereDoesntHaveRole()
	 * @method static _UserQueryBuilder wherePermissionIs(string $permission = '', $boolean = 'and')
	 * @method static _UserQueryBuilder whereRoleIs(string $role = '', $team = null, string $boolean = 'and')
	 * @method static _UserFactory factory(...$parameters)
	 */
	class User extends Model { }
}

namespace Illuminate\Notifications {

    use Illuminate\Pagination\Paginator;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use LaravelIdea\Helper\Illuminate\Notifications\_DatabaseNotificationCollection;
    use LaravelIdea\Helper\Illuminate\Notifications\_DatabaseNotificationQueryBuilder;

    /**
	 * @property Model $notifiable
	 * @method MorphTo notifiable()
	 * @method _DatabaseNotificationQueryBuilder newModelQuery()
	 * @method _DatabaseNotificationQueryBuilder newQuery()
	 * @method static _DatabaseNotificationQueryBuilder query()
	 * @method static _DatabaseNotificationCollection|DatabaseNotification[] all()
	 * @method static DatabaseNotification baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static DatabaseNotification create(array $attributes = [])
	 * @method static _DatabaseNotificationQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _DatabaseNotificationCollection|DatabaseNotification[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _DatabaseNotificationQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static DatabaseNotification|null find($id, array $columns = [ '*' ])
	 * @method static _DatabaseNotificationCollection|DatabaseNotification[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static DatabaseNotification findOrFail($id, array $columns = [ '*' ])
	 * @method static _DatabaseNotificationCollection|DatabaseNotification[] findOrNew($id, array $columns = [ '*' ])
	 * @method static DatabaseNotification first(array|string $columns = [ '*' ])
	 * @method static DatabaseNotification firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static DatabaseNotification firstOrCreate(array $attributes = [], array $values = [])
	 * @method static DatabaseNotification firstOrFail(array $columns = [ '*' ])
	 * @method static DatabaseNotification firstOrNew(array $attributes = [], array $values = [])
	 * @method static DatabaseNotification firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static DatabaseNotification forceCreate(array $attributes)
	 * @method static _DatabaseNotificationCollection|DatabaseNotification[] fromQuery(string $query, array $bindings = [])
	 * @method static _DatabaseNotificationCollection|DatabaseNotification[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static DatabaseNotification getModel()
	 * @method static DatabaseNotification[] getModels(array|string $columns = [ '*' ])
	 * @method static _DatabaseNotificationQueryBuilder getQuery()
	 * @method static _DatabaseNotificationQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _DatabaseNotificationCollection|DatabaseNotification[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _DatabaseNotificationQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _DatabaseNotificationQueryBuilder latest(Expression|string $column = null)
	 * @method static _DatabaseNotificationQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _DatabaseNotificationQueryBuilder limit(int $value)
	 * @method static DatabaseNotification make(array $attributes = [])
	 * @method static DatabaseNotification newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _DatabaseNotificationQueryBuilder offset(int $value)
	 * @method static _DatabaseNotificationQueryBuilder oldest(Expression|string $column = null)
	 * @method static _DatabaseNotificationQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _DatabaseNotificationQueryBuilder orderByDesc(string $column)
	 * @method static _DatabaseNotificationQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|DatabaseNotification[]|_DatabaseNotificationCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _DatabaseNotificationQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _DatabaseNotificationQueryBuilder select(array $columns = [ '*' ])
	 * @method static _DatabaseNotificationQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|DatabaseNotification[]|_DatabaseNotificationCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _DatabaseNotificationQueryBuilder skip(int $value)
	 * @method static DatabaseNotification sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _DatabaseNotificationQueryBuilder take(int $value)
	 * @method static _DatabaseNotificationQueryBuilder tap(callable $callback)
	 * @method static _DatabaseNotificationQueryBuilder truncate()
	 * @method static _DatabaseNotificationQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static DatabaseNotification updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _DatabaseNotificationQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _DatabaseNotificationQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _DatabaseNotificationQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _DatabaseNotificationQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _DatabaseNotificationQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _DatabaseNotificationQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _DatabaseNotificationQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _DatabaseNotificationQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _DatabaseNotificationQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _DatabaseNotificationQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _DatabaseNotificationQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _DatabaseNotificationQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereKey($id)
	 * @method static _DatabaseNotificationQueryBuilder whereKeyNot($id)
	 * @method static _DatabaseNotificationQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _DatabaseNotificationQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _DatabaseNotificationQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _DatabaseNotificationQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _DatabaseNotificationQueryBuilder withCasts(array $casts)
	 * @method static _DatabaseNotificationQueryBuilder withCount($relations)
	 * @method static _DatabaseNotificationQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _DatabaseNotificationQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _DatabaseNotificationQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _DatabaseNotificationQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _DatabaseNotificationQueryBuilder without($relations)
	 * @method static _DatabaseNotificationQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _DatabaseNotificationQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _DatabaseNotificationQueryBuilder read()
	 * @method static _DatabaseNotificationQueryBuilder unread()
	 */
	class DatabaseNotification extends Model { }
}

namespace Laratrust\Models {

    use App\Models\Role;
    use App\Models\Permission;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use LaravelIdea\Helper\App\Models\_RoleCollection;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use LaravelIdea\Helper\App\Models\_RoleQueryBuilder;
    use LaravelIdea\Helper\App\Models\_PermissionCollection;
    use Illuminate\Database\Eloquent\Relations\BelongsToMany;
    use LaravelIdea\Helper\App\Models\_PermissionQueryBuilder;
    use LaravelIdea\Helper\Laratrust\Models\_LaratrustRoleCollection;
    use LaravelIdea\Helper\Laratrust\Models\_LaratrustTeamCollection;
    use LaravelIdea\Helper\Laratrust\Models\_LaratrustRoleQueryBuilder;
    use LaravelIdea\Helper\Laratrust\Models\_LaratrustTeamQueryBuilder;
    use LaravelIdea\Helper\Laratrust\Models\_LaratrustPermissionCollection;
    use LaravelIdea\Helper\Laratrust\Models\_LaratrustPermissionQueryBuilder;

    /**
	 * @property _RoleCollection|Role[] $roles
	 * @method BelongsToMany|_RoleQueryBuilder roles()
	 * @method _LaratrustPermissionQueryBuilder newModelQuery()
	 * @method _LaratrustPermissionQueryBuilder newQuery()
	 * @method static _LaratrustPermissionQueryBuilder query()
	 * @method static _LaratrustPermissionCollection|LaratrustPermission[] all()
	 * @method static LaratrustPermission baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static LaratrustPermission create(array $attributes = [])
	 * @method static _LaratrustPermissionQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _LaratrustPermissionCollection|LaratrustPermission[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _LaratrustPermissionQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static LaratrustPermission|null find($id, array $columns = [ '*' ])
	 * @method static _LaratrustPermissionCollection|LaratrustPermission[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static LaratrustPermission findOrFail($id, array $columns = [ '*' ])
	 * @method static _LaratrustPermissionCollection|LaratrustPermission[] findOrNew($id, array $columns = [ '*' ])
	 * @method static LaratrustPermission first(array|string $columns = [ '*' ])
	 * @method static LaratrustPermission firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static LaratrustPermission firstOrCreate(array $attributes = [], array $values = [])
	 * @method static LaratrustPermission firstOrFail(array $columns = [ '*' ])
	 * @method static LaratrustPermission firstOrNew(array $attributes = [], array $values = [])
	 * @method static LaratrustPermission firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static LaratrustPermission forceCreate(array $attributes)
	 * @method static _LaratrustPermissionCollection|LaratrustPermission[] fromQuery(string $query, array $bindings = [])
	 * @method static _LaratrustPermissionCollection|LaratrustPermission[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static LaratrustPermission getModel()
	 * @method static LaratrustPermission[] getModels(array|string $columns = [ '*' ])
	 * @method static _LaratrustPermissionQueryBuilder getQuery()
	 * @method static _LaratrustPermissionQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _LaratrustPermissionCollection|LaratrustPermission[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _LaratrustPermissionQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _LaratrustPermissionQueryBuilder latest(Expression|string $column = null)
	 * @method static _LaratrustPermissionQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _LaratrustPermissionQueryBuilder limit(int $value)
	 * @method static LaratrustPermission make(array $attributes = [])
	 * @method static LaratrustPermission newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _LaratrustPermissionQueryBuilder offset(int $value)
	 * @method static _LaratrustPermissionQueryBuilder oldest(Expression|string $column = null)
	 * @method static _LaratrustPermissionQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _LaratrustPermissionQueryBuilder orderByDesc(string $column)
	 * @method static _LaratrustPermissionQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|LaratrustPermission[]|_LaratrustPermissionCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _LaratrustPermissionQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _LaratrustPermissionQueryBuilder select(array $columns = [ '*' ])
	 * @method static _LaratrustPermissionQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|LaratrustPermission[]|_LaratrustPermissionCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _LaratrustPermissionQueryBuilder skip(int $value)
	 * @method static LaratrustPermission sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _LaratrustPermissionQueryBuilder take(int $value)
	 * @method static _LaratrustPermissionQueryBuilder tap(callable $callback)
	 * @method static _LaratrustPermissionQueryBuilder truncate()
	 * @method static _LaratrustPermissionQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static LaratrustPermission updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _LaratrustPermissionQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _LaratrustPermissionQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _LaratrustPermissionQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustPermissionQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustPermissionQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _LaratrustPermissionQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _LaratrustPermissionQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _LaratrustPermissionQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _LaratrustPermissionQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _LaratrustPermissionQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustPermissionQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _LaratrustPermissionQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _LaratrustPermissionQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustPermissionQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustPermissionQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _LaratrustPermissionQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustPermissionQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _LaratrustPermissionQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _LaratrustPermissionQueryBuilder whereKey($id)
	 * @method static _LaratrustPermissionQueryBuilder whereKeyNot($id)
	 * @method static _LaratrustPermissionQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _LaratrustPermissionQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _LaratrustPermissionQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _LaratrustPermissionQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _LaratrustPermissionQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _LaratrustPermissionQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _LaratrustPermissionQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _LaratrustPermissionQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustPermissionQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _LaratrustPermissionQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _LaratrustPermissionQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _LaratrustPermissionQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _LaratrustPermissionQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _LaratrustPermissionQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _LaratrustPermissionQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _LaratrustPermissionQueryBuilder withCasts(array $casts)
	 * @method static _LaratrustPermissionQueryBuilder withCount($relations)
	 * @method static _LaratrustPermissionQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _LaratrustPermissionQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _LaratrustPermissionQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _LaratrustPermissionQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _LaratrustPermissionQueryBuilder without($relations)
	 * @method static _LaratrustPermissionQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _LaratrustPermissionQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class LaratrustPermission extends Model { }

	/**
	 * @property _PermissionCollection|Permission[] $permissions
	 * @method BelongsToMany|_PermissionQueryBuilder permissions()
	 * @method _LaratrustRoleQueryBuilder newModelQuery()
	 * @method _LaratrustRoleQueryBuilder newQuery()
	 * @method static _LaratrustRoleQueryBuilder query()
	 * @method static _LaratrustRoleCollection|LaratrustRole[] all()
	 * @method static LaratrustRole baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static LaratrustRole create(array $attributes = [])
	 * @method static _LaratrustRoleQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _LaratrustRoleCollection|LaratrustRole[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _LaratrustRoleQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static LaratrustRole|null find($id, array $columns = [ '*' ])
	 * @method static _LaratrustRoleCollection|LaratrustRole[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static LaratrustRole findOrFail($id, array $columns = [ '*' ])
	 * @method static _LaratrustRoleCollection|LaratrustRole[] findOrNew($id, array $columns = [ '*' ])
	 * @method static LaratrustRole first(array|string $columns = [ '*' ])
	 * @method static LaratrustRole firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static LaratrustRole firstOrCreate(array $attributes = [], array $values = [])
	 * @method static LaratrustRole firstOrFail(array $columns = [ '*' ])
	 * @method static LaratrustRole firstOrNew(array $attributes = [], array $values = [])
	 * @method static LaratrustRole firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static LaratrustRole forceCreate(array $attributes)
	 * @method static _LaratrustRoleCollection|LaratrustRole[] fromQuery(string $query, array $bindings = [])
	 * @method static _LaratrustRoleCollection|LaratrustRole[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static LaratrustRole getModel()
	 * @method static LaratrustRole[] getModels(array|string $columns = [ '*' ])
	 * @method static _LaratrustRoleQueryBuilder getQuery()
	 * @method static _LaratrustRoleQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _LaratrustRoleCollection|LaratrustRole[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _LaratrustRoleQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _LaratrustRoleQueryBuilder latest(Expression|string $column = null)
	 * @method static _LaratrustRoleQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _LaratrustRoleQueryBuilder limit(int $value)
	 * @method static LaratrustRole make(array $attributes = [])
	 * @method static LaratrustRole newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _LaratrustRoleQueryBuilder offset(int $value)
	 * @method static _LaratrustRoleQueryBuilder oldest(Expression|string $column = null)
	 * @method static _LaratrustRoleQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _LaratrustRoleQueryBuilder orderByDesc(string $column)
	 * @method static _LaratrustRoleQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|LaratrustRole[]|_LaratrustRoleCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _LaratrustRoleQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _LaratrustRoleQueryBuilder select(array $columns = [ '*' ])
	 * @method static _LaratrustRoleQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|LaratrustRole[]|_LaratrustRoleCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _LaratrustRoleQueryBuilder skip(int $value)
	 * @method static LaratrustRole sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _LaratrustRoleQueryBuilder take(int $value)
	 * @method static _LaratrustRoleQueryBuilder tap(callable $callback)
	 * @method static _LaratrustRoleQueryBuilder truncate()
	 * @method static _LaratrustRoleQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static LaratrustRole updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _LaratrustRoleQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _LaratrustRoleQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _LaratrustRoleQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustRoleQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustRoleQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _LaratrustRoleQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _LaratrustRoleQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _LaratrustRoleQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _LaratrustRoleQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _LaratrustRoleQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustRoleQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _LaratrustRoleQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _LaratrustRoleQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustRoleQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustRoleQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _LaratrustRoleQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustRoleQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _LaratrustRoleQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _LaratrustRoleQueryBuilder whereKey($id)
	 * @method static _LaratrustRoleQueryBuilder whereKeyNot($id)
	 * @method static _LaratrustRoleQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _LaratrustRoleQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _LaratrustRoleQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _LaratrustRoleQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _LaratrustRoleQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _LaratrustRoleQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _LaratrustRoleQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _LaratrustRoleQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustRoleQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _LaratrustRoleQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _LaratrustRoleQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _LaratrustRoleQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _LaratrustRoleQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _LaratrustRoleQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _LaratrustRoleQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _LaratrustRoleQueryBuilder withCasts(array $casts)
	 * @method static _LaratrustRoleQueryBuilder withCount($relations)
	 * @method static _LaratrustRoleQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _LaratrustRoleQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _LaratrustRoleQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _LaratrustRoleQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _LaratrustRoleQueryBuilder without($relations)
	 * @method static _LaratrustRoleQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _LaratrustRoleQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class LaratrustRole extends Model { }

	/**
	 * @method _LaratrustTeamQueryBuilder newModelQuery()
	 * @method _LaratrustTeamQueryBuilder newQuery()
	 * @method static _LaratrustTeamQueryBuilder query()
	 * @method static _LaratrustTeamCollection|LaratrustTeam[] all()
	 * @method static LaratrustTeam baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static LaratrustTeam create(array $attributes = [])
	 * @method static _LaratrustTeamQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _LaratrustTeamCollection|LaratrustTeam[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _LaratrustTeamQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static LaratrustTeam|null find($id, array $columns = [ '*' ])
	 * @method static _LaratrustTeamCollection|LaratrustTeam[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static LaratrustTeam findOrFail($id, array $columns = [ '*' ])
	 * @method static _LaratrustTeamCollection|LaratrustTeam[] findOrNew($id, array $columns = [ '*' ])
	 * @method static LaratrustTeam first(array|string $columns = [ '*' ])
	 * @method static LaratrustTeam firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static LaratrustTeam firstOrCreate(array $attributes = [], array $values = [])
	 * @method static LaratrustTeam firstOrFail(array $columns = [ '*' ])
	 * @method static LaratrustTeam firstOrNew(array $attributes = [], array $values = [])
	 * @method static LaratrustTeam firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static LaratrustTeam forceCreate(array $attributes)
	 * @method static _LaratrustTeamCollection|LaratrustTeam[] fromQuery(string $query, array $bindings = [])
	 * @method static _LaratrustTeamCollection|LaratrustTeam[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static LaratrustTeam getModel()
	 * @method static LaratrustTeam[] getModels(array|string $columns = [ '*' ])
	 * @method static _LaratrustTeamQueryBuilder getQuery()
	 * @method static _LaratrustTeamQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _LaratrustTeamCollection|LaratrustTeam[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _LaratrustTeamQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _LaratrustTeamQueryBuilder latest(Expression|string $column = null)
	 * @method static _LaratrustTeamQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _LaratrustTeamQueryBuilder limit(int $value)
	 * @method static LaratrustTeam make(array $attributes = [])
	 * @method static LaratrustTeam newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _LaratrustTeamQueryBuilder offset(int $value)
	 * @method static _LaratrustTeamQueryBuilder oldest(Expression|string $column = null)
	 * @method static _LaratrustTeamQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _LaratrustTeamQueryBuilder orderByDesc(string $column)
	 * @method static _LaratrustTeamQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|LaratrustTeam[]|_LaratrustTeamCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _LaratrustTeamQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _LaratrustTeamQueryBuilder select(array $columns = [ '*' ])
	 * @method static _LaratrustTeamQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|LaratrustTeam[]|_LaratrustTeamCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _LaratrustTeamQueryBuilder skip(int $value)
	 * @method static LaratrustTeam sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _LaratrustTeamQueryBuilder take(int $value)
	 * @method static _LaratrustTeamQueryBuilder tap(callable $callback)
	 * @method static _LaratrustTeamQueryBuilder truncate()
	 * @method static _LaratrustTeamQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static LaratrustTeam updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _LaratrustTeamQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _LaratrustTeamQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _LaratrustTeamQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustTeamQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustTeamQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _LaratrustTeamQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _LaratrustTeamQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _LaratrustTeamQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _LaratrustTeamQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _LaratrustTeamQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustTeamQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _LaratrustTeamQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _LaratrustTeamQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustTeamQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustTeamQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _LaratrustTeamQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustTeamQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _LaratrustTeamQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _LaratrustTeamQueryBuilder whereKey($id)
	 * @method static _LaratrustTeamQueryBuilder whereKeyNot($id)
	 * @method static _LaratrustTeamQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _LaratrustTeamQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _LaratrustTeamQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _LaratrustTeamQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _LaratrustTeamQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _LaratrustTeamQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _LaratrustTeamQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _LaratrustTeamQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _LaratrustTeamQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _LaratrustTeamQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _LaratrustTeamQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _LaratrustTeamQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _LaratrustTeamQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _LaratrustTeamQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _LaratrustTeamQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _LaratrustTeamQueryBuilder withCasts(array $casts)
	 * @method static _LaratrustTeamQueryBuilder withCount($relations)
	 * @method static _LaratrustTeamQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _LaratrustTeamQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _LaratrustTeamQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _LaratrustTeamQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _LaratrustTeamQueryBuilder without($relations)
	 * @method static _LaratrustTeamQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _LaratrustTeamQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class LaratrustTeam extends Model { }
}

namespace LaravelIdea\Helper {

    use Illuminate\Support\Collection;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Database\Eloquent\Builder;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Database\ConnectionInterface;

    /**
	 * @see \Illuminate\Database\Query\Builder::whereIn
	 * @method $this whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @see \Illuminate\Database\Query\Builder::orWhereNotIn
	 * @method $this orWhereNotIn(string $column, $values)
	 * @see \Illuminate\Database\Query\Builder::selectRaw
	 * @method $this selectRaw(string $expression, array $bindings = [])
	 * @see \Illuminate\Database\Query\Builder::insertOrIgnore
	 * @method int insertOrIgnore(array $values)
	 * @see \Illuminate\Database\Query\Builder::unionAll
	 * @method $this unionAll(\Illuminate\Database\Query\Builder $query)
	 * @see \Illuminate\Database\Query\Builder::orWhereNull
	 * @method $this orWhereNull(string $column)
	 * @see \Illuminate\Database\Query\Builder::joinWhere
	 * @method $this joinWhere(string $table, string $first, string $operator, string $second, string $type = 'inner')
	 * @see \Illuminate\Database\Query\Builder::orWhereJsonContains
	 * @method $this orWhereJsonContains(string $column, $value)
	 * @see \Illuminate\Database\Query\Builder::orderBy
	 * @method $this orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @see \Illuminate\Database\Query\Builder::raw
	 * @method Expression raw($value)
	 * @see \Illuminate\Database\Concerns\BuildsQueries::each
	 * @method $this each(callable $callback, int $count = 1000)
	 * @see \Illuminate\Database\Query\Builder::setBindings
	 * @method $this setBindings(array $bindings, string $type = 'where')
	 * @see \Illuminate\Database\Query\Builder::orWhereJsonLength
	 * @method $this orWhereJsonLength(string $column, $operator, $value = null)
	 * @see \Illuminate\Database\Query\Builder::whereRowValues
	 * @method $this whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::orWhereNotExists
	 * @method $this orWhereNotExists(\Closure $callback)
	 * @see \Illuminate\Database\Query\Builder::orWhereIntegerInRaw
	 * @method $this orWhereIntegerInRaw(string $column, array|Arrayable $values)
	 * @see \Illuminate\Database\Query\Builder::newQuery
	 * @method $this newQuery()
	 * @see \Illuminate\Database\Query\Builder::rightJoinSub
	 * @method $this rightJoinSub(Builder|\Illuminate\Database\Query\Builder|string $query, string $as, string $first, null|string $operator = null, null|string $second = null)
	 * @see \Illuminate\Database\Query\Builder::crossJoin
	 * @method $this crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @see \Illuminate\Database\Query\Builder::average
	 * @method mixed average(string $column)
	 * @see \Illuminate\Database\Query\Builder::existsOr
	 * @method $this existsOr(\Closure $callback)
	 * @see \Illuminate\Database\Query\Builder::sum
	 * @method int sum(string $column)
	 * @see \Illuminate\Database\Query\Builder::havingRaw
	 * @method $this havingRaw(string $sql, array $bindings = [], string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::getRawBindings
	 * @method $this getRawBindings()
	 * @see \Illuminate\Database\Query\Builder::orWhereColumn
	 * @method $this orWhereColumn(array|string $first, null|string $operator = null, null|string $second = null)
	 * @see \Illuminate\Database\Query\Builder::min
	 * @method mixed min(string $column)
	 * @see \Illuminate\Support\Traits\Macroable::hasMacro
	 * @method $this hasMacro(string $name)
	 * @see \Illuminate\Database\Concerns\BuildsQueries::unless
	 * @method $this unless($value, callable $callback, callable|null $default = null)
	 * @see \Illuminate\Database\Query\Builder::whereNotIn
	 * @method $this whereNotIn(string $column, $values, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::whereTime
	 * @method $this whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::where
	 * @method $this where(array|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::latest
	 * @method $this latest(string $column = 'created_at')
	 * @see \Illuminate\Database\Query\Builder::insertUsing
	 * @method int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @see \Illuminate\Database\Query\Builder::rightJoinWhere
	 * @method $this rightJoinWhere(string $table, string $first, string $operator, string $second)
	 * @see \Illuminate\Database\Query\Builder::union
	 * @method $this union(\Illuminate\Database\Query\Builder $query, bool $all = false)
	 * @see \Illuminate\Database\Query\Builder::groupBy
	 * @method $this groupBy(...$groups)
	 * @see \Illuminate\Database\Query\Builder::orWhereDay
	 * @method $this orWhereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null)
	 * @see \Illuminate\Database\Query\Builder::joinSub
	 * @method $this joinSub(Builder|\Illuminate\Database\Query\Builder|string $query, string $as, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @see \Illuminate\Database\Query\Builder::oldest
	 * @method $this oldest(string $column = 'created_at')
	 * @see \Illuminate\Database\Query\Builder::pluck
	 * @method $this pluck(string $column, null|string $key = null)
	 * @see \Illuminate\Database\Query\Builder::selectSub
	 * @method $this selectSub(\Illuminate\Database\Query\Builder|string $query, string $as)
	 * @see \Illuminate\Database\Query\Builder::dd
	 * @method void dd()
	 * @see \Illuminate\Database\Query\Builder::whereNull
	 * @method $this whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @see \Illuminate\Database\Query\Builder::prepareValueAndOperator
	 * @method $this prepareValueAndOperator(string $value, string $operator, bool $useDefault = false)
	 * @see \Illuminate\Database\Query\Builder::whereIntegerNotInRaw
	 * @method $this whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::orWhereRaw
	 * @method $this orWhereRaw(string $sql, $bindings = [])
	 * @see \Illuminate\Database\Query\Builder::whereJsonContains
	 * @method $this whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @see \Illuminate\Database\Query\Builder::orWhereBetweenColumns
	 * @method $this orWhereBetweenColumns(string $column, array $values)
	 * @see \Illuminate\Database\Query\Builder::mergeWheres
	 * @method $this mergeWheres(array $wheres, array $bindings)
	 * @see \Illuminate\Database\Query\Builder::sharedLock
	 * @method $this sharedLock()
	 * @see \Illuminate\Database\Query\Builder::orderByRaw
	 * @method $this orderByRaw(string $sql, array $bindings = [])
	 * @see \Illuminate\Database\Query\Builder::simplePaginate
	 * @method $this simplePaginate(int $perPage = 15, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @see \Illuminate\Database\Query\Builder::doesntExist
	 * @method bool doesntExist()
	 * @see \Illuminate\Database\Query\Builder::orWhereMonth
	 * @method $this orWhereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null)
	 * @see \Illuminate\Database\Query\Builder::whereNotNull
	 * @method $this whereNotNull(array|string $columns, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::count
	 * @method int count(string $columns = '*')
	 * @see \Illuminate\Database\Query\Builder::orWhereNotBetween
	 * @method $this orWhereNotBetween(string $column, array $values)
	 * @see \Illuminate\Database\Query\Builder::fromRaw
	 * @method $this fromRaw(string $expression, $bindings = [])
	 * @see \Illuminate\Support\Traits\Macroable::mixin
	 * @method $this mixin(object $mixin, bool $replace = true)
	 * @see \Illuminate\Database\Query\Builder::take
	 * @method $this take(int $value)
	 * @see \Illuminate\Database\Query\Builder::orWhereNotBetweenColumns
	 * @method $this orWhereNotBetweenColumns(string $column, array $values)
	 * @see \Illuminate\Database\Query\Builder::updateOrInsert
	 * @method $this updateOrInsert(array $attributes, array $values = [])
	 * @see \Illuminate\Database\Query\Builder::cursor
	 * @method $this cursor()
	 * @see \Illuminate\Database\Query\Builder::cloneWithout
	 * @method $this cloneWithout(array $properties)
	 * @see \Illuminate\Database\Query\Builder::whereBetweenColumns
	 * @method $this whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @see \Illuminate\Database\Query\Builder::fromSub
	 * @method $this fromSub(\Illuminate\Database\Query\Builder|string $query, string $as)
	 * @see \Illuminate\Database\Query\Builder::update
	 * @method $this update(array $values)
	 * @see \Illuminate\Database\Query\Builder::cleanBindings
	 * @method $this cleanBindings(array $bindings)
	 * @see \Illuminate\Database\Query\Builder::orWhereDate
	 * @method $this orWhereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null)
	 * @see \Illuminate\Database\Query\Builder::avg
	 * @method mixed avg(string $column)
	 * @see \Illuminate\Database\Query\Builder::addBinding
	 * @method $this addBinding($value, string $type = 'where')
	 * @see \Illuminate\Database\Query\Builder::getGrammar
	 * @method $this getGrammar()
	 * @see \Illuminate\Database\Query\Builder::lockForUpdate
	 * @method $this lockForUpdate()
	 * @see \Illuminate\Database\Concerns\BuildsQueries::eachById
	 * @method $this eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @see \Illuminate\Database\Query\Builder::cloneWithoutBindings
	 * @method $this cloneWithoutBindings(array $except)
	 * @see \Illuminate\Database\Concerns\BuildsQueries::sole
	 * @method $this sole(array|string $columns = [ '*' ])
	 * @see \Illuminate\Database\Query\Builder::orHavingRaw
	 * @method $this orHavingRaw(string $sql, array $bindings = [])
	 * @see \Illuminate\Database\Query\Builder::forPageBeforeId
	 * @method $this forPageBeforeId(int $perPage = 15, int|null $lastId = 0, string $column = 'id')
	 * @see \Illuminate\Database\Query\Builder::clone
	 * @method $this clone ()
	 * @see \Illuminate\Database\Query\Builder::orWhereBetween
	 * @method $this orWhereBetween(string $column, array $values)
	 * @see \Illuminate\Database\Concerns\ExplainsQueries::explain
	 * @method $this explain()
	 * @see \Illuminate\Database\Query\Builder::select
	 * @method $this select(array $columns = [ '*' ])
	 * @see \Illuminate\Database\Query\Builder::paginate
	 * @method $this paginate(int $perPage = 15, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @see \Illuminate\Database\Query\Builder::addSelect
	 * @method $this addSelect(array $column)
	 * @see \Illuminate\Database\Concerns\BuildsQueries::when
	 * @method $this when($value, callable $callback, callable|null $default = null)
	 * @see \Illuminate\Database\Query\Builder::whereJsonLength
	 * @method $this whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::orWhereExists
	 * @method $this orWhereExists(\Closure $callback, bool $not = false)
	 * @see \Illuminate\Database\Query\Builder::truncate
	 * @method $this truncate()
	 * @see \Illuminate\Database\Query\Builder::lock
	 * @method $this lock(bool|string $value = true)
	 * @see \Illuminate\Database\Query\Builder::join
	 * @method $this join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @see \Illuminate\Database\Query\Builder::whereMonth
	 * @method $this whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::having
	 * @method $this having(string $column, null|string $operator = null, null|string $value = null, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::whereNested
	 * @method $this whereNested(\Closure $callback, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::upsert
	 * @method $this upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @see \Illuminate\Database\Query\Builder::orWhereRowValues
	 * @method $this orWhereRowValues(array $columns, string $operator, array $values)
	 * @see \Illuminate\Database\Query\Builder::useWritePdo
	 * @method $this useWritePdo()
	 * @see \Illuminate\Database\Query\Builder::orWhereIn
	 * @method $this orWhereIn(string $column, $values)
	 * @see \Illuminate\Database\Query\Builder::orderByDesc
	 * @method $this orderByDesc(string $column)
	 * @see \Illuminate\Database\Query\Builder::orWhereNotNull
	 * @method $this orWhereNotNull(string $column)
	 * @see \Illuminate\Database\Query\Builder::getProcessor
	 * @method $this getProcessor()
	 * @see \Illuminate\Database\Query\Builder::increment
	 * @method $this increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Query\Builder::skip
	 * @method $this skip(int $value)
	 * @see \Illuminate\Database\Query\Builder::leftJoinWhere
	 * @method $this leftJoinWhere(string $table, string $first, string $operator, string $second)
	 * @see \Illuminate\Database\Query\Builder::doesntExistOr
	 * @method $this doesntExistOr(\Closure $callback)
	 * @see \Illuminate\Database\Query\Builder::whereNotExists
	 * @method $this whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::whereIntegerInRaw
	 * @method $this whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @see \Illuminate\Database\Query\Builder::whereDay
	 * @method $this whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::get
	 * @method $this get(array|string $columns = [ '*' ])
	 * @see \Illuminate\Database\Query\Builder::forNestedWhere
	 * @method $this forNestedWhere()
	 * @see \Illuminate\Database\Query\Builder::max
	 * @method mixed max(string $column)
	 * @see \Illuminate\Database\Query\Builder::whereExists
	 * @method $this whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @see \Illuminate\Database\Query\Builder::inRandomOrder
	 * @method $this inRandomOrder(string $seed = '')
	 * @see \Illuminate\Database\Query\Builder::havingBetween
	 * @method $this havingBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @see \Illuminate\Database\Query\Builder::orWhereYear
	 * @method $this orWhereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null)
	 * @see \Illuminate\Database\Concerns\BuildsQueries::chunkById
	 * @method $this chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @see \Illuminate\Database\Query\Builder::whereDate
	 * @method $this whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::whereJsonDoesntContain
	 * @method $this whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::decrement
	 * @method $this decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Query\Builder::forPageAfterId
	 * @method $this forPageAfterId(int $perPage = 15, int|null $lastId = 0, string $column = 'id')
	 * @see \Illuminate\Database\Query\Builder::forPage
	 * @method $this forPage(int $page, int $perPage = 15)
	 * @see \Illuminate\Database\Query\Builder::exists
	 * @method bool exists()
	 * @see \Illuminate\Support\Traits\Macroable::macroCall
	 * @method $this macroCall(string $method, array $parameters)
	 * @see \Illuminate\Database\Concerns\BuildsQueries::first
	 * @method $this first(array|string $columns = [ '*' ])
	 * @see \Illuminate\Database\Query\Builder::whereColumn
	 * @method $this whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::numericAggregate
	 * @method $this numericAggregate(string $function, array $columns = [ '*' ])
	 * @see \Illuminate\Database\Query\Builder::whereNotBetween
	 * @method $this whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::getConnection
	 * @method ConnectionInterface getConnection()
	 * @see \Illuminate\Database\Query\Builder::mergeBindings
	 * @method $this mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @see \Illuminate\Database\Query\Builder::orWhereJsonDoesntContain
	 * @method $this orWhereJsonDoesntContain(string $column, $value)
	 * @see \Illuminate\Database\Query\Builder::leftJoinSub
	 * @method $this leftJoinSub(Builder|\Illuminate\Database\Query\Builder|string $query, string $as, string $first, null|string $operator = null, null|string $second = null)
	 * @see \Illuminate\Database\Query\Builder::find
	 * @method $this find(int|string $id, array $columns = [ '*' ])
	 * @see \Illuminate\Database\Query\Builder::crossJoinSub
	 * @method $this crossJoinSub(\Illuminate\Database\Query\Builder|string $query, string $as)
	 * @see \Illuminate\Database\Query\Builder::limit
	 * @method $this limit(int $value)
	 * @see \Illuminate\Database\Query\Builder::from
	 * @method $this from(\Illuminate\Database\Query\Builder|string $table, null|string $as = null)
	 * @see \Illuminate\Database\Query\Builder::whereNotBetweenColumns
	 * @method $this whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::insertGetId
	 * @method int insertGetId(array $values, null|string $sequence = null)
	 * @see \Illuminate\Database\Query\Builder::whereBetween
	 * @method $this whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @see \Illuminate\Database\Concerns\BuildsQueries::tap
	 * @method $this tap(callable $callback)
	 * @see \Illuminate\Database\Query\Builder::offset
	 * @method $this offset(int $value)
	 * @see \Illuminate\Database\Query\Builder::addNestedWhereQuery
	 * @method $this addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::rightJoin
	 * @method $this rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @see \Illuminate\Database\Query\Builder::leftJoin
	 * @method $this leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @see \Illuminate\Database\Query\Builder::insert
	 * @method bool insert(array $values)
	 * @see \Illuminate\Database\Query\Builder::distinct
	 * @method $this distinct()
	 * @see \Illuminate\Database\Concerns\BuildsQueries::chunk
	 * @method $this chunk(int $count, callable $callback)
	 * @see \Illuminate\Database\Query\Builder::reorder
	 * @method $this reorder(null|string $column = null, string $direction = 'asc')
	 * @see \Illuminate\Database\Query\Builder::whereYear
	 * @method $this whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::delete
	 * @method $this delete($id = null)
	 * @see \Illuminate\Database\Query\Builder::getCountForPagination
	 * @method $this getCountForPagination(array $columns = [ '*' ])
	 * @see \Illuminate\Database\Query\Builder::groupByRaw
	 * @method $this groupByRaw(string $sql, array $bindings = [])
	 * @see \Illuminate\Database\Query\Builder::orWhereIntegerNotInRaw
	 * @method $this orWhereIntegerNotInRaw(string $column, array|Arrayable $values)
	 * @see \Illuminate\Database\Query\Builder::aggregate
	 * @method $this aggregate(string $function, array $columns = [ '*' ])
	 * @see \Illuminate\Database\Query\Builder::dump
	 * @method void dump()
	 * @see \Illuminate\Database\Query\Builder::implode
	 * @method $this implode(string $column, string $glue = '')
	 * @see \Illuminate\Database\Query\Builder::value
	 * @method $this value(string $column)
	 * @see \Illuminate\Database\Query\Builder::addWhereExistsQuery
	 * @method $this addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean = 'and', bool $not = false)
	 * @see \Illuminate\Support\Traits\Macroable::macro
	 * @method $this macro(string $name, callable|object $macro)
	 * @see \Illuminate\Database\Query\Builder::whereRaw
	 * @method $this whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::toSql
	 * @method string toSql()
	 * @see \Illuminate\Database\Query\Builder::orHaving
	 * @method $this orHaving(string $column, null|string $operator = null, null|string $value = null)
	 * @see \Illuminate\Database\Query\Builder::getBindings
	 * @method array getBindings()
	 * @see \Illuminate\Database\Query\Builder::orWhereTime
	 * @method $this orWhereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null)
	 * @see \Illuminate\Database\Query\Builder::dynamicWhere
	 * @method $this dynamicWhere(string $method, array $parameters)
	 * @see \Illuminate\Database\Query\Builder::orWhere
	 * @method $this orWhere(array|string $column, $operator = null, $value = null)
	 */
	class _BaseBuilder extends Builder { }

	/**
	 * @method Collection mapSpread(callable $callback)
	 * @method Collection mapWithKeys(callable $callback)
	 * @method Collection zip(array $items)
	 * @method Collection partition(callable|string $key, $operator = null, $value = null)
	 * @method Collection mapInto(string $class)
	 * @method Collection mapToGroups(callable $callback)
	 * @method Collection map(callable $callback)
	 * @method Collection groupBy(array|callable|string $groupBy, bool $preserveKeys = false)
	 * @method Collection pluck(array|int|null|string $value, null|string $key = null)
	 * @method Collection pad(int $size, $value)
	 * @method Collection split(int $numberOfGroups)
	 * @method Collection combine($values)
	 * @method Collection countBy(callable|string $countBy = null)
	 * @method Collection mapToDictionary(callable $callback)
	 * @method Collection keys()
	 * @method Collection transform(callable $callback)
	 * @method Collection flatMap(callable $callback)
	 * @method Collection collapse()
	 */
	class _BaseCollection extends Collection { }
}

namespace LaravelIdea\Helper\App\Domain\Agent\Models {

    use App\Domain\Agent\Models\Agent;
    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use LaravelIdea\Helper\_BaseCollection;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;

    /**
	 * @method Agent shift()
	 * @method Agent pop()
	 * @method Agent get($key, $default = null)
	 * @method Agent pull($key, $default = null)
	 * @method Agent first(callable $callback = null, $default = null)
	 * @method Agent firstWhere(string $key, $operator = null, $value = null)
	 * @method Agent[] all()
	 * @method Agent last(callable $callback = null, $default = null)
	 * @property-read _AgentCollectionProxy $keyBy
	 * @property-read _AgentCollectionProxy $partition
	 * @property-read _AgentCollectionProxy $max
	 * @property-read _AgentCollectionProxy $flatMap
	 * @property-read _AgentCollectionProxy $each
	 * @property-read _AgentCollectionProxy $map
	 * @property-read _AgentCollectionProxy $filter
	 * @property-read _AgentCollectionProxy $unique
	 * @property-read _AgentCollectionProxy $groupBy
	 * @property-read _AgentCollectionProxy $sortBy
	 * @property-read _AgentCollectionProxy $contains
	 * @property-read _AgentCollectionProxy $sum
	 * @property-read _AgentCollectionProxy $until
	 * @property-read _AgentCollectionProxy $every
	 * @property-read _AgentCollectionProxy $average
	 * @property-read _AgentCollectionProxy $some
	 * @property-read _AgentCollectionProxy $skipWhile
	 * @property-read _AgentCollectionProxy $sortByDesc
	 * @property-read _AgentCollectionProxy $takeUntil
	 * @property-read _AgentCollectionProxy $avg
	 * @property-read _AgentCollectionProxy $skipUntil
	 * @property-read _AgentCollectionProxy $first
	 * @property-read _AgentCollectionProxy $takeWhile
	 * @property-read _AgentCollectionProxy $min
	 * @property-read _AgentCollectionProxy $reject
	 */
	class _AgentCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Agent[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _AgentCollection|mixed $id
	 * @property _AgentCollection|mixed $name
	 * @property _AgentCollection|mixed $company_id
	 * @property _AgentCollection|mixed $created_at
	 * @property _AgentCollection|mixed $updated_at
	 * @property _AgentCollection|mixed $phoneNumber
	 * @see \App\Domain\Agent\Models\Agent::setName
	 * @method _AgentCollection setName(string $name)
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _AgentCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _AgentCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _AgentCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _AgentCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _AgentCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _AgentCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _AgentCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _AgentCollectionProxy { }

	/**
	 * @method _AgentQueryBuilder whereId($value)
	 * @method _AgentQueryBuilder whereName($value)
	 * @method _AgentQueryBuilder whereCompanyId($value)
	 * @method _AgentQueryBuilder whereCreatedAt($value)
	 * @method _AgentQueryBuilder whereUpdatedAt($value)
	 * @method Agent baseSole(array|string $columns = [ '*' ])
	 * @method Agent create(array $attributes = [])
	 * @method _AgentCollection|Agent[] cursor()
	 * @method Agent|null find($id, array $columns = [ '*' ])
	 * @method _AgentCollection|Agent[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Agent findOrFail($id, array $columns = [ '*' ])
	 * @method _AgentCollection|Agent[] findOrNew($id, array $columns = [ '*' ])
	 * @method Agent first(array|string $columns = [ '*' ])
	 * @method Agent firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Agent firstOrCreate(array $attributes = [], array $values = [])
	 * @method Agent firstOrFail(array $columns = [ '*' ])
	 * @method Agent firstOrNew(array $attributes = [], array $values = [])
	 * @method Agent firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Agent forceCreate(array $attributes)
	 * @method _AgentCollection|Agent[] fromQuery(string $query, array $bindings = [])
	 * @method _AgentCollection|Agent[] get(array|string $columns = [ '*' ])
	 * @method Agent getModel()
	 * @method Agent[] getModels(array|string $columns = [ '*' ])
	 * @method _AgentCollection|Agent[] hydrate(array $items)
	 * @method Agent make(array $attributes = [])
	 * @method Agent newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Agent[]|_AgentCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Agent[]|_AgentCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Agent sole(array|string $columns = [ '*' ])
	 * @method Agent updateOrCreate(array $attributes, array $values = [])
	 */
	class _AgentQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\App\Domain\Company\Models {

    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use App\Domain\Company\Models\Company;
    use LaravelIdea\Helper\_BaseCollection;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;

    /**
	 * @method Company shift()
	 * @method Company pop()
	 * @method Company get($key, $default = null)
	 * @method Company pull($key, $default = null)
	 * @method Company first(callable $callback = null, $default = null)
	 * @method Company firstWhere(string $key, $operator = null, $value = null)
	 * @method Company[] all()
	 * @method Company last(callable $callback = null, $default = null)
	 * @property-read _CompanyCollectionProxy $keyBy
	 * @property-read _CompanyCollectionProxy $partition
	 * @property-read _CompanyCollectionProxy $max
	 * @property-read _CompanyCollectionProxy $flatMap
	 * @property-read _CompanyCollectionProxy $each
	 * @property-read _CompanyCollectionProxy $map
	 * @property-read _CompanyCollectionProxy $filter
	 * @property-read _CompanyCollectionProxy $unique
	 * @property-read _CompanyCollectionProxy $groupBy
	 * @property-read _CompanyCollectionProxy $sortBy
	 * @property-read _CompanyCollectionProxy $contains
	 * @property-read _CompanyCollectionProxy $sum
	 * @property-read _CompanyCollectionProxy $until
	 * @property-read _CompanyCollectionProxy $every
	 * @property-read _CompanyCollectionProxy $average
	 * @property-read _CompanyCollectionProxy $some
	 * @property-read _CompanyCollectionProxy $skipWhile
	 * @property-read _CompanyCollectionProxy $sortByDesc
	 * @property-read _CompanyCollectionProxy $takeUntil
	 * @property-read _CompanyCollectionProxy $avg
	 * @property-read _CompanyCollectionProxy $skipUntil
	 * @property-read _CompanyCollectionProxy $first
	 * @property-read _CompanyCollectionProxy $takeWhile
	 * @property-read _CompanyCollectionProxy $min
	 * @property-read _CompanyCollectionProxy $reject
	 */
	class _CompanyCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Company[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _CompanyCollection|mixed $id
	 * @property _CompanyCollection|mixed $name
	 * @property _CompanyCollection|mixed $short_name
	 * @property _CompanyCollection|mixed $address
	 * @property _CompanyCollection|mixed $city
	 * @property _CompanyCollection|mixed $state
	 * @property _CompanyCollection|mixed $gstin
	 * @property _CompanyCollection|mixed $pan
	 * @property _CompanyCollection|mixed $use_razorpay
	 * @property _CompanyCollection|mixed $razorpay_key_id
	 * @property _CompanyCollection|mixed $razorpay_key_secret
	 * @property _CompanyCollection|mixed $user_id
	 * @property _CompanyCollection|mixed $created_at
	 * @property _CompanyCollection|mixed $updated_at
	 * @property _CompanyCollection|mixed $manager
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _CompanyCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _CompanyCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _CompanyCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _CompanyCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _CompanyCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _CompanyCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _CompanyCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _CompanyCollectionProxy { }

	/**
	 * @method _CompanyQueryBuilder whereId($value)
	 * @method _CompanyQueryBuilder whereName($value)
	 * @method _CompanyQueryBuilder whereShortName($value)
	 * @method _CompanyQueryBuilder whereAddress($value)
	 * @method _CompanyQueryBuilder whereCity($value)
	 * @method _CompanyQueryBuilder whereState($value)
	 * @method _CompanyQueryBuilder whereGstin($value)
	 * @method _CompanyQueryBuilder wherePan($value)
	 * @method _CompanyQueryBuilder whereUseRazorpay($value)
	 * @method _CompanyQueryBuilder whereRazorpayKeyId($value)
	 * @method _CompanyQueryBuilder whereRazorpayKeySecret($value)
	 * @method _CompanyQueryBuilder whereUserId($value)
	 * @method _CompanyQueryBuilder whereCreatedAt($value)
	 * @method _CompanyQueryBuilder whereUpdatedAt($value)
	 * @method Company baseSole(array|string $columns = [ '*' ])
	 * @method Company create(array $attributes = [])
	 * @method _CompanyCollection|Company[] cursor()
	 * @method Company|null find($id, array $columns = [ '*' ])
	 * @method _CompanyCollection|Company[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Company findOrFail($id, array $columns = [ '*' ])
	 * @method _CompanyCollection|Company[] findOrNew($id, array $columns = [ '*' ])
	 * @method Company first(array|string $columns = [ '*' ])
	 * @method Company firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Company firstOrCreate(array $attributes = [], array $values = [])
	 * @method Company firstOrFail(array $columns = [ '*' ])
	 * @method Company firstOrNew(array $attributes = [], array $values = [])
	 * @method Company firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Company forceCreate(array $attributes)
	 * @method _CompanyCollection|Company[] fromQuery(string $query, array $bindings = [])
	 * @method _CompanyCollection|Company[] get(array|string $columns = [ '*' ])
	 * @method Company getModel()
	 * @method Company[] getModels(array|string $columns = [ '*' ])
	 * @method _CompanyCollection|Company[] hydrate(array $items)
	 * @method Company make(array $attributes = [])
	 * @method Company newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Company[]|_CompanyCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Company[]|_CompanyCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Company sole(array|string $columns = [ '*' ])
	 * @method Company updateOrCreate(array $attributes, array $values = [])
	 */
	class _CompanyQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\App\Domain\Consignee\Models {

    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use LaravelIdea\Helper\_BaseCollection;
    use Illuminate\Database\Query\Expression;
    use App\Domain\Consignee\Models\Consignee;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;

    /**
	 * @method Consignee shift()
	 * @method Consignee pop()
	 * @method Consignee get($key, $default = null)
	 * @method Consignee pull($key, $default = null)
	 * @method Consignee first(callable $callback = null, $default = null)
	 * @method Consignee firstWhere(string $key, $operator = null, $value = null)
	 * @method Consignee[] all()
	 * @method Consignee last(callable $callback = null, $default = null)
	 * @property-read _ConsigneeCollectionProxy $keyBy
	 * @property-read _ConsigneeCollectionProxy $partition
	 * @property-read _ConsigneeCollectionProxy $max
	 * @property-read _ConsigneeCollectionProxy $flatMap
	 * @property-read _ConsigneeCollectionProxy $each
	 * @property-read _ConsigneeCollectionProxy $map
	 * @property-read _ConsigneeCollectionProxy $filter
	 * @property-read _ConsigneeCollectionProxy $unique
	 * @property-read _ConsigneeCollectionProxy $groupBy
	 * @property-read _ConsigneeCollectionProxy $sortBy
	 * @property-read _ConsigneeCollectionProxy $contains
	 * @property-read _ConsigneeCollectionProxy $sum
	 * @property-read _ConsigneeCollectionProxy $until
	 * @property-read _ConsigneeCollectionProxy $every
	 * @property-read _ConsigneeCollectionProxy $average
	 * @property-read _ConsigneeCollectionProxy $some
	 * @property-read _ConsigneeCollectionProxy $skipWhile
	 * @property-read _ConsigneeCollectionProxy $sortByDesc
	 * @property-read _ConsigneeCollectionProxy $takeUntil
	 * @property-read _ConsigneeCollectionProxy $avg
	 * @property-read _ConsigneeCollectionProxy $skipUntil
	 * @property-read _ConsigneeCollectionProxy $first
	 * @property-read _ConsigneeCollectionProxy $takeWhile
	 * @property-read _ConsigneeCollectionProxy $min
	 * @property-read _ConsigneeCollectionProxy $reject
	 */
	class _ConsigneeCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Consignee[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _ConsigneeCollection|mixed $id
	 * @property _ConsigneeCollection|mixed $name
	 * @property _ConsigneeCollection|mixed $address
	 * @property _ConsigneeCollection|mixed $gstin_uin
	 * @property _ConsigneeCollection|mixed $pan
	 * @property _ConsigneeCollection|mixed $state_name
	 * @property _ConsigneeCollection|mixed $company_id
	 * @property _ConsigneeCollection|mixed $created_at
	 * @property _ConsigneeCollection|mixed $updated_at
	 * @see \App\Domain\Consignee\Models\Consignee::running_projects
	 * @method _ConsigneeCollection running_projects()
	 * @see \App\Domain\Consignee\Models\Consignee::business_done
	 * @method _ConsigneeCollection business_done()
	 * @see \App\Domain\Consignee\Models\Consignee::projects
	 * @method _ConsigneeCollection projects()
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _ConsigneeCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _ConsigneeCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _ConsigneeCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _ConsigneeCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _ConsigneeCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _ConsigneeCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _ConsigneeCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _ConsigneeCollectionProxy { }

	/**
	 * @method _ConsigneeQueryBuilder whereId($value)
	 * @method _ConsigneeQueryBuilder whereName($value)
	 * @method _ConsigneeQueryBuilder whereAddress($value)
	 * @method _ConsigneeQueryBuilder whereGstinUin($value)
	 * @method _ConsigneeQueryBuilder wherePan($value)
	 * @method _ConsigneeQueryBuilder whereStateName($value)
	 * @method _ConsigneeQueryBuilder whereCompanyId($value)
	 * @method _ConsigneeQueryBuilder whereCreatedAt($value)
	 * @method _ConsigneeQueryBuilder whereUpdatedAt($value)
	 * @method Consignee baseSole(array|string $columns = [ '*' ])
	 * @method Consignee create(array $attributes = [])
	 * @method _ConsigneeCollection|Consignee[] cursor()
	 * @method Consignee|null find($id, array $columns = [ '*' ])
	 * @method _ConsigneeCollection|Consignee[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Consignee findOrFail($id, array $columns = [ '*' ])
	 * @method _ConsigneeCollection|Consignee[] findOrNew($id, array $columns = [ '*' ])
	 * @method Consignee first(array|string $columns = [ '*' ])
	 * @method Consignee firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Consignee firstOrCreate(array $attributes = [], array $values = [])
	 * @method Consignee firstOrFail(array $columns = [ '*' ])
	 * @method Consignee firstOrNew(array $attributes = [], array $values = [])
	 * @method Consignee firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Consignee forceCreate(array $attributes)
	 * @method _ConsigneeCollection|Consignee[] fromQuery(string $query, array $bindings = [])
	 * @method _ConsigneeCollection|Consignee[] get(array|string $columns = [ '*' ])
	 * @method Consignee getModel()
	 * @method Consignee[] getModels(array|string $columns = [ '*' ])
	 * @method _ConsigneeCollection|Consignee[] hydrate(array $items)
	 * @method Consignee make(array $attributes = [])
	 * @method Consignee newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Consignee[]|_ConsigneeCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Consignee[]|_ConsigneeCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Consignee sole(array|string $columns = [ '*' ])
	 * @method Consignee updateOrCreate(array $attributes, array $values = [])
	 */
	class _ConsigneeQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\App\Domain\Document\Models {

    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use LaravelIdea\Helper\_BaseCollection;
    use App\Domain\Document\Models\Document;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use App\Domain\Document\Models\DocumentCategory;

    /**
	 * @method DocumentCategory shift()
	 * @method DocumentCategory pop()
	 * @method DocumentCategory get($key, $default = null)
	 * @method DocumentCategory pull($key, $default = null)
	 * @method DocumentCategory first(callable $callback = null, $default = null)
	 * @method DocumentCategory firstWhere(string $key, $operator = null, $value = null)
	 * @method DocumentCategory[] all()
	 * @method DocumentCategory last(callable $callback = null, $default = null)
	 * @property-read _DocumentCategoryCollectionProxy $keyBy
	 * @property-read _DocumentCategoryCollectionProxy $partition
	 * @property-read _DocumentCategoryCollectionProxy $max
	 * @property-read _DocumentCategoryCollectionProxy $flatMap
	 * @property-read _DocumentCategoryCollectionProxy $each
	 * @property-read _DocumentCategoryCollectionProxy $map
	 * @property-read _DocumentCategoryCollectionProxy $filter
	 * @property-read _DocumentCategoryCollectionProxy $unique
	 * @property-read _DocumentCategoryCollectionProxy $groupBy
	 * @property-read _DocumentCategoryCollectionProxy $sortBy
	 * @property-read _DocumentCategoryCollectionProxy $contains
	 * @property-read _DocumentCategoryCollectionProxy $sum
	 * @property-read _DocumentCategoryCollectionProxy $until
	 * @property-read _DocumentCategoryCollectionProxy $every
	 * @property-read _DocumentCategoryCollectionProxy $average
	 * @property-read _DocumentCategoryCollectionProxy $some
	 * @property-read _DocumentCategoryCollectionProxy $skipWhile
	 * @property-read _DocumentCategoryCollectionProxy $sortByDesc
	 * @property-read _DocumentCategoryCollectionProxy $takeUntil
	 * @property-read _DocumentCategoryCollectionProxy $avg
	 * @property-read _DocumentCategoryCollectionProxy $skipUntil
	 * @property-read _DocumentCategoryCollectionProxy $first
	 * @property-read _DocumentCategoryCollectionProxy $takeWhile
	 * @property-read _DocumentCategoryCollectionProxy $min
	 * @property-read _DocumentCategoryCollectionProxy $reject
	 */
	class _DocumentCategoryCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return DocumentCategory[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _DocumentCategoryCollection|mixed $id
	 * @property _DocumentCategoryCollection|mixed $name
	 * @property _DocumentCategoryCollection|mixed $created_at
	 * @property _DocumentCategoryCollection|mixed $updated_at
	 * @property _DocumentCategoryCollection|mixed $categories
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _DocumentCategoryCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _DocumentCategoryCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _DocumentCategoryCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _DocumentCategoryCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _DocumentCategoryCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _DocumentCategoryCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _DocumentCategoryCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _DocumentCategoryCollectionProxy { }

	/**
	 * @method _DocumentCategoryQueryBuilder whereId($value)
	 * @method _DocumentCategoryQueryBuilder whereName($value)
	 * @method _DocumentCategoryQueryBuilder whereCreatedAt($value)
	 * @method _DocumentCategoryQueryBuilder whereUpdatedAt($value)
	 * @method DocumentCategory baseSole(array|string $columns = [ '*' ])
	 * @method DocumentCategory create(array $attributes = [])
	 * @method _DocumentCategoryCollection|DocumentCategory[] cursor()
	 * @method DocumentCategory|null find($id, array $columns = [ '*' ])
	 * @method _DocumentCategoryCollection|DocumentCategory[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method DocumentCategory findOrFail($id, array $columns = [ '*' ])
	 * @method _DocumentCategoryCollection|DocumentCategory[] findOrNew($id, array $columns = [ '*' ])
	 * @method DocumentCategory first(array|string $columns = [ '*' ])
	 * @method DocumentCategory firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method DocumentCategory firstOrCreate(array $attributes = [], array $values = [])
	 * @method DocumentCategory firstOrFail(array $columns = [ '*' ])
	 * @method DocumentCategory firstOrNew(array $attributes = [], array $values = [])
	 * @method DocumentCategory firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method DocumentCategory forceCreate(array $attributes)
	 * @method _DocumentCategoryCollection|DocumentCategory[] fromQuery(string $query, array $bindings = [])
	 * @method _DocumentCategoryCollection|DocumentCategory[] get(array|string $columns = [ '*' ])
	 * @method DocumentCategory getModel()
	 * @method DocumentCategory[] getModels(array|string $columns = [ '*' ])
	 * @method _DocumentCategoryCollection|DocumentCategory[] hydrate(array $items)
	 * @method DocumentCategory make(array $attributes = [])
	 * @method DocumentCategory newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|DocumentCategory[]|_DocumentCategoryCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|DocumentCategory[]|_DocumentCategoryCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method DocumentCategory sole(array|string $columns = [ '*' ])
	 * @method DocumentCategory updateOrCreate(array $attributes, array $values = [])
	 */
	class _DocumentCategoryQueryBuilder extends _BaseBuilder { }

	/**
	 * @method Document shift()
	 * @method Document pop()
	 * @method Document get($key, $default = null)
	 * @method Document pull($key, $default = null)
	 * @method Document first(callable $callback = null, $default = null)
	 * @method Document firstWhere(string $key, $operator = null, $value = null)
	 * @method Document[] all()
	 * @method Document last(callable $callback = null, $default = null)
	 * @property-read _DocumentCollectionProxy $keyBy
	 * @property-read _DocumentCollectionProxy $partition
	 * @property-read _DocumentCollectionProxy $max
	 * @property-read _DocumentCollectionProxy $flatMap
	 * @property-read _DocumentCollectionProxy $each
	 * @property-read _DocumentCollectionProxy $map
	 * @property-read _DocumentCollectionProxy $filter
	 * @property-read _DocumentCollectionProxy $unique
	 * @property-read _DocumentCollectionProxy $groupBy
	 * @property-read _DocumentCollectionProxy $sortBy
	 * @property-read _DocumentCollectionProxy $contains
	 * @property-read _DocumentCollectionProxy $sum
	 * @property-read _DocumentCollectionProxy $until
	 * @property-read _DocumentCollectionProxy $every
	 * @property-read _DocumentCollectionProxy $average
	 * @property-read _DocumentCollectionProxy $some
	 * @property-read _DocumentCollectionProxy $skipWhile
	 * @property-read _DocumentCollectionProxy $sortByDesc
	 * @property-read _DocumentCollectionProxy $takeUntil
	 * @property-read _DocumentCollectionProxy $avg
	 * @property-read _DocumentCollectionProxy $skipUntil
	 * @property-read _DocumentCollectionProxy $first
	 * @property-read _DocumentCollectionProxy $takeWhile
	 * @property-read _DocumentCollectionProxy $min
	 * @property-read _DocumentCollectionProxy $reject
	 */
	class _DocumentCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Document[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _DocumentCollection|mixed $id
	 * @property _DocumentCollection|mixed $uid_num
	 * @property _DocumentCollection|mixed $path
	 * @property _DocumentCollection|mixed $document_category_id
	 * @property _DocumentCollection|mixed $documentable_id
	 * @property _DocumentCollection|mixed $documentable_type
	 * @property _DocumentCollection|mixed $created_at
	 * @property _DocumentCollection|mixed $updated_at
	 * @property _DocumentCollection|mixed $trip_id
	 * @property _DocumentCollection|mixed $documentable
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _DocumentCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _DocumentCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _DocumentCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _DocumentCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _DocumentCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _DocumentCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _DocumentCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _DocumentCollectionProxy { }

	/**
	 * @method _DocumentQueryBuilder whereId($value)
	 * @method _DocumentQueryBuilder whereUidNum($value)
	 * @method _DocumentQueryBuilder wherePath($value)
	 * @method _DocumentQueryBuilder whereDocumentCategoryId($value)
	 * @method _DocumentQueryBuilder whereDocumentableId($value)
	 * @method _DocumentQueryBuilder whereDocumentableType($value)
	 * @method _DocumentQueryBuilder whereCreatedAt($value)
	 * @method _DocumentQueryBuilder whereUpdatedAt($value)
	 * @method _DocumentQueryBuilder whereTripId($value)
	 * @method Document baseSole(array|string $columns = [ '*' ])
	 * @method Document create(array $attributes = [])
	 * @method _DocumentCollection|Document[] cursor()
	 * @method Document|null find($id, array $columns = [ '*' ])
	 * @method _DocumentCollection|Document[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Document findOrFail($id, array $columns = [ '*' ])
	 * @method _DocumentCollection|Document[] findOrNew($id, array $columns = [ '*' ])
	 * @method Document first(array|string $columns = [ '*' ])
	 * @method Document firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Document firstOrCreate(array $attributes = [], array $values = [])
	 * @method Document firstOrFail(array $columns = [ '*' ])
	 * @method Document firstOrNew(array $attributes = [], array $values = [])
	 * @method Document firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Document forceCreate(array $attributes)
	 * @method _DocumentCollection|Document[] fromQuery(string $query, array $bindings = [])
	 * @method _DocumentCollection|Document[] get(array|string $columns = [ '*' ])
	 * @method Document getModel()
	 * @method Document[] getModels(array|string $columns = [ '*' ])
	 * @method _DocumentCollection|Document[] hydrate(array $items)
	 * @method Document make(array $attributes = [])
	 * @method Document newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Document[]|_DocumentCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Document[]|_DocumentCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Document sole(array|string $columns = [ '*' ])
	 * @method Document updateOrCreate(array $attributes, array $values = [])
	 */
	class _DocumentQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\App\Domain\Employee\Models {

    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use LaravelIdea\Helper\_BaseCollection;
    use App\Domain\Employee\Models\Employee;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use App\Domain\Employee\Models\EmployeesAttendance;
    use App\Domain\Employee\Models\EmployeesDesignation;
    use App\Domain\Employee\Models\EmployeePaymentDetails;
    use App\Domain\Employee\Models\EmployeeDesignationClassification;

    /**
	 * @method Employee shift()
	 * @method Employee pop()
	 * @method Employee get($key, $default = null)
	 * @method Employee pull($key, $default = null)
	 * @method Employee first(callable $callback = null, $default = null)
	 * @method Employee firstWhere(string $key, $operator = null, $value = null)
	 * @method Employee[] all()
	 * @method Employee last(callable $callback = null, $default = null)
	 * @property-read _EmployeeCollectionProxy $keyBy
	 * @property-read _EmployeeCollectionProxy $partition
	 * @property-read _EmployeeCollectionProxy $max
	 * @property-read _EmployeeCollectionProxy $flatMap
	 * @property-read _EmployeeCollectionProxy $each
	 * @property-read _EmployeeCollectionProxy $map
	 * @property-read _EmployeeCollectionProxy $filter
	 * @property-read _EmployeeCollectionProxy $unique
	 * @property-read _EmployeeCollectionProxy $groupBy
	 * @property-read _EmployeeCollectionProxy $sortBy
	 * @property-read _EmployeeCollectionProxy $contains
	 * @property-read _EmployeeCollectionProxy $sum
	 * @property-read _EmployeeCollectionProxy $until
	 * @property-read _EmployeeCollectionProxy $every
	 * @property-read _EmployeeCollectionProxy $average
	 * @property-read _EmployeeCollectionProxy $some
	 * @property-read _EmployeeCollectionProxy $skipWhile
	 * @property-read _EmployeeCollectionProxy $sortByDesc
	 * @property-read _EmployeeCollectionProxy $takeUntil
	 * @property-read _EmployeeCollectionProxy $avg
	 * @property-read _EmployeeCollectionProxy $skipUntil
	 * @property-read _EmployeeCollectionProxy $first
	 * @property-read _EmployeeCollectionProxy $takeWhile
	 * @property-read _EmployeeCollectionProxy $min
	 * @property-read _EmployeeCollectionProxy $reject
	 */
	class _EmployeeCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Employee[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _EmployeeCollection|mixed $id
	 * @property _EmployeeCollection|mixed $name
	 * @property _EmployeeCollection|mixed $salary
	 * @property _EmployeeCollection|mixed $email
	 * @property _EmployeeCollection|mixed $office_id
	 * @property _EmployeeCollection|mixed $company_id
	 * @property _EmployeeCollection|mixed $employee_designation_id
	 * @property _EmployeeCollection|mixed $is_currently_hired
	 * @property _EmployeeCollection|mixed $created_at
	 * @property _EmployeeCollection|mixed $updated_at
	 * @property _EmployeeCollection|mixed $bankAccount
	 * @property _EmployeeCollection|mixed $designation
	 * @property _EmployeeCollection|mixed $office
	 * @property _EmployeeCollection|mixed $phoneNumber
	 * @see \App\Domain\Employee\Models\Employee::profile_photo_url
	 * @method _EmployeeCollection profile_photo_url()
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _EmployeeCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _EmployeeCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _EmployeeCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _EmployeeCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _EmployeeCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _EmployeeCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _EmployeeCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _EmployeeCollectionProxy { }

	/**
	 * @method EmployeeDesignationClassification shift()
	 * @method EmployeeDesignationClassification pop()
	 * @method EmployeeDesignationClassification get($key, $default = null)
	 * @method EmployeeDesignationClassification pull($key, $default = null)
	 * @method EmployeeDesignationClassification first(callable $callback = null, $default = null)
	 * @method EmployeeDesignationClassification firstWhere(string $key, $operator = null, $value = null)
	 * @method EmployeeDesignationClassification[] all()
	 * @method EmployeeDesignationClassification last(callable $callback = null, $default = null)
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $keyBy
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $partition
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $max
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $flatMap
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $each
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $map
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $filter
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $unique
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $groupBy
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $sortBy
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $contains
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $sum
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $until
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $every
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $average
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $some
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $skipWhile
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $sortByDesc
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $takeUntil
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $avg
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $skipUntil
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $first
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $takeWhile
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $min
	 * @property-read _EmployeeDesignationClassificationCollectionProxy $reject
	 */
	class _EmployeeDesignationClassificationCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return EmployeeDesignationClassification[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _EmployeeDesignationClassificationCollection|mixed $id
	 * @property _EmployeeDesignationClassificationCollection|mixed $name
	 * @property _EmployeeDesignationClassificationCollection|mixed $created_at
	 * @property _EmployeeDesignationClassificationCollection|mixed $updated_at
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _EmployeeDesignationClassificationCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _EmployeeDesignationClassificationCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _EmployeeDesignationClassificationCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _EmployeeDesignationClassificationCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _EmployeeDesignationClassificationCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _EmployeeDesignationClassificationCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _EmployeeDesignationClassificationCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _EmployeeDesignationClassificationCollectionProxy { }

	/**
	 * @method _EmployeeDesignationClassificationQueryBuilder whereId($value)
	 * @method _EmployeeDesignationClassificationQueryBuilder whereName($value)
	 * @method _EmployeeDesignationClassificationQueryBuilder whereCreatedAt($value)
	 * @method _EmployeeDesignationClassificationQueryBuilder whereUpdatedAt($value)
	 * @method EmployeeDesignationClassification baseSole(array|string $columns = [ '*' ])
	 * @method EmployeeDesignationClassification create(array $attributes = [])
	 * @method _EmployeeDesignationClassificationCollection|EmployeeDesignationClassification[] cursor()
	 * @method EmployeeDesignationClassification|null find($id, array $columns = [ '*' ])
	 * @method _EmployeeDesignationClassificationCollection|EmployeeDesignationClassification[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method EmployeeDesignationClassification findOrFail($id, array $columns = [ '*' ])
	 * @method _EmployeeDesignationClassificationCollection|EmployeeDesignationClassification[] findOrNew($id, array $columns = [ '*' ])
	 * @method EmployeeDesignationClassification first(array|string $columns = [ '*' ])
	 * @method EmployeeDesignationClassification firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method EmployeeDesignationClassification firstOrCreate(array $attributes = [], array $values = [])
	 * @method EmployeeDesignationClassification firstOrFail(array $columns = [ '*' ])
	 * @method EmployeeDesignationClassification firstOrNew(array $attributes = [], array $values = [])
	 * @method EmployeeDesignationClassification firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method EmployeeDesignationClassification forceCreate(array $attributes)
	 * @method _EmployeeDesignationClassificationCollection|EmployeeDesignationClassification[] fromQuery(string $query, array $bindings = [])
	 * @method _EmployeeDesignationClassificationCollection|EmployeeDesignationClassification[] get(array|string $columns = [ '*' ])
	 * @method EmployeeDesignationClassification getModel()
	 * @method EmployeeDesignationClassification[] getModels(array|string $columns = [ '*' ])
	 * @method _EmployeeDesignationClassificationCollection|EmployeeDesignationClassification[] hydrate(array $items)
	 * @method EmployeeDesignationClassification make(array $attributes = [])
	 * @method EmployeeDesignationClassification newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|EmployeeDesignationClassification[]|_EmployeeDesignationClassificationCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|EmployeeDesignationClassification[]|_EmployeeDesignationClassificationCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method EmployeeDesignationClassification sole(array|string $columns = [ '*' ])
	 * @method EmployeeDesignationClassification updateOrCreate(array $attributes, array $values = [])
	 */
	class _EmployeeDesignationClassificationQueryBuilder extends _BaseBuilder { }

	/**
	 * @method EmployeePaymentDetails shift()
	 * @method EmployeePaymentDetails pop()
	 * @method EmployeePaymentDetails get($key, $default = null)
	 * @method EmployeePaymentDetails pull($key, $default = null)
	 * @method EmployeePaymentDetails first(callable $callback = null, $default = null)
	 * @method EmployeePaymentDetails firstWhere(string $key, $operator = null, $value = null)
	 * @method EmployeePaymentDetails[] all()
	 * @method EmployeePaymentDetails last(callable $callback = null, $default = null)
	 * @property-read _EmployeePaymentDetailsCollectionProxy $keyBy
	 * @property-read _EmployeePaymentDetailsCollectionProxy $partition
	 * @property-read _EmployeePaymentDetailsCollectionProxy $max
	 * @property-read _EmployeePaymentDetailsCollectionProxy $flatMap
	 * @property-read _EmployeePaymentDetailsCollectionProxy $each
	 * @property-read _EmployeePaymentDetailsCollectionProxy $map
	 * @property-read _EmployeePaymentDetailsCollectionProxy $filter
	 * @property-read _EmployeePaymentDetailsCollectionProxy $unique
	 * @property-read _EmployeePaymentDetailsCollectionProxy $groupBy
	 * @property-read _EmployeePaymentDetailsCollectionProxy $sortBy
	 * @property-read _EmployeePaymentDetailsCollectionProxy $contains
	 * @property-read _EmployeePaymentDetailsCollectionProxy $sum
	 * @property-read _EmployeePaymentDetailsCollectionProxy $until
	 * @property-read _EmployeePaymentDetailsCollectionProxy $every
	 * @property-read _EmployeePaymentDetailsCollectionProxy $average
	 * @property-read _EmployeePaymentDetailsCollectionProxy $some
	 * @property-read _EmployeePaymentDetailsCollectionProxy $skipWhile
	 * @property-read _EmployeePaymentDetailsCollectionProxy $sortByDesc
	 * @property-read _EmployeePaymentDetailsCollectionProxy $takeUntil
	 * @property-read _EmployeePaymentDetailsCollectionProxy $avg
	 * @property-read _EmployeePaymentDetailsCollectionProxy $skipUntil
	 * @property-read _EmployeePaymentDetailsCollectionProxy $first
	 * @property-read _EmployeePaymentDetailsCollectionProxy $takeWhile
	 * @property-read _EmployeePaymentDetailsCollectionProxy $min
	 * @property-read _EmployeePaymentDetailsCollectionProxy $reject
	 */
	class _EmployeePaymentDetailsCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return EmployeePaymentDetails[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _EmployeePaymentDetailsCollection|mixed $employee
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _EmployeePaymentDetailsCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _EmployeePaymentDetailsCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _EmployeePaymentDetailsCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _EmployeePaymentDetailsCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _EmployeePaymentDetailsCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _EmployeePaymentDetailsCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _EmployeePaymentDetailsCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _EmployeePaymentDetailsCollectionProxy { }

	/**
	 * @method EmployeePaymentDetails baseSole(array|string $columns = [ '*' ])
	 * @method EmployeePaymentDetails create(array $attributes = [])
	 * @method _EmployeePaymentDetailsCollection|EmployeePaymentDetails[] cursor()
	 * @method EmployeePaymentDetails|null find($id, array $columns = [ '*' ])
	 * @method _EmployeePaymentDetailsCollection|EmployeePaymentDetails[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method EmployeePaymentDetails findOrFail($id, array $columns = [ '*' ])
	 * @method _EmployeePaymentDetailsCollection|EmployeePaymentDetails[] findOrNew($id, array $columns = [ '*' ])
	 * @method EmployeePaymentDetails first(array|string $columns = [ '*' ])
	 * @method EmployeePaymentDetails firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method EmployeePaymentDetails firstOrCreate(array $attributes = [], array $values = [])
	 * @method EmployeePaymentDetails firstOrFail(array $columns = [ '*' ])
	 * @method EmployeePaymentDetails firstOrNew(array $attributes = [], array $values = [])
	 * @method EmployeePaymentDetails firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method EmployeePaymentDetails forceCreate(array $attributes)
	 * @method _EmployeePaymentDetailsCollection|EmployeePaymentDetails[] fromQuery(string $query, array $bindings = [])
	 * @method _EmployeePaymentDetailsCollection|EmployeePaymentDetails[] get(array|string $columns = [ '*' ])
	 * @method EmployeePaymentDetails getModel()
	 * @method EmployeePaymentDetails[] getModels(array|string $columns = [ '*' ])
	 * @method _EmployeePaymentDetailsCollection|EmployeePaymentDetails[] hydrate(array $items)
	 * @method EmployeePaymentDetails make(array $attributes = [])
	 * @method EmployeePaymentDetails newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|EmployeePaymentDetails[]|_EmployeePaymentDetailsCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|EmployeePaymentDetails[]|_EmployeePaymentDetailsCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method EmployeePaymentDetails sole(array|string $columns = [ '*' ])
	 * @method EmployeePaymentDetails updateOrCreate(array $attributes, array $values = [])
	 */
	class _EmployeePaymentDetailsQueryBuilder extends _BaseBuilder { }

	/**
	 * @method _EmployeeQueryBuilder whereId($value)
	 * @method _EmployeeQueryBuilder whereName($value)
	 * @method _EmployeeQueryBuilder whereSalary($value)
	 * @method _EmployeeQueryBuilder whereEmail($value)
	 * @method _EmployeeQueryBuilder whereOfficeId($value)
	 * @method _EmployeeQueryBuilder whereCompanyId($value)
	 * @method _EmployeeQueryBuilder whereEmployeeDesignationId($value)
	 * @method _EmployeeQueryBuilder whereIsCurrentlyHired($value)
	 * @method _EmployeeQueryBuilder whereCreatedAt($value)
	 * @method _EmployeeQueryBuilder whereUpdatedAt($value)
	 * @method Employee baseSole(array|string $columns = [ '*' ])
	 * @method Employee create(array $attributes = [])
	 * @method _EmployeeCollection|Employee[] cursor()
	 * @method Employee|null find($id, array $columns = [ '*' ])
	 * @method _EmployeeCollection|Employee[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Employee findOrFail($id, array $columns = [ '*' ])
	 * @method _EmployeeCollection|Employee[] findOrNew($id, array $columns = [ '*' ])
	 * @method Employee first(array|string $columns = [ '*' ])
	 * @method Employee firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Employee firstOrCreate(array $attributes = [], array $values = [])
	 * @method Employee firstOrFail(array $columns = [ '*' ])
	 * @method Employee firstOrNew(array $attributes = [], array $values = [])
	 * @method Employee firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Employee forceCreate(array $attributes)
	 * @method _EmployeeCollection|Employee[] fromQuery(string $query, array $bindings = [])
	 * @method _EmployeeCollection|Employee[] get(array|string $columns = [ '*' ])
	 * @method Employee getModel()
	 * @method Employee[] getModels(array|string $columns = [ '*' ])
	 * @method _EmployeeCollection|Employee[] hydrate(array $items)
	 * @method Employee make(array $attributes = [])
	 * @method Employee newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Employee[]|_EmployeeCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Employee[]|_EmployeeCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Employee sole(array|string $columns = [ '*' ])
	 * @method Employee updateOrCreate(array $attributes, array $values = [])
	 */
	class _EmployeeQueryBuilder extends _BaseBuilder { }

	/**
	 * @method EmployeesAttendance shift()
	 * @method EmployeesAttendance pop()
	 * @method EmployeesAttendance get($key, $default = null)
	 * @method EmployeesAttendance pull($key, $default = null)
	 * @method EmployeesAttendance first(callable $callback = null, $default = null)
	 * @method EmployeesAttendance firstWhere(string $key, $operator = null, $value = null)
	 * @method EmployeesAttendance[] all()
	 * @method EmployeesAttendance last(callable $callback = null, $default = null)
	 * @property-read _EmployeesAttendanceCollectionProxy $keyBy
	 * @property-read _EmployeesAttendanceCollectionProxy $partition
	 * @property-read _EmployeesAttendanceCollectionProxy $max
	 * @property-read _EmployeesAttendanceCollectionProxy $flatMap
	 * @property-read _EmployeesAttendanceCollectionProxy $each
	 * @property-read _EmployeesAttendanceCollectionProxy $map
	 * @property-read _EmployeesAttendanceCollectionProxy $filter
	 * @property-read _EmployeesAttendanceCollectionProxy $unique
	 * @property-read _EmployeesAttendanceCollectionProxy $groupBy
	 * @property-read _EmployeesAttendanceCollectionProxy $sortBy
	 * @property-read _EmployeesAttendanceCollectionProxy $contains
	 * @property-read _EmployeesAttendanceCollectionProxy $sum
	 * @property-read _EmployeesAttendanceCollectionProxy $until
	 * @property-read _EmployeesAttendanceCollectionProxy $every
	 * @property-read _EmployeesAttendanceCollectionProxy $average
	 * @property-read _EmployeesAttendanceCollectionProxy $some
	 * @property-read _EmployeesAttendanceCollectionProxy $skipWhile
	 * @property-read _EmployeesAttendanceCollectionProxy $sortByDesc
	 * @property-read _EmployeesAttendanceCollectionProxy $takeUntil
	 * @property-read _EmployeesAttendanceCollectionProxy $avg
	 * @property-read _EmployeesAttendanceCollectionProxy $skipUntil
	 * @property-read _EmployeesAttendanceCollectionProxy $first
	 * @property-read _EmployeesAttendanceCollectionProxy $takeWhile
	 * @property-read _EmployeesAttendanceCollectionProxy $min
	 * @property-read _EmployeesAttendanceCollectionProxy $reject
	 */
	class _EmployeesAttendanceCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return EmployeesAttendance[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _EmployeesAttendanceCollection|mixed $id
	 * @property _EmployeesAttendanceCollection|mixed $date
	 * @property _EmployeesAttendanceCollection|mixed $employee_id
	 * @property _EmployeesAttendanceCollection|mixed $company_id
	 * @property _EmployeesAttendanceCollection|mixed $created_at
	 * @property _EmployeesAttendanceCollection|mixed $updated_at
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _EmployeesAttendanceCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _EmployeesAttendanceCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _EmployeesAttendanceCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _EmployeesAttendanceCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _EmployeesAttendanceCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _EmployeesAttendanceCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _EmployeesAttendanceCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _EmployeesAttendanceCollectionProxy { }

	/**
	 * @method _EmployeesAttendanceQueryBuilder whereId($value)
	 * @method _EmployeesAttendanceQueryBuilder whereDate($value)
	 * @method _EmployeesAttendanceQueryBuilder whereEmployeeId($value)
	 * @method _EmployeesAttendanceQueryBuilder whereCompanyId($value)
	 * @method _EmployeesAttendanceQueryBuilder whereCreatedAt($value)
	 * @method _EmployeesAttendanceQueryBuilder whereUpdatedAt($value)
	 * @method EmployeesAttendance baseSole(array|string $columns = [ '*' ])
	 * @method EmployeesAttendance create(array $attributes = [])
	 * @method _EmployeesAttendanceCollection|EmployeesAttendance[] cursor()
	 * @method EmployeesAttendance|null find($id, array $columns = [ '*' ])
	 * @method _EmployeesAttendanceCollection|EmployeesAttendance[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method EmployeesAttendance findOrFail($id, array $columns = [ '*' ])
	 * @method _EmployeesAttendanceCollection|EmployeesAttendance[] findOrNew($id, array $columns = [ '*' ])
	 * @method EmployeesAttendance first(array|string $columns = [ '*' ])
	 * @method EmployeesAttendance firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method EmployeesAttendance firstOrCreate(array $attributes = [], array $values = [])
	 * @method EmployeesAttendance firstOrFail(array $columns = [ '*' ])
	 * @method EmployeesAttendance firstOrNew(array $attributes = [], array $values = [])
	 * @method EmployeesAttendance firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method EmployeesAttendance forceCreate(array $attributes)
	 * @method _EmployeesAttendanceCollection|EmployeesAttendance[] fromQuery(string $query, array $bindings = [])
	 * @method _EmployeesAttendanceCollection|EmployeesAttendance[] get(array|string $columns = [ '*' ])
	 * @method EmployeesAttendance getModel()
	 * @method EmployeesAttendance[] getModels(array|string $columns = [ '*' ])
	 * @method _EmployeesAttendanceCollection|EmployeesAttendance[] hydrate(array $items)
	 * @method EmployeesAttendance make(array $attributes = [])
	 * @method EmployeesAttendance newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|EmployeesAttendance[]|_EmployeesAttendanceCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|EmployeesAttendance[]|_EmployeesAttendanceCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method EmployeesAttendance sole(array|string $columns = [ '*' ])
	 * @method EmployeesAttendance updateOrCreate(array $attributes, array $values = [])
	 */
	class _EmployeesAttendanceQueryBuilder extends _BaseBuilder { }

	/**
	 * @method EmployeesDesignation shift()
	 * @method EmployeesDesignation pop()
	 * @method EmployeesDesignation get($key, $default = null)
	 * @method EmployeesDesignation pull($key, $default = null)
	 * @method EmployeesDesignation first(callable $callback = null, $default = null)
	 * @method EmployeesDesignation firstWhere(string $key, $operator = null, $value = null)
	 * @method EmployeesDesignation[] all()
	 * @method EmployeesDesignation last(callable $callback = null, $default = null)
	 * @property-read _EmployeesDesignationCollectionProxy $keyBy
	 * @property-read _EmployeesDesignationCollectionProxy $partition
	 * @property-read _EmployeesDesignationCollectionProxy $max
	 * @property-read _EmployeesDesignationCollectionProxy $flatMap
	 * @property-read _EmployeesDesignationCollectionProxy $each
	 * @property-read _EmployeesDesignationCollectionProxy $map
	 * @property-read _EmployeesDesignationCollectionProxy $filter
	 * @property-read _EmployeesDesignationCollectionProxy $unique
	 * @property-read _EmployeesDesignationCollectionProxy $groupBy
	 * @property-read _EmployeesDesignationCollectionProxy $sortBy
	 * @property-read _EmployeesDesignationCollectionProxy $contains
	 * @property-read _EmployeesDesignationCollectionProxy $sum
	 * @property-read _EmployeesDesignationCollectionProxy $until
	 * @property-read _EmployeesDesignationCollectionProxy $every
	 * @property-read _EmployeesDesignationCollectionProxy $average
	 * @property-read _EmployeesDesignationCollectionProxy $some
	 * @property-read _EmployeesDesignationCollectionProxy $skipWhile
	 * @property-read _EmployeesDesignationCollectionProxy $sortByDesc
	 * @property-read _EmployeesDesignationCollectionProxy $takeUntil
	 * @property-read _EmployeesDesignationCollectionProxy $avg
	 * @property-read _EmployeesDesignationCollectionProxy $skipUntil
	 * @property-read _EmployeesDesignationCollectionProxy $first
	 * @property-read _EmployeesDesignationCollectionProxy $takeWhile
	 * @property-read _EmployeesDesignationCollectionProxy $min
	 * @property-read _EmployeesDesignationCollectionProxy $reject
	 */
	class _EmployeesDesignationCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return EmployeesDesignation[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _EmployeesDesignationCollection|mixed $id
	 * @property _EmployeesDesignationCollection|mixed $name
	 * @property _EmployeesDesignationCollection|mixed $emp_desig_class_id
	 * @property _EmployeesDesignationCollection|mixed $created_at
	 * @property _EmployeesDesignationCollection|mixed $updated_at
	 * @property _EmployeesDesignationCollection|mixed $classification
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _EmployeesDesignationCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _EmployeesDesignationCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _EmployeesDesignationCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _EmployeesDesignationCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _EmployeesDesignationCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _EmployeesDesignationCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _EmployeesDesignationCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _EmployeesDesignationCollectionProxy { }

	/**
	 * @method _EmployeesDesignationQueryBuilder whereId($value)
	 * @method _EmployeesDesignationQueryBuilder whereName($value)
	 * @method _EmployeesDesignationQueryBuilder whereEmpDesigClassId($value)
	 * @method _EmployeesDesignationQueryBuilder whereCreatedAt($value)
	 * @method _EmployeesDesignationQueryBuilder whereUpdatedAt($value)
	 * @method EmployeesDesignation baseSole(array|string $columns = [ '*' ])
	 * @method EmployeesDesignation create(array $attributes = [])
	 * @method _EmployeesDesignationCollection|EmployeesDesignation[] cursor()
	 * @method EmployeesDesignation|null find($id, array $columns = [ '*' ])
	 * @method _EmployeesDesignationCollection|EmployeesDesignation[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method EmployeesDesignation findOrFail($id, array $columns = [ '*' ])
	 * @method _EmployeesDesignationCollection|EmployeesDesignation[] findOrNew($id, array $columns = [ '*' ])
	 * @method EmployeesDesignation first(array|string $columns = [ '*' ])
	 * @method EmployeesDesignation firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method EmployeesDesignation firstOrCreate(array $attributes = [], array $values = [])
	 * @method EmployeesDesignation firstOrFail(array $columns = [ '*' ])
	 * @method EmployeesDesignation firstOrNew(array $attributes = [], array $values = [])
	 * @method EmployeesDesignation firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method EmployeesDesignation forceCreate(array $attributes)
	 * @method _EmployeesDesignationCollection|EmployeesDesignation[] fromQuery(string $query, array $bindings = [])
	 * @method _EmployeesDesignationCollection|EmployeesDesignation[] get(array|string $columns = [ '*' ])
	 * @method EmployeesDesignation getModel()
	 * @method EmployeesDesignation[] getModels(array|string $columns = [ '*' ])
	 * @method _EmployeesDesignationCollection|EmployeesDesignation[] hydrate(array $items)
	 * @method EmployeesDesignation make(array $attributes = [])
	 * @method EmployeesDesignation newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|EmployeesDesignation[]|_EmployeesDesignationCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|EmployeesDesignation[]|_EmployeesDesignationCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method EmployeesDesignation sole(array|string $columns = [ '*' ])
	 * @method EmployeesDesignation updateOrCreate(array $attributes, array $values = [])
	 */
	class _EmployeesDesignationQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\App\Domain\Expense\Models {

    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use App\Domain\Expense\Models\Expense;
    use LaravelIdea\Helper\_BaseCollection;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use App\Domain\Expense\Models\ExpenseCategory;
    use Illuminate\Pagination\LengthAwarePaginator;
    use App\Domain\Expense\Models\ExpenseIndividual;
    use App\Domain\Expense\Models\ExpenseCategoryType;

    /**
	 * @method ExpenseCategory shift()
	 * @method ExpenseCategory pop()
	 * @method ExpenseCategory get($key, $default = null)
	 * @method ExpenseCategory pull($key, $default = null)
	 * @method ExpenseCategory first(callable $callback = null, $default = null)
	 * @method ExpenseCategory firstWhere(string $key, $operator = null, $value = null)
	 * @method ExpenseCategory[] all()
	 * @method ExpenseCategory last(callable $callback = null, $default = null)
	 * @property-read _ExpenseCategoryCollectionProxy $keyBy
	 * @property-read _ExpenseCategoryCollectionProxy $partition
	 * @property-read _ExpenseCategoryCollectionProxy $max
	 * @property-read _ExpenseCategoryCollectionProxy $flatMap
	 * @property-read _ExpenseCategoryCollectionProxy $each
	 * @property-read _ExpenseCategoryCollectionProxy $map
	 * @property-read _ExpenseCategoryCollectionProxy $filter
	 * @property-read _ExpenseCategoryCollectionProxy $unique
	 * @property-read _ExpenseCategoryCollectionProxy $groupBy
	 * @property-read _ExpenseCategoryCollectionProxy $sortBy
	 * @property-read _ExpenseCategoryCollectionProxy $contains
	 * @property-read _ExpenseCategoryCollectionProxy $sum
	 * @property-read _ExpenseCategoryCollectionProxy $until
	 * @property-read _ExpenseCategoryCollectionProxy $every
	 * @property-read _ExpenseCategoryCollectionProxy $average
	 * @property-read _ExpenseCategoryCollectionProxy $some
	 * @property-read _ExpenseCategoryCollectionProxy $skipWhile
	 * @property-read _ExpenseCategoryCollectionProxy $sortByDesc
	 * @property-read _ExpenseCategoryCollectionProxy $takeUntil
	 * @property-read _ExpenseCategoryCollectionProxy $avg
	 * @property-read _ExpenseCategoryCollectionProxy $skipUntil
	 * @property-read _ExpenseCategoryCollectionProxy $first
	 * @property-read _ExpenseCategoryCollectionProxy $takeWhile
	 * @property-read _ExpenseCategoryCollectionProxy $min
	 * @property-read _ExpenseCategoryCollectionProxy $reject
	 */
	class _ExpenseCategoryCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return ExpenseCategory[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _ExpenseCategoryCollection|mixed $id
	 * @property _ExpenseCategoryCollection|mixed $name
	 * @property _ExpenseCategoryCollection|mixed $expense_category_type_id
	 * @property _ExpenseCategoryCollection|mixed $created_at
	 * @property _ExpenseCategoryCollection|mixed $updated_at
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _ExpenseCategoryCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _ExpenseCategoryCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _ExpenseCategoryCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _ExpenseCategoryCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _ExpenseCategoryCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _ExpenseCategoryCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _ExpenseCategoryCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _ExpenseCategoryCollectionProxy { }

	/**
	 * @method _ExpenseCategoryQueryBuilder whereId($value)
	 * @method _ExpenseCategoryQueryBuilder whereName($value)
	 * @method _ExpenseCategoryQueryBuilder whereExpenseCategoryTypeId($value)
	 * @method _ExpenseCategoryQueryBuilder whereCreatedAt($value)
	 * @method _ExpenseCategoryQueryBuilder whereUpdatedAt($value)
	 * @method ExpenseCategory baseSole(array|string $columns = [ '*' ])
	 * @method ExpenseCategory create(array $attributes = [])
	 * @method _ExpenseCategoryCollection|ExpenseCategory[] cursor()
	 * @method ExpenseCategory|null find($id, array $columns = [ '*' ])
	 * @method _ExpenseCategoryCollection|ExpenseCategory[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method ExpenseCategory findOrFail($id, array $columns = [ '*' ])
	 * @method _ExpenseCategoryCollection|ExpenseCategory[] findOrNew($id, array $columns = [ '*' ])
	 * @method ExpenseCategory first(array|string $columns = [ '*' ])
	 * @method ExpenseCategory firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method ExpenseCategory firstOrCreate(array $attributes = [], array $values = [])
	 * @method ExpenseCategory firstOrFail(array $columns = [ '*' ])
	 * @method ExpenseCategory firstOrNew(array $attributes = [], array $values = [])
	 * @method ExpenseCategory firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method ExpenseCategory forceCreate(array $attributes)
	 * @method _ExpenseCategoryCollection|ExpenseCategory[] fromQuery(string $query, array $bindings = [])
	 * @method _ExpenseCategoryCollection|ExpenseCategory[] get(array|string $columns = [ '*' ])
	 * @method ExpenseCategory getModel()
	 * @method ExpenseCategory[] getModels(array|string $columns = [ '*' ])
	 * @method _ExpenseCategoryCollection|ExpenseCategory[] hydrate(array $items)
	 * @method ExpenseCategory make(array $attributes = [])
	 * @method ExpenseCategory newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|ExpenseCategory[]|_ExpenseCategoryCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|ExpenseCategory[]|_ExpenseCategoryCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method ExpenseCategory sole(array|string $columns = [ '*' ])
	 * @method ExpenseCategory updateOrCreate(array $attributes, array $values = [])
	 */
	class _ExpenseCategoryQueryBuilder extends _BaseBuilder { }

	/**
	 * @method ExpenseCategoryType shift()
	 * @method ExpenseCategoryType pop()
	 * @method ExpenseCategoryType get($key, $default = null)
	 * @method ExpenseCategoryType pull($key, $default = null)
	 * @method ExpenseCategoryType first(callable $callback = null, $default = null)
	 * @method ExpenseCategoryType firstWhere(string $key, $operator = null, $value = null)
	 * @method ExpenseCategoryType[] all()
	 * @method ExpenseCategoryType last(callable $callback = null, $default = null)
	 * @property-read _ExpenseCategoryTypeCollectionProxy $keyBy
	 * @property-read _ExpenseCategoryTypeCollectionProxy $partition
	 * @property-read _ExpenseCategoryTypeCollectionProxy $max
	 * @property-read _ExpenseCategoryTypeCollectionProxy $flatMap
	 * @property-read _ExpenseCategoryTypeCollectionProxy $each
	 * @property-read _ExpenseCategoryTypeCollectionProxy $map
	 * @property-read _ExpenseCategoryTypeCollectionProxy $filter
	 * @property-read _ExpenseCategoryTypeCollectionProxy $unique
	 * @property-read _ExpenseCategoryTypeCollectionProxy $groupBy
	 * @property-read _ExpenseCategoryTypeCollectionProxy $sortBy
	 * @property-read _ExpenseCategoryTypeCollectionProxy $contains
	 * @property-read _ExpenseCategoryTypeCollectionProxy $sum
	 * @property-read _ExpenseCategoryTypeCollectionProxy $until
	 * @property-read _ExpenseCategoryTypeCollectionProxy $every
	 * @property-read _ExpenseCategoryTypeCollectionProxy $average
	 * @property-read _ExpenseCategoryTypeCollectionProxy $some
	 * @property-read _ExpenseCategoryTypeCollectionProxy $skipWhile
	 * @property-read _ExpenseCategoryTypeCollectionProxy $sortByDesc
	 * @property-read _ExpenseCategoryTypeCollectionProxy $takeUntil
	 * @property-read _ExpenseCategoryTypeCollectionProxy $avg
	 * @property-read _ExpenseCategoryTypeCollectionProxy $skipUntil
	 * @property-read _ExpenseCategoryTypeCollectionProxy $first
	 * @property-read _ExpenseCategoryTypeCollectionProxy $takeWhile
	 * @property-read _ExpenseCategoryTypeCollectionProxy $min
	 * @property-read _ExpenseCategoryTypeCollectionProxy $reject
	 */
	class _ExpenseCategoryTypeCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return ExpenseCategoryType[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _ExpenseCategoryTypeCollection|mixed $id
	 * @property _ExpenseCategoryTypeCollection|mixed $name
	 * @property _ExpenseCategoryTypeCollection|mixed $created_at
	 * @property _ExpenseCategoryTypeCollection|mixed $updated_at
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _ExpenseCategoryTypeCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _ExpenseCategoryTypeCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _ExpenseCategoryTypeCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _ExpenseCategoryTypeCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _ExpenseCategoryTypeCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _ExpenseCategoryTypeCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _ExpenseCategoryTypeCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _ExpenseCategoryTypeCollectionProxy { }

	/**
	 * @method _ExpenseCategoryTypeQueryBuilder whereId($value)
	 * @method _ExpenseCategoryTypeQueryBuilder whereName($value)
	 * @method _ExpenseCategoryTypeQueryBuilder whereCreatedAt($value)
	 * @method _ExpenseCategoryTypeQueryBuilder whereUpdatedAt($value)
	 * @method ExpenseCategoryType baseSole(array|string $columns = [ '*' ])
	 * @method ExpenseCategoryType create(array $attributes = [])
	 * @method _ExpenseCategoryTypeCollection|ExpenseCategoryType[] cursor()
	 * @method ExpenseCategoryType|null find($id, array $columns = [ '*' ])
	 * @method _ExpenseCategoryTypeCollection|ExpenseCategoryType[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method ExpenseCategoryType findOrFail($id, array $columns = [ '*' ])
	 * @method _ExpenseCategoryTypeCollection|ExpenseCategoryType[] findOrNew($id, array $columns = [ '*' ])
	 * @method ExpenseCategoryType first(array|string $columns = [ '*' ])
	 * @method ExpenseCategoryType firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method ExpenseCategoryType firstOrCreate(array $attributes = [], array $values = [])
	 * @method ExpenseCategoryType firstOrFail(array $columns = [ '*' ])
	 * @method ExpenseCategoryType firstOrNew(array $attributes = [], array $values = [])
	 * @method ExpenseCategoryType firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method ExpenseCategoryType forceCreate(array $attributes)
	 * @method _ExpenseCategoryTypeCollection|ExpenseCategoryType[] fromQuery(string $query, array $bindings = [])
	 * @method _ExpenseCategoryTypeCollection|ExpenseCategoryType[] get(array|string $columns = [ '*' ])
	 * @method ExpenseCategoryType getModel()
	 * @method ExpenseCategoryType[] getModels(array|string $columns = [ '*' ])
	 * @method _ExpenseCategoryTypeCollection|ExpenseCategoryType[] hydrate(array $items)
	 * @method ExpenseCategoryType make(array $attributes = [])
	 * @method ExpenseCategoryType newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|ExpenseCategoryType[]|_ExpenseCategoryTypeCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|ExpenseCategoryType[]|_ExpenseCategoryTypeCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method ExpenseCategoryType sole(array|string $columns = [ '*' ])
	 * @method ExpenseCategoryType updateOrCreate(array $attributes, array $values = [])
	 */
	class _ExpenseCategoryTypeQueryBuilder extends _BaseBuilder { }

	/**
	 * @method Expense shift()
	 * @method Expense pop()
	 * @method Expense get($key, $default = null)
	 * @method Expense pull($key, $default = null)
	 * @method Expense first(callable $callback = null, $default = null)
	 * @method Expense firstWhere(string $key, $operator = null, $value = null)
	 * @method Expense[] all()
	 * @method Expense last(callable $callback = null, $default = null)
	 * @property-read _ExpenseCollectionProxy $keyBy
	 * @property-read _ExpenseCollectionProxy $partition
	 * @property-read _ExpenseCollectionProxy $max
	 * @property-read _ExpenseCollectionProxy $flatMap
	 * @property-read _ExpenseCollectionProxy $each
	 * @property-read _ExpenseCollectionProxy $map
	 * @property-read _ExpenseCollectionProxy $filter
	 * @property-read _ExpenseCollectionProxy $unique
	 * @property-read _ExpenseCollectionProxy $groupBy
	 * @property-read _ExpenseCollectionProxy $sortBy
	 * @property-read _ExpenseCollectionProxy $contains
	 * @property-read _ExpenseCollectionProxy $sum
	 * @property-read _ExpenseCollectionProxy $until
	 * @property-read _ExpenseCollectionProxy $every
	 * @property-read _ExpenseCollectionProxy $average
	 * @property-read _ExpenseCollectionProxy $some
	 * @property-read _ExpenseCollectionProxy $skipWhile
	 * @property-read _ExpenseCollectionProxy $sortByDesc
	 * @property-read _ExpenseCollectionProxy $takeUntil
	 * @property-read _ExpenseCollectionProxy $avg
	 * @property-read _ExpenseCollectionProxy $skipUntil
	 * @property-read _ExpenseCollectionProxy $first
	 * @property-read _ExpenseCollectionProxy $takeWhile
	 * @property-read _ExpenseCollectionProxy $min
	 * @property-read _ExpenseCollectionProxy $reject
	 */
	class _ExpenseCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Expense[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _ExpenseCollection|mixed $id
	 * @property _ExpenseCollection|mixed $date
	 * @property _ExpenseCollection|mixed $amount
	 * @property _ExpenseCollection|mixed $remark
	 * @property _ExpenseCollection|mixed $expense_category_id
	 * @property _ExpenseCollection|mixed $expense_individual_id
	 * @property _ExpenseCollection|mixed $office_id
	 * @property _ExpenseCollection|mixed $company_id
	 * @property _ExpenseCollection|mixed $payment_method_id
	 * @property _ExpenseCollection|mixed $created_at
	 * @property _ExpenseCollection|mixed $updated_at
	 * @property _ExpenseCollection|mixed $category
	 * @property _ExpenseCollection|mixed $office
	 * @property _ExpenseCollection|mixed $payment_method
	 * @see \App\Domain\Expense\Models\Expense::setDateAttribute
	 * @method _ExpenseCollection setDateAttribute($value)
	 * @see \App\Domain\Expense\Models\Expense::receipt
	 * @method _ExpenseCollection receipt()
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _ExpenseCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _ExpenseCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _ExpenseCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _ExpenseCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _ExpenseCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _ExpenseCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _ExpenseCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _ExpenseCollectionProxy { }

	/**
	 * @method ExpenseIndividual shift()
	 * @method ExpenseIndividual pop()
	 * @method ExpenseIndividual get($key, $default = null)
	 * @method ExpenseIndividual pull($key, $default = null)
	 * @method ExpenseIndividual first(callable $callback = null, $default = null)
	 * @method ExpenseIndividual firstWhere(string $key, $operator = null, $value = null)
	 * @method ExpenseIndividual[] all()
	 * @method ExpenseIndividual last(callable $callback = null, $default = null)
	 * @property-read _ExpenseIndividualCollectionProxy $keyBy
	 * @property-read _ExpenseIndividualCollectionProxy $partition
	 * @property-read _ExpenseIndividualCollectionProxy $max
	 * @property-read _ExpenseIndividualCollectionProxy $flatMap
	 * @property-read _ExpenseIndividualCollectionProxy $each
	 * @property-read _ExpenseIndividualCollectionProxy $map
	 * @property-read _ExpenseIndividualCollectionProxy $filter
	 * @property-read _ExpenseIndividualCollectionProxy $unique
	 * @property-read _ExpenseIndividualCollectionProxy $groupBy
	 * @property-read _ExpenseIndividualCollectionProxy $sortBy
	 * @property-read _ExpenseIndividualCollectionProxy $contains
	 * @property-read _ExpenseIndividualCollectionProxy $sum
	 * @property-read _ExpenseIndividualCollectionProxy $until
	 * @property-read _ExpenseIndividualCollectionProxy $every
	 * @property-read _ExpenseIndividualCollectionProxy $average
	 * @property-read _ExpenseIndividualCollectionProxy $some
	 * @property-read _ExpenseIndividualCollectionProxy $skipWhile
	 * @property-read _ExpenseIndividualCollectionProxy $sortByDesc
	 * @property-read _ExpenseIndividualCollectionProxy $takeUntil
	 * @property-read _ExpenseIndividualCollectionProxy $avg
	 * @property-read _ExpenseIndividualCollectionProxy $skipUntil
	 * @property-read _ExpenseIndividualCollectionProxy $first
	 * @property-read _ExpenseIndividualCollectionProxy $takeWhile
	 * @property-read _ExpenseIndividualCollectionProxy $min
	 * @property-read _ExpenseIndividualCollectionProxy $reject
	 */
	class _ExpenseIndividualCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return ExpenseIndividual[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _ExpenseIndividualCollection|mixed $id
	 * @property _ExpenseIndividualCollection|mixed $name
	 * @property _ExpenseIndividualCollection|mixed $company_id
	 * @property _ExpenseIndividualCollection|mixed $created_at
	 * @property _ExpenseIndividualCollection|mixed $updated_at
	 * @property _ExpenseIndividualCollection|mixed $company
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _ExpenseIndividualCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _ExpenseIndividualCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _ExpenseIndividualCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _ExpenseIndividualCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _ExpenseIndividualCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _ExpenseIndividualCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _ExpenseIndividualCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _ExpenseIndividualCollectionProxy { }

	/**
	 * @method _ExpenseIndividualQueryBuilder whereId($value)
	 * @method _ExpenseIndividualQueryBuilder whereName($value)
	 * @method _ExpenseIndividualQueryBuilder whereCompanyId($value)
	 * @method _ExpenseIndividualQueryBuilder whereCreatedAt($value)
	 * @method _ExpenseIndividualQueryBuilder whereUpdatedAt($value)
	 * @method ExpenseIndividual baseSole(array|string $columns = [ '*' ])
	 * @method ExpenseIndividual create(array $attributes = [])
	 * @method _ExpenseIndividualCollection|ExpenseIndividual[] cursor()
	 * @method ExpenseIndividual|null find($id, array $columns = [ '*' ])
	 * @method _ExpenseIndividualCollection|ExpenseIndividual[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method ExpenseIndividual findOrFail($id, array $columns = [ '*' ])
	 * @method _ExpenseIndividualCollection|ExpenseIndividual[] findOrNew($id, array $columns = [ '*' ])
	 * @method ExpenseIndividual first(array|string $columns = [ '*' ])
	 * @method ExpenseIndividual firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method ExpenseIndividual firstOrCreate(array $attributes = [], array $values = [])
	 * @method ExpenseIndividual firstOrFail(array $columns = [ '*' ])
	 * @method ExpenseIndividual firstOrNew(array $attributes = [], array $values = [])
	 * @method ExpenseIndividual firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method ExpenseIndividual forceCreate(array $attributes)
	 * @method _ExpenseIndividualCollection|ExpenseIndividual[] fromQuery(string $query, array $bindings = [])
	 * @method _ExpenseIndividualCollection|ExpenseIndividual[] get(array|string $columns = [ '*' ])
	 * @method ExpenseIndividual getModel()
	 * @method ExpenseIndividual[] getModels(array|string $columns = [ '*' ])
	 * @method _ExpenseIndividualCollection|ExpenseIndividual[] hydrate(array $items)
	 * @method ExpenseIndividual make(array $attributes = [])
	 * @method ExpenseIndividual newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|ExpenseIndividual[]|_ExpenseIndividualCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|ExpenseIndividual[]|_ExpenseIndividualCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method ExpenseIndividual sole(array|string $columns = [ '*' ])
	 * @method ExpenseIndividual updateOrCreate(array $attributes, array $values = [])
	 */
	class _ExpenseIndividualQueryBuilder extends _BaseBuilder { }

	/**
	 * @method _ExpenseQueryBuilder whereId($value)
	 * @method _ExpenseQueryBuilder whereDate($value)
	 * @method _ExpenseQueryBuilder whereAmount($value)
	 * @method _ExpenseQueryBuilder whereRemark($value)
	 * @method _ExpenseQueryBuilder whereExpenseCategoryId($value)
	 * @method _ExpenseQueryBuilder whereExpenseIndividualId($value)
	 * @method _ExpenseQueryBuilder whereOfficeId($value)
	 * @method _ExpenseQueryBuilder whereCompanyId($value)
	 * @method _ExpenseQueryBuilder wherePaymentMethodId($value)
	 * @method _ExpenseQueryBuilder whereCreatedAt($value)
	 * @method _ExpenseQueryBuilder whereUpdatedAt($value)
	 * @method Expense baseSole(array|string $columns = [ '*' ])
	 * @method Expense create(array $attributes = [])
	 * @method _ExpenseCollection|Expense[] cursor()
	 * @method Expense|null find($id, array $columns = [ '*' ])
	 * @method _ExpenseCollection|Expense[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Expense findOrFail($id, array $columns = [ '*' ])
	 * @method _ExpenseCollection|Expense[] findOrNew($id, array $columns = [ '*' ])
	 * @method Expense first(array|string $columns = [ '*' ])
	 * @method Expense firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Expense firstOrCreate(array $attributes = [], array $values = [])
	 * @method Expense firstOrFail(array $columns = [ '*' ])
	 * @method Expense firstOrNew(array $attributes = [], array $values = [])
	 * @method Expense firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Expense forceCreate(array $attributes)
	 * @method _ExpenseCollection|Expense[] fromQuery(string $query, array $bindings = [])
	 * @method _ExpenseCollection|Expense[] get(array|string $columns = [ '*' ])
	 * @method Expense getModel()
	 * @method Expense[] getModels(array|string $columns = [ '*' ])
	 * @method _ExpenseCollection|Expense[] hydrate(array $items)
	 * @method Expense make(array $attributes = [])
	 * @method Expense newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Expense[]|_ExpenseCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Expense[]|_ExpenseCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Expense sole(array|string $columns = [ '*' ])
	 * @method Expense updateOrCreate(array $attributes, array $values = [])
	 */
	class _ExpenseQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\App\Domain\Fleet\Models {

    use App\Domain\Fleet\Models\Fleet;
    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use App\Domain\Fleet\Models\FleetLive;
    use LaravelIdea\Helper\_BaseCollection;
    use App\Domain\Fleet\Models\FleetVehicle;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use App\Domain\Fleet\Models\FleetMaintenance;
    use App\Domain\Fleet\Models\FleetTripCatcher;
    use Illuminate\Pagination\LengthAwarePaginator;
    use App\Domain\Fleet\Models\FleetDailyInspection;

    /**
	 * @method Fleet shift()
	 * @method Fleet pop()
	 * @method Fleet get($key, $default = null)
	 * @method Fleet pull($key, $default = null)
	 * @method Fleet first(callable $callback = null, $default = null)
	 * @method Fleet firstWhere(string $key, $operator = null, $value = null)
	 * @method Fleet[] all()
	 * @method Fleet last(callable $callback = null, $default = null)
	 * @property-read _FleetCollectionProxy $keyBy
	 * @property-read _FleetCollectionProxy $partition
	 * @property-read _FleetCollectionProxy $max
	 * @property-read _FleetCollectionProxy $flatMap
	 * @property-read _FleetCollectionProxy $each
	 * @property-read _FleetCollectionProxy $map
	 * @property-read _FleetCollectionProxy $filter
	 * @property-read _FleetCollectionProxy $unique
	 * @property-read _FleetCollectionProxy $groupBy
	 * @property-read _FleetCollectionProxy $sortBy
	 * @property-read _FleetCollectionProxy $contains
	 * @property-read _FleetCollectionProxy $sum
	 * @property-read _FleetCollectionProxy $until
	 * @property-read _FleetCollectionProxy $every
	 * @property-read _FleetCollectionProxy $average
	 * @property-read _FleetCollectionProxy $some
	 * @property-read _FleetCollectionProxy $skipWhile
	 * @property-read _FleetCollectionProxy $sortByDesc
	 * @property-read _FleetCollectionProxy $takeUntil
	 * @property-read _FleetCollectionProxy $avg
	 * @property-read _FleetCollectionProxy $skipUntil
	 * @property-read _FleetCollectionProxy $first
	 * @property-read _FleetCollectionProxy $takeWhile
	 * @property-read _FleetCollectionProxy $min
	 * @property-read _FleetCollectionProxy $reject
	 */
	class _FleetCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Fleet[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _FleetCollection|mixed $id
	 * @property _FleetCollection|mixed $name
	 * @property _FleetCollection|mixed $company_id
	 * @property _FleetCollection|mixed $created_at
	 * @property _FleetCollection|mixed $updated_at
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _FleetCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _FleetCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _FleetCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _FleetCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _FleetCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _FleetCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _FleetCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _FleetCollectionProxy { }

	/**
	 * @method FleetDailyInspection shift()
	 * @method FleetDailyInspection pop()
	 * @method FleetDailyInspection get($key, $default = null)
	 * @method FleetDailyInspection pull($key, $default = null)
	 * @method FleetDailyInspection first(callable $callback = null, $default = null)
	 * @method FleetDailyInspection firstWhere(string $key, $operator = null, $value = null)
	 * @method FleetDailyInspection[] all()
	 * @method FleetDailyInspection last(callable $callback = null, $default = null)
	 * @property-read _FleetDailyInspectionCollectionProxy $keyBy
	 * @property-read _FleetDailyInspectionCollectionProxy $partition
	 * @property-read _FleetDailyInspectionCollectionProxy $max
	 * @property-read _FleetDailyInspectionCollectionProxy $flatMap
	 * @property-read _FleetDailyInspectionCollectionProxy $each
	 * @property-read _FleetDailyInspectionCollectionProxy $map
	 * @property-read _FleetDailyInspectionCollectionProxy $filter
	 * @property-read _FleetDailyInspectionCollectionProxy $unique
	 * @property-read _FleetDailyInspectionCollectionProxy $groupBy
	 * @property-read _FleetDailyInspectionCollectionProxy $sortBy
	 * @property-read _FleetDailyInspectionCollectionProxy $contains
	 * @property-read _FleetDailyInspectionCollectionProxy $sum
	 * @property-read _FleetDailyInspectionCollectionProxy $until
	 * @property-read _FleetDailyInspectionCollectionProxy $every
	 * @property-read _FleetDailyInspectionCollectionProxy $average
	 * @property-read _FleetDailyInspectionCollectionProxy $some
	 * @property-read _FleetDailyInspectionCollectionProxy $skipWhile
	 * @property-read _FleetDailyInspectionCollectionProxy $sortByDesc
	 * @property-read _FleetDailyInspectionCollectionProxy $takeUntil
	 * @property-read _FleetDailyInspectionCollectionProxy $avg
	 * @property-read _FleetDailyInspectionCollectionProxy $skipUntil
	 * @property-read _FleetDailyInspectionCollectionProxy $first
	 * @property-read _FleetDailyInspectionCollectionProxy $takeWhile
	 * @property-read _FleetDailyInspectionCollectionProxy $min
	 * @property-read _FleetDailyInspectionCollectionProxy $reject
	 */
	class _FleetDailyInspectionCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return FleetDailyInspection[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _FleetDailyInspectionCollection|mixed $air_filter
	 * @property _FleetDailyInspectionCollection|mixed $air_filter_charge
	 * @property _FleetDailyInspectionCollection|mixed $grease
	 * @property _FleetDailyInspectionCollection|mixed $grease_charge
	 * @property _FleetDailyInspectionCollection|mixed $tyre_repair
	 * @property _FleetDailyInspectionCollection|mixed $tyre_repair_charge
	 * @property _FleetDailyInspectionCollection|mixed $urea
	 * @property _FleetDailyInspectionCollection|mixed $urea_amount
	 * @property _FleetDailyInspectionCollection|mixed $urea_charge
	 * @property _FleetDailyInspectionCollection|mixed $misc
	 * @property _FleetDailyInspectionCollection|mixed $misc_charge
	 * @property _FleetDailyInspectionCollection|mixed $misc_remark
	 * @property _FleetDailyInspectionCollection|mixed $total
	 * @property _FleetDailyInspectionCollection|mixed $created_at
	 * @property _FleetDailyInspectionCollection|mixed $updated_at
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _FleetDailyInspectionCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _FleetDailyInspectionCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _FleetDailyInspectionCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _FleetDailyInspectionCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _FleetDailyInspectionCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _FleetDailyInspectionCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _FleetDailyInspectionCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _FleetDailyInspectionCollectionProxy { }

	/**
	 * @method _FleetDailyInspectionQueryBuilder whereAirFilter($value)
	 * @method _FleetDailyInspectionQueryBuilder whereAirFilterCharge($value)
	 * @method _FleetDailyInspectionQueryBuilder whereGrease($value)
	 * @method _FleetDailyInspectionQueryBuilder whereGreaseCharge($value)
	 * @method _FleetDailyInspectionQueryBuilder whereTyreRepair($value)
	 * @method _FleetDailyInspectionQueryBuilder whereTyreRepairCharge($value)
	 * @method _FleetDailyInspectionQueryBuilder whereUrea($value)
	 * @method _FleetDailyInspectionQueryBuilder whereUreaAmount($value)
	 * @method _FleetDailyInspectionQueryBuilder whereUreaCharge($value)
	 * @method _FleetDailyInspectionQueryBuilder whereMisc($value)
	 * @method _FleetDailyInspectionQueryBuilder whereMiscCharge($value)
	 * @method _FleetDailyInspectionQueryBuilder whereMiscRemark($value)
	 * @method _FleetDailyInspectionQueryBuilder whereTotal($value)
	 * @method _FleetDailyInspectionQueryBuilder whereCreatedAt($value)
	 * @method _FleetDailyInspectionQueryBuilder whereUpdatedAt($value)
	 * @method FleetDailyInspection baseSole(array|string $columns = [ '*' ])
	 * @method FleetDailyInspection create(array $attributes = [])
	 * @method _FleetDailyInspectionCollection|FleetDailyInspection[] cursor()
	 * @method FleetDailyInspection|null find($id, array $columns = [ '*' ])
	 * @method _FleetDailyInspectionCollection|FleetDailyInspection[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method FleetDailyInspection findOrFail($id, array $columns = [ '*' ])
	 * @method _FleetDailyInspectionCollection|FleetDailyInspection[] findOrNew($id, array $columns = [ '*' ])
	 * @method FleetDailyInspection first(array|string $columns = [ '*' ])
	 * @method FleetDailyInspection firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method FleetDailyInspection firstOrCreate(array $attributes = [], array $values = [])
	 * @method FleetDailyInspection firstOrFail(array $columns = [ '*' ])
	 * @method FleetDailyInspection firstOrNew(array $attributes = [], array $values = [])
	 * @method FleetDailyInspection firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method FleetDailyInspection forceCreate(array $attributes)
	 * @method _FleetDailyInspectionCollection|FleetDailyInspection[] fromQuery(string $query, array $bindings = [])
	 * @method _FleetDailyInspectionCollection|FleetDailyInspection[] get(array|string $columns = [ '*' ])
	 * @method FleetDailyInspection getModel()
	 * @method FleetDailyInspection[] getModels(array|string $columns = [ '*' ])
	 * @method _FleetDailyInspectionCollection|FleetDailyInspection[] hydrate(array $items)
	 * @method FleetDailyInspection make(array $attributes = [])
	 * @method FleetDailyInspection newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|FleetDailyInspection[]|_FleetDailyInspectionCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|FleetDailyInspection[]|_FleetDailyInspectionCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method FleetDailyInspection sole(array|string $columns = [ '*' ])
	 * @method FleetDailyInspection updateOrCreate(array $attributes, array $values = [])
	 */
	class _FleetDailyInspectionQueryBuilder extends _BaseBuilder { }

	/**
	 * @method FleetLive shift()
	 * @method FleetLive pop()
	 * @method FleetLive get($key, $default = null)
	 * @method FleetLive pull($key, $default = null)
	 * @method FleetLive first(callable $callback = null, $default = null)
	 * @method FleetLive firstWhere(string $key, $operator = null, $value = null)
	 * @method FleetLive[] all()
	 * @method FleetLive last(callable $callback = null, $default = null)
	 * @property-read _FleetLiveCollectionProxy $keyBy
	 * @property-read _FleetLiveCollectionProxy $partition
	 * @property-read _FleetLiveCollectionProxy $max
	 * @property-read _FleetLiveCollectionProxy $flatMap
	 * @property-read _FleetLiveCollectionProxy $each
	 * @property-read _FleetLiveCollectionProxy $map
	 * @property-read _FleetLiveCollectionProxy $filter
	 * @property-read _FleetLiveCollectionProxy $unique
	 * @property-read _FleetLiveCollectionProxy $groupBy
	 * @property-read _FleetLiveCollectionProxy $sortBy
	 * @property-read _FleetLiveCollectionProxy $contains
	 * @property-read _FleetLiveCollectionProxy $sum
	 * @property-read _FleetLiveCollectionProxy $until
	 * @property-read _FleetLiveCollectionProxy $every
	 * @property-read _FleetLiveCollectionProxy $average
	 * @property-read _FleetLiveCollectionProxy $some
	 * @property-read _FleetLiveCollectionProxy $skipWhile
	 * @property-read _FleetLiveCollectionProxy $sortByDesc
	 * @property-read _FleetLiveCollectionProxy $takeUntil
	 * @property-read _FleetLiveCollectionProxy $avg
	 * @property-read _FleetLiveCollectionProxy $skipUntil
	 * @property-read _FleetLiveCollectionProxy $first
	 * @property-read _FleetLiveCollectionProxy $takeWhile
	 * @property-read _FleetLiveCollectionProxy $min
	 * @property-read _FleetLiveCollectionProxy $reject
	 */
	class _FleetLiveCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return FleetLive[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _FleetLiveCollection|mixed $id
	 * @property _FleetLiveCollection|mixed $outtype
	 * @property _FleetLiveCollection|mixed $ttime
	 * @property _FleetLiveCollection|mixed $rectime
	 * @property _FleetLiveCollection|mixed $trips
	 * @property _FleetLiveCollection|mixed $rdev
	 * @property _FleetLiveCollection|mixed $mineral
	 * @property _FleetLiveCollection|mixed $sourcecode
	 * @property _FleetLiveCollection|mixed $lessycode
	 * @property _FleetLiveCollection|mixed $vehiclespeed
	 * @property _FleetLiveCollection|mixed $ignumber
	 * @property _FleetLiveCollection|mixed $gpsstatus
	 * @property _FleetLiveCollection|mixed $circle
	 * @property _FleetLiveCollection|mixed $starttime
	 * @property _FleetLiveCollection|mixed $endtime
	 * @property _FleetLiveCollection|mixed $destination
	 * @property _FleetLiveCollection|mixed $routename
	 * @property _FleetLiveCollection|mixed $latitude
	 * @property _FleetLiveCollection|mixed $longitude
	 * @property _FleetLiveCollection|mixed $imeino
	 * @property _FleetLiveCollection|mixed $etpno
	 * @property _FleetLiveCollection|mixed $vehcount
	 * @property _FleetLiveCollection|mixed $tripcount
	 * @property _FleetLiveCollection|mixed $vehicleno
	 * @property _FleetLiveCollection|mixed $outtime
	 * @property _FleetLiveCollection|mixed $intime
	 * @property _FleetLiveCollection|mixed $rdevstarttime
	 * @property _FleetLiveCollection|mixed $rdevendtime
	 * @property _FleetLiveCollection|mixed $rdevtime
	 * @property _FleetLiveCollection|mixed $pollingtime
	 * @property _FleetLiveCollection|mixed $company
	 * @property _FleetLiveCollection|mixed $destcode
	 * @property _FleetLiveCollection|mixed $time
	 * @property _FleetLiveCollection|mixed $index
	 * @property _FleetLiveCollection|mixed $source
	 * @property _FleetLiveCollection|mixed $status
	 * @property _FleetLiveCollection|mixed $location
	 * @property _FleetLiveCollection|mixed $created_at
	 * @property _FleetLiveCollection|mixed $updated_at
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _FleetLiveCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _FleetLiveCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _FleetLiveCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _FleetLiveCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _FleetLiveCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _FleetLiveCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _FleetLiveCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _FleetLiveCollectionProxy { }

	/**
	 * @method _FleetLiveQueryBuilder whereId($value)
	 * @method _FleetLiveQueryBuilder whereOuttype($value)
	 * @method _FleetLiveQueryBuilder whereTtime($value)
	 * @method _FleetLiveQueryBuilder whereRectime($value)
	 * @method _FleetLiveQueryBuilder whereTrips($value)
	 * @method _FleetLiveQueryBuilder whereRdev($value)
	 * @method _FleetLiveQueryBuilder whereMineral($value)
	 * @method _FleetLiveQueryBuilder whereSourcecode($value)
	 * @method _FleetLiveQueryBuilder whereLessycode($value)
	 * @method _FleetLiveQueryBuilder whereVehiclespeed($value)
	 * @method _FleetLiveQueryBuilder whereIgnumber($value)
	 * @method _FleetLiveQueryBuilder whereGpsstatus($value)
	 * @method _FleetLiveQueryBuilder whereCircle($value)
	 * @method _FleetLiveQueryBuilder whereStarttime($value)
	 * @method _FleetLiveQueryBuilder whereEndtime($value)
	 * @method _FleetLiveQueryBuilder whereDestination($value)
	 * @method _FleetLiveQueryBuilder whereRoutename($value)
	 * @method _FleetLiveQueryBuilder whereLatitude($value)
	 * @method _FleetLiveQueryBuilder whereLongitude($value)
	 * @method _FleetLiveQueryBuilder whereImeino($value)
	 * @method _FleetLiveQueryBuilder whereEtpno($value)
	 * @method _FleetLiveQueryBuilder whereVehcount($value)
	 * @method _FleetLiveQueryBuilder whereTripcount($value)
	 * @method _FleetLiveQueryBuilder whereVehicleno($value)
	 * @method _FleetLiveQueryBuilder whereOuttime($value)
	 * @method _FleetLiveQueryBuilder whereIntime($value)
	 * @method _FleetLiveQueryBuilder whereRdevstarttime($value)
	 * @method _FleetLiveQueryBuilder whereRdevendtime($value)
	 * @method _FleetLiveQueryBuilder whereRdevtime($value)
	 * @method _FleetLiveQueryBuilder wherePollingtime($value)
	 * @method _FleetLiveQueryBuilder whereCompany($value)
	 * @method _FleetLiveQueryBuilder whereDestcode($value)
	 * @method _FleetLiveQueryBuilder whereTime($value)
	 * @method _FleetLiveQueryBuilder whereIndex($value)
	 * @method _FleetLiveQueryBuilder whereSource($value)
	 * @method _FleetLiveQueryBuilder whereStatus($value)
	 * @method _FleetLiveQueryBuilder whereLocation($value)
	 * @method _FleetLiveQueryBuilder whereCreatedAt($value)
	 * @method _FleetLiveQueryBuilder whereUpdatedAt($value)
	 * @method FleetLive baseSole(array|string $columns = [ '*' ])
	 * @method FleetLive create(array $attributes = [])
	 * @method _FleetLiveCollection|FleetLive[] cursor()
	 * @method FleetLive|null find($id, array $columns = [ '*' ])
	 * @method _FleetLiveCollection|FleetLive[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method FleetLive findOrFail($id, array $columns = [ '*' ])
	 * @method _FleetLiveCollection|FleetLive[] findOrNew($id, array $columns = [ '*' ])
	 * @method FleetLive first(array|string $columns = [ '*' ])
	 * @method FleetLive firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method FleetLive firstOrCreate(array $attributes = [], array $values = [])
	 * @method FleetLive firstOrFail(array $columns = [ '*' ])
	 * @method FleetLive firstOrNew(array $attributes = [], array $values = [])
	 * @method FleetLive firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method FleetLive forceCreate(array $attributes)
	 * @method _FleetLiveCollection|FleetLive[] fromQuery(string $query, array $bindings = [])
	 * @method _FleetLiveCollection|FleetLive[] get(array|string $columns = [ '*' ])
	 * @method FleetLive getModel()
	 * @method FleetLive[] getModels(array|string $columns = [ '*' ])
	 * @method _FleetLiveCollection|FleetLive[] hydrate(array $items)
	 * @method FleetLive make(array $attributes = [])
	 * @method FleetLive newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|FleetLive[]|_FleetLiveCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|FleetLive[]|_FleetLiveCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method FleetLive sole(array|string $columns = [ '*' ])
	 * @method FleetLive updateOrCreate(array $attributes, array $values = [])
	 */
	class _FleetLiveQueryBuilder extends _BaseBuilder { }

	/**
	 * @method FleetMaintenance shift()
	 * @method FleetMaintenance pop()
	 * @method FleetMaintenance get($key, $default = null)
	 * @method FleetMaintenance pull($key, $default = null)
	 * @method FleetMaintenance first(callable $callback = null, $default = null)
	 * @method FleetMaintenance firstWhere(string $key, $operator = null, $value = null)
	 * @method FleetMaintenance[] all()
	 * @method FleetMaintenance last(callable $callback = null, $default = null)
	 * @property-read _FleetMaintenanceCollectionProxy $keyBy
	 * @property-read _FleetMaintenanceCollectionProxy $partition
	 * @property-read _FleetMaintenanceCollectionProxy $max
	 * @property-read _FleetMaintenanceCollectionProxy $flatMap
	 * @property-read _FleetMaintenanceCollectionProxy $each
	 * @property-read _FleetMaintenanceCollectionProxy $map
	 * @property-read _FleetMaintenanceCollectionProxy $filter
	 * @property-read _FleetMaintenanceCollectionProxy $unique
	 * @property-read _FleetMaintenanceCollectionProxy $groupBy
	 * @property-read _FleetMaintenanceCollectionProxy $sortBy
	 * @property-read _FleetMaintenanceCollectionProxy $contains
	 * @property-read _FleetMaintenanceCollectionProxy $sum
	 * @property-read _FleetMaintenanceCollectionProxy $until
	 * @property-read _FleetMaintenanceCollectionProxy $every
	 * @property-read _FleetMaintenanceCollectionProxy $average
	 * @property-read _FleetMaintenanceCollectionProxy $some
	 * @property-read _FleetMaintenanceCollectionProxy $skipWhile
	 * @property-read _FleetMaintenanceCollectionProxy $sortByDesc
	 * @property-read _FleetMaintenanceCollectionProxy $takeUntil
	 * @property-read _FleetMaintenanceCollectionProxy $avg
	 * @property-read _FleetMaintenanceCollectionProxy $skipUntil
	 * @property-read _FleetMaintenanceCollectionProxy $first
	 * @property-read _FleetMaintenanceCollectionProxy $takeWhile
	 * @property-read _FleetMaintenanceCollectionProxy $min
	 * @property-read _FleetMaintenanceCollectionProxy $reject
	 */
	class _FleetMaintenanceCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return FleetMaintenance[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _FleetMaintenanceCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _FleetMaintenanceCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _FleetMaintenanceCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _FleetMaintenanceCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _FleetMaintenanceCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _FleetMaintenanceCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _FleetMaintenanceCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _FleetMaintenanceCollectionProxy { }

	/**
	 * @method FleetMaintenance baseSole(array|string $columns = [ '*' ])
	 * @method FleetMaintenance create(array $attributes = [])
	 * @method _FleetMaintenanceCollection|FleetMaintenance[] cursor()
	 * @method FleetMaintenance|null find($id, array $columns = [ '*' ])
	 * @method _FleetMaintenanceCollection|FleetMaintenance[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method FleetMaintenance findOrFail($id, array $columns = [ '*' ])
	 * @method _FleetMaintenanceCollection|FleetMaintenance[] findOrNew($id, array $columns = [ '*' ])
	 * @method FleetMaintenance first(array|string $columns = [ '*' ])
	 * @method FleetMaintenance firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method FleetMaintenance firstOrCreate(array $attributes = [], array $values = [])
	 * @method FleetMaintenance firstOrFail(array $columns = [ '*' ])
	 * @method FleetMaintenance firstOrNew(array $attributes = [], array $values = [])
	 * @method FleetMaintenance firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method FleetMaintenance forceCreate(array $attributes)
	 * @method _FleetMaintenanceCollection|FleetMaintenance[] fromQuery(string $query, array $bindings = [])
	 * @method _FleetMaintenanceCollection|FleetMaintenance[] get(array|string $columns = [ '*' ])
	 * @method FleetMaintenance getModel()
	 * @method FleetMaintenance[] getModels(array|string $columns = [ '*' ])
	 * @method _FleetMaintenanceCollection|FleetMaintenance[] hydrate(array $items)
	 * @method FleetMaintenance make(array $attributes = [])
	 * @method FleetMaintenance newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|FleetMaintenance[]|_FleetMaintenanceCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|FleetMaintenance[]|_FleetMaintenanceCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method FleetMaintenance sole(array|string $columns = [ '*' ])
	 * @method FleetMaintenance updateOrCreate(array $attributes, array $values = [])
	 */
	class _FleetMaintenanceQueryBuilder extends _BaseBuilder { }

	/**
	 * @method _FleetQueryBuilder whereId($value)
	 * @method _FleetQueryBuilder whereName($value)
	 * @method _FleetQueryBuilder whereCompanyId($value)
	 * @method _FleetQueryBuilder whereCreatedAt($value)
	 * @method _FleetQueryBuilder whereUpdatedAt($value)
	 * @method Fleet baseSole(array|string $columns = [ '*' ])
	 * @method Fleet create(array $attributes = [])
	 * @method _FleetCollection|Fleet[] cursor()
	 * @method Fleet|null find($id, array $columns = [ '*' ])
	 * @method _FleetCollection|Fleet[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Fleet findOrFail($id, array $columns = [ '*' ])
	 * @method _FleetCollection|Fleet[] findOrNew($id, array $columns = [ '*' ])
	 * @method Fleet first(array|string $columns = [ '*' ])
	 * @method Fleet firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Fleet firstOrCreate(array $attributes = [], array $values = [])
	 * @method Fleet firstOrFail(array $columns = [ '*' ])
	 * @method Fleet firstOrNew(array $attributes = [], array $values = [])
	 * @method Fleet firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Fleet forceCreate(array $attributes)
	 * @method _FleetCollection|Fleet[] fromQuery(string $query, array $bindings = [])
	 * @method _FleetCollection|Fleet[] get(array|string $columns = [ '*' ])
	 * @method Fleet getModel()
	 * @method Fleet[] getModels(array|string $columns = [ '*' ])
	 * @method _FleetCollection|Fleet[] hydrate(array $items)
	 * @method Fleet make(array $attributes = [])
	 * @method Fleet newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Fleet[]|_FleetCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Fleet[]|_FleetCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Fleet sole(array|string $columns = [ '*' ])
	 * @method Fleet updateOrCreate(array $attributes, array $values = [])
	 */
	class _FleetQueryBuilder extends _BaseBuilder { }

	/**
	 * @method FleetTripCatcher shift()
	 * @method FleetTripCatcher pop()
	 * @method FleetTripCatcher get($key, $default = null)
	 * @method FleetTripCatcher pull($key, $default = null)
	 * @method FleetTripCatcher first(callable $callback = null, $default = null)
	 * @method FleetTripCatcher firstWhere(string $key, $operator = null, $value = null)
	 * @method FleetTripCatcher[] all()
	 * @method FleetTripCatcher last(callable $callback = null, $default = null)
	 * @property-read _FleetTripCatcherCollectionProxy $keyBy
	 * @property-read _FleetTripCatcherCollectionProxy $partition
	 * @property-read _FleetTripCatcherCollectionProxy $max
	 * @property-read _FleetTripCatcherCollectionProxy $flatMap
	 * @property-read _FleetTripCatcherCollectionProxy $each
	 * @property-read _FleetTripCatcherCollectionProxy $map
	 * @property-read _FleetTripCatcherCollectionProxy $filter
	 * @property-read _FleetTripCatcherCollectionProxy $unique
	 * @property-read _FleetTripCatcherCollectionProxy $groupBy
	 * @property-read _FleetTripCatcherCollectionProxy $sortBy
	 * @property-read _FleetTripCatcherCollectionProxy $contains
	 * @property-read _FleetTripCatcherCollectionProxy $sum
	 * @property-read _FleetTripCatcherCollectionProxy $until
	 * @property-read _FleetTripCatcherCollectionProxy $every
	 * @property-read _FleetTripCatcherCollectionProxy $average
	 * @property-read _FleetTripCatcherCollectionProxy $some
	 * @property-read _FleetTripCatcherCollectionProxy $skipWhile
	 * @property-read _FleetTripCatcherCollectionProxy $sortByDesc
	 * @property-read _FleetTripCatcherCollectionProxy $takeUntil
	 * @property-read _FleetTripCatcherCollectionProxy $avg
	 * @property-read _FleetTripCatcherCollectionProxy $skipUntil
	 * @property-read _FleetTripCatcherCollectionProxy $first
	 * @property-read _FleetTripCatcherCollectionProxy $takeWhile
	 * @property-read _FleetTripCatcherCollectionProxy $min
	 * @property-read _FleetTripCatcherCollectionProxy $reject
	 */
	class _FleetTripCatcherCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return FleetTripCatcher[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _FleetTripCatcherCollection|mixed $id
	 * @property _FleetTripCatcherCollection|mixed $vehicleno
	 * @property _FleetTripCatcherCollection|mixed $etpno
	 * @property _FleetTripCatcherCollection|mixed $source
	 * @property _FleetTripCatcherCollection|mixed $destination
	 * @property _FleetTripCatcherCollection|mixed $starttime
	 * @property _FleetTripCatcherCollection|mixed $pollingtime
	 * @property _FleetTripCatcherCollection|mixed $created_at
	 * @property _FleetTripCatcherCollection|mixed $updated_at
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _FleetTripCatcherCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _FleetTripCatcherCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _FleetTripCatcherCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _FleetTripCatcherCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _FleetTripCatcherCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _FleetTripCatcherCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _FleetTripCatcherCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _FleetTripCatcherCollectionProxy { }

	/**
	 * @method _FleetTripCatcherQueryBuilder whereId($value)
	 * @method _FleetTripCatcherQueryBuilder whereVehicleno($value)
	 * @method _FleetTripCatcherQueryBuilder whereEtpno($value)
	 * @method _FleetTripCatcherQueryBuilder whereSource($value)
	 * @method _FleetTripCatcherQueryBuilder whereDestination($value)
	 * @method _FleetTripCatcherQueryBuilder whereStarttime($value)
	 * @method _FleetTripCatcherQueryBuilder wherePollingtime($value)
	 * @method _FleetTripCatcherQueryBuilder whereCreatedAt($value)
	 * @method _FleetTripCatcherQueryBuilder whereUpdatedAt($value)
	 * @method FleetTripCatcher baseSole(array|string $columns = [ '*' ])
	 * @method FleetTripCatcher create(array $attributes = [])
	 * @method _FleetTripCatcherCollection|FleetTripCatcher[] cursor()
	 * @method FleetTripCatcher|null find($id, array $columns = [ '*' ])
	 * @method _FleetTripCatcherCollection|FleetTripCatcher[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method FleetTripCatcher findOrFail($id, array $columns = [ '*' ])
	 * @method _FleetTripCatcherCollection|FleetTripCatcher[] findOrNew($id, array $columns = [ '*' ])
	 * @method FleetTripCatcher first(array|string $columns = [ '*' ])
	 * @method FleetTripCatcher firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method FleetTripCatcher firstOrCreate(array $attributes = [], array $values = [])
	 * @method FleetTripCatcher firstOrFail(array $columns = [ '*' ])
	 * @method FleetTripCatcher firstOrNew(array $attributes = [], array $values = [])
	 * @method FleetTripCatcher firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method FleetTripCatcher forceCreate(array $attributes)
	 * @method _FleetTripCatcherCollection|FleetTripCatcher[] fromQuery(string $query, array $bindings = [])
	 * @method _FleetTripCatcherCollection|FleetTripCatcher[] get(array|string $columns = [ '*' ])
	 * @method FleetTripCatcher getModel()
	 * @method FleetTripCatcher[] getModels(array|string $columns = [ '*' ])
	 * @method _FleetTripCatcherCollection|FleetTripCatcher[] hydrate(array $items)
	 * @method FleetTripCatcher make(array $attributes = [])
	 * @method FleetTripCatcher newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|FleetTripCatcher[]|_FleetTripCatcherCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|FleetTripCatcher[]|_FleetTripCatcherCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method FleetTripCatcher sole(array|string $columns = [ '*' ])
	 * @method FleetTripCatcher updateOrCreate(array $attributes, array $values = [])
	 */
	class _FleetTripCatcherQueryBuilder extends _BaseBuilder { }

	/**
	 * @method FleetVehicle shift()
	 * @method FleetVehicle pop()
	 * @method FleetVehicle get($key, $default = null)
	 * @method FleetVehicle pull($key, $default = null)
	 * @method FleetVehicle first(callable $callback = null, $default = null)
	 * @method FleetVehicle firstWhere(string $key, $operator = null, $value = null)
	 * @method FleetVehicle[] all()
	 * @method FleetVehicle last(callable $callback = null, $default = null)
	 * @property-read _FleetVehicleCollectionProxy $keyBy
	 * @property-read _FleetVehicleCollectionProxy $partition
	 * @property-read _FleetVehicleCollectionProxy $max
	 * @property-read _FleetVehicleCollectionProxy $flatMap
	 * @property-read _FleetVehicleCollectionProxy $each
	 * @property-read _FleetVehicleCollectionProxy $map
	 * @property-read _FleetVehicleCollectionProxy $filter
	 * @property-read _FleetVehicleCollectionProxy $unique
	 * @property-read _FleetVehicleCollectionProxy $groupBy
	 * @property-read _FleetVehicleCollectionProxy $sortBy
	 * @property-read _FleetVehicleCollectionProxy $contains
	 * @property-read _FleetVehicleCollectionProxy $sum
	 * @property-read _FleetVehicleCollectionProxy $until
	 * @property-read _FleetVehicleCollectionProxy $every
	 * @property-read _FleetVehicleCollectionProxy $average
	 * @property-read _FleetVehicleCollectionProxy $some
	 * @property-read _FleetVehicleCollectionProxy $skipWhile
	 * @property-read _FleetVehicleCollectionProxy $sortByDesc
	 * @property-read _FleetVehicleCollectionProxy $takeUntil
	 * @property-read _FleetVehicleCollectionProxy $avg
	 * @property-read _FleetVehicleCollectionProxy $skipUntil
	 * @property-read _FleetVehicleCollectionProxy $first
	 * @property-read _FleetVehicleCollectionProxy $takeWhile
	 * @property-read _FleetVehicleCollectionProxy $min
	 * @property-read _FleetVehicleCollectionProxy $reject
	 */
	class _FleetVehicleCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return FleetVehicle[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _FleetVehicleCollection|mixed $id
	 * @property _FleetVehicleCollection|mixed $number
	 * @property _FleetVehicleCollection|mixed $fleet_id
	 * @property _FleetVehicleCollection|mixed $owner_name
	 * @property _FleetVehicleCollection|mixed $reg_date
	 * @property _FleetVehicleCollection|mixed $model
	 * @property _FleetVehicleCollection|mixed $fitness_upto
	 * @property _FleetVehicleCollection|mixed $insurance_upto
	 * @property _FleetVehicleCollection|mixed $class
	 * @property _FleetVehicleCollection|mixed $chassis_number
	 * @property _FleetVehicleCollection|mixed $engine_number
	 * @property _FleetVehicleCollection|mixed $authority
	 * @property _FleetVehicleCollection|mixed $rto_code
	 * @property _FleetVehicleCollection|mixed $created_at
	 * @property _FleetVehicleCollection|mixed $updated_at
	 * @see \App\Domain\Fleet\Models\FleetVehicle::fleet
	 * @method _FleetVehicleCollection fleet()
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _FleetVehicleCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _FleetVehicleCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _FleetVehicleCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _FleetVehicleCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _FleetVehicleCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _FleetVehicleCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _FleetVehicleCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _FleetVehicleCollectionProxy { }

	/**
	 * @method _FleetVehicleQueryBuilder whereId($value)
	 * @method _FleetVehicleQueryBuilder whereNumber($value)
	 * @method _FleetVehicleQueryBuilder whereFleetId($value)
	 * @method _FleetVehicleQueryBuilder whereOwnerName($value)
	 * @method _FleetVehicleQueryBuilder whereRegDate($value)
	 * @method _FleetVehicleQueryBuilder whereModel($value)
	 * @method _FleetVehicleQueryBuilder whereFitnessUpto($value)
	 * @method _FleetVehicleQueryBuilder whereInsuranceUpto($value)
	 * @method _FleetVehicleQueryBuilder whereClass($value)
	 * @method _FleetVehicleQueryBuilder whereChassisNumber($value)
	 * @method _FleetVehicleQueryBuilder whereEngineNumber($value)
	 * @method _FleetVehicleQueryBuilder whereAuthority($value)
	 * @method _FleetVehicleQueryBuilder whereRtoCode($value)
	 * @method _FleetVehicleQueryBuilder whereCreatedAt($value)
	 * @method _FleetVehicleQueryBuilder whereUpdatedAt($value)
	 * @method FleetVehicle baseSole(array|string $columns = [ '*' ])
	 * @method FleetVehicle create(array $attributes = [])
	 * @method _FleetVehicleCollection|FleetVehicle[] cursor()
	 * @method FleetVehicle|null find($id, array $columns = [ '*' ])
	 * @method _FleetVehicleCollection|FleetVehicle[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method FleetVehicle findOrFail($id, array $columns = [ '*' ])
	 * @method _FleetVehicleCollection|FleetVehicle[] findOrNew($id, array $columns = [ '*' ])
	 * @method FleetVehicle first(array|string $columns = [ '*' ])
	 * @method FleetVehicle firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method FleetVehicle firstOrCreate(array $attributes = [], array $values = [])
	 * @method FleetVehicle firstOrFail(array $columns = [ '*' ])
	 * @method FleetVehicle firstOrNew(array $attributes = [], array $values = [])
	 * @method FleetVehicle firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method FleetVehicle forceCreate(array $attributes)
	 * @method _FleetVehicleCollection|FleetVehicle[] fromQuery(string $query, array $bindings = [])
	 * @method _FleetVehicleCollection|FleetVehicle[] get(array|string $columns = [ '*' ])
	 * @method FleetVehicle getModel()
	 * @method FleetVehicle[] getModels(array|string $columns = [ '*' ])
	 * @method _FleetVehicleCollection|FleetVehicle[] hydrate(array $items)
	 * @method FleetVehicle make(array $attributes = [])
	 * @method FleetVehicle newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|FleetVehicle[]|_FleetVehicleCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|FleetVehicle[]|_FleetVehicleCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method FleetVehicle sole(array|string $columns = [ '*' ])
	 * @method FleetVehicle updateOrCreate(array $attributes, array $values = [])
	 */
	class _FleetVehicleQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\App\Domain\General\Models {

    use App\Domain\General\Models\Mine;
    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use App\Domain\General\Models\Sector;
    use App\Domain\General\Models\Address;
    use App\Domain\General\Models\Material;
    use LaravelIdea\Helper\_BaseCollection;
    use Illuminate\Database\Query\Expression;
    use App\Domain\General\Models\PhoneNumber;
    use Illuminate\Contracts\Support\Arrayable;
    use App\Domain\General\Models\UnloadingPoint;
    use Illuminate\Pagination\LengthAwarePaginator;

    /**
	 * @method Address shift()
	 * @method Address pop()
	 * @method Address get($key, $default = null)
	 * @method Address pull($key, $default = null)
	 * @method Address first(callable $callback = null, $default = null)
	 * @method Address firstWhere(string $key, $operator = null, $value = null)
	 * @method Address[] all()
	 * @method Address last(callable $callback = null, $default = null)
	 * @property-read _AddressCollectionProxy $keyBy
	 * @property-read _AddressCollectionProxy $partition
	 * @property-read _AddressCollectionProxy $max
	 * @property-read _AddressCollectionProxy $flatMap
	 * @property-read _AddressCollectionProxy $each
	 * @property-read _AddressCollectionProxy $map
	 * @property-read _AddressCollectionProxy $filter
	 * @property-read _AddressCollectionProxy $unique
	 * @property-read _AddressCollectionProxy $groupBy
	 * @property-read _AddressCollectionProxy $sortBy
	 * @property-read _AddressCollectionProxy $contains
	 * @property-read _AddressCollectionProxy $sum
	 * @property-read _AddressCollectionProxy $until
	 * @property-read _AddressCollectionProxy $every
	 * @property-read _AddressCollectionProxy $average
	 * @property-read _AddressCollectionProxy $some
	 * @property-read _AddressCollectionProxy $skipWhile
	 * @property-read _AddressCollectionProxy $sortByDesc
	 * @property-read _AddressCollectionProxy $takeUntil
	 * @property-read _AddressCollectionProxy $avg
	 * @property-read _AddressCollectionProxy $skipUntil
	 * @property-read _AddressCollectionProxy $first
	 * @property-read _AddressCollectionProxy $takeWhile
	 * @property-read _AddressCollectionProxy $min
	 * @property-read _AddressCollectionProxy $reject
	 */
	class _AddressCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Address[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _AddressCollection|mixed $id
	 * @property _AddressCollection|mixed $street_address
	 * @property _AddressCollection|mixed $street_address_two
	 * @property _AddressCollection|mixed $city
	 * @property _AddressCollection|mixed $state
	 * @property _AddressCollection|mixed $zip
	 * @property _AddressCollection|mixed $created_at
	 * @property _AddressCollection|mixed $updated_at
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _AddressCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _AddressCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _AddressCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _AddressCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _AddressCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _AddressCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _AddressCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _AddressCollectionProxy { }

	/**
	 * @method _AddressQueryBuilder whereId($value)
	 * @method _AddressQueryBuilder whereStreetAddress($value)
	 * @method _AddressQueryBuilder whereStreetAddressTwo($value)
	 * @method _AddressQueryBuilder whereCity($value)
	 * @method _AddressQueryBuilder whereState($value)
	 * @method _AddressQueryBuilder whereZip($value)
	 * @method _AddressQueryBuilder whereCreatedAt($value)
	 * @method _AddressQueryBuilder whereUpdatedAt($value)
	 * @method Address baseSole(array|string $columns = [ '*' ])
	 * @method Address create(array $attributes = [])
	 * @method _AddressCollection|Address[] cursor()
	 * @method Address|null find($id, array $columns = [ '*' ])
	 * @method _AddressCollection|Address[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Address findOrFail($id, array $columns = [ '*' ])
	 * @method _AddressCollection|Address[] findOrNew($id, array $columns = [ '*' ])
	 * @method Address first(array|string $columns = [ '*' ])
	 * @method Address firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Address firstOrCreate(array $attributes = [], array $values = [])
	 * @method Address firstOrFail(array $columns = [ '*' ])
	 * @method Address firstOrNew(array $attributes = [], array $values = [])
	 * @method Address firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Address forceCreate(array $attributes)
	 * @method _AddressCollection|Address[] fromQuery(string $query, array $bindings = [])
	 * @method _AddressCollection|Address[] get(array|string $columns = [ '*' ])
	 * @method Address getModel()
	 * @method Address[] getModels(array|string $columns = [ '*' ])
	 * @method _AddressCollection|Address[] hydrate(array $items)
	 * @method Address make(array $attributes = [])
	 * @method Address newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Address[]|_AddressCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Address[]|_AddressCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Address sole(array|string $columns = [ '*' ])
	 * @method Address updateOrCreate(array $attributes, array $values = [])
	 */
	class _AddressQueryBuilder extends _BaseBuilder { }

	/**
	 * @method Material shift()
	 * @method Material pop()
	 * @method Material get($key, $default = null)
	 * @method Material pull($key, $default = null)
	 * @method Material first(callable $callback = null, $default = null)
	 * @method Material firstWhere(string $key, $operator = null, $value = null)
	 * @method Material[] all()
	 * @method Material last(callable $callback = null, $default = null)
	 * @property-read _MaterialCollectionProxy $keyBy
	 * @property-read _MaterialCollectionProxy $partition
	 * @property-read _MaterialCollectionProxy $max
	 * @property-read _MaterialCollectionProxy $flatMap
	 * @property-read _MaterialCollectionProxy $each
	 * @property-read _MaterialCollectionProxy $map
	 * @property-read _MaterialCollectionProxy $filter
	 * @property-read _MaterialCollectionProxy $unique
	 * @property-read _MaterialCollectionProxy $groupBy
	 * @property-read _MaterialCollectionProxy $sortBy
	 * @property-read _MaterialCollectionProxy $contains
	 * @property-read _MaterialCollectionProxy $sum
	 * @property-read _MaterialCollectionProxy $until
	 * @property-read _MaterialCollectionProxy $every
	 * @property-read _MaterialCollectionProxy $average
	 * @property-read _MaterialCollectionProxy $some
	 * @property-read _MaterialCollectionProxy $skipWhile
	 * @property-read _MaterialCollectionProxy $sortByDesc
	 * @property-read _MaterialCollectionProxy $takeUntil
	 * @property-read _MaterialCollectionProxy $avg
	 * @property-read _MaterialCollectionProxy $skipUntil
	 * @property-read _MaterialCollectionProxy $first
	 * @property-read _MaterialCollectionProxy $takeWhile
	 * @property-read _MaterialCollectionProxy $min
	 * @property-read _MaterialCollectionProxy $reject
	 */
	class _MaterialCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Material[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _MaterialCollection|mixed $id
	 * @property _MaterialCollection|mixed $name
	 * @property _MaterialCollection|mixed $created_at
	 * @property _MaterialCollection|mixed $updated_at
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _MaterialCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _MaterialCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _MaterialCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _MaterialCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _MaterialCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _MaterialCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _MaterialCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _MaterialCollectionProxy { }

	/**
	 * @method _MaterialQueryBuilder whereId($value)
	 * @method _MaterialQueryBuilder whereName($value)
	 * @method _MaterialQueryBuilder whereCreatedAt($value)
	 * @method _MaterialQueryBuilder whereUpdatedAt($value)
	 * @method Material baseSole(array|string $columns = [ '*' ])
	 * @method Material create(array $attributes = [])
	 * @method _MaterialCollection|Material[] cursor()
	 * @method Material|null find($id, array $columns = [ '*' ])
	 * @method _MaterialCollection|Material[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Material findOrFail($id, array $columns = [ '*' ])
	 * @method _MaterialCollection|Material[] findOrNew($id, array $columns = [ '*' ])
	 * @method Material first(array|string $columns = [ '*' ])
	 * @method Material firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Material firstOrCreate(array $attributes = [], array $values = [])
	 * @method Material firstOrFail(array $columns = [ '*' ])
	 * @method Material firstOrNew(array $attributes = [], array $values = [])
	 * @method Material firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Material forceCreate(array $attributes)
	 * @method _MaterialCollection|Material[] fromQuery(string $query, array $bindings = [])
	 * @method _MaterialCollection|Material[] get(array|string $columns = [ '*' ])
	 * @method Material getModel()
	 * @method Material[] getModels(array|string $columns = [ '*' ])
	 * @method _MaterialCollection|Material[] hydrate(array $items)
	 * @method Material make(array $attributes = [])
	 * @method Material newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Material[]|_MaterialCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Material[]|_MaterialCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Material sole(array|string $columns = [ '*' ])
	 * @method Material updateOrCreate(array $attributes, array $values = [])
	 */
	class _MaterialQueryBuilder extends _BaseBuilder { }

	/**
	 * @method Mine shift()
	 * @method Mine pop()
	 * @method Mine get($key, $default = null)
	 * @method Mine pull($key, $default = null)
	 * @method Mine first(callable $callback = null, $default = null)
	 * @method Mine firstWhere(string $key, $operator = null, $value = null)
	 * @method Mine[] all()
	 * @method Mine last(callable $callback = null, $default = null)
	 * @property-read _MineCollectionProxy $keyBy
	 * @property-read _MineCollectionProxy $partition
	 * @property-read _MineCollectionProxy $max
	 * @property-read _MineCollectionProxy $flatMap
	 * @property-read _MineCollectionProxy $each
	 * @property-read _MineCollectionProxy $map
	 * @property-read _MineCollectionProxy $filter
	 * @property-read _MineCollectionProxy $unique
	 * @property-read _MineCollectionProxy $groupBy
	 * @property-read _MineCollectionProxy $sortBy
	 * @property-read _MineCollectionProxy $contains
	 * @property-read _MineCollectionProxy $sum
	 * @property-read _MineCollectionProxy $until
	 * @property-read _MineCollectionProxy $every
	 * @property-read _MineCollectionProxy $average
	 * @property-read _MineCollectionProxy $some
	 * @property-read _MineCollectionProxy $skipWhile
	 * @property-read _MineCollectionProxy $sortByDesc
	 * @property-read _MineCollectionProxy $takeUntil
	 * @property-read _MineCollectionProxy $avg
	 * @property-read _MineCollectionProxy $skipUntil
	 * @property-read _MineCollectionProxy $first
	 * @property-read _MineCollectionProxy $takeWhile
	 * @property-read _MineCollectionProxy $min
	 * @property-read _MineCollectionProxy $reject
	 */
	class _MineCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Mine[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _MineCollection|mixed $id
	 * @property _MineCollection|mixed $name
	 * @property _MineCollection|mixed $sector_id
	 * @property _MineCollection|mixed $visible
	 * @property _MineCollection|mixed $created_at
	 * @property _MineCollection|mixed $updated_at
	 * @property _MineCollection|mixed $sector
	 * @see \App\Domain\General\Models\Mine::current_projects
	 * @method _MineCollection current_projects()
	 * @see \App\Domain\General\Models\Mine::total_projects
	 * @method _MineCollection total_projects()
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _MineCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _MineCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _MineCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _MineCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _MineCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _MineCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _MineCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _MineCollectionProxy { }

	/**
	 * @method _MineQueryBuilder whereId($value)
	 * @method _MineQueryBuilder whereName($value)
	 * @method _MineQueryBuilder whereSectorId($value)
	 * @method _MineQueryBuilder whereVisible($value)
	 * @method _MineQueryBuilder whereCreatedAt($value)
	 * @method _MineQueryBuilder whereUpdatedAt($value)
	 * @method Mine baseSole(array|string $columns = [ '*' ])
	 * @method Mine create(array $attributes = [])
	 * @method _MineCollection|Mine[] cursor()
	 * @method Mine|null find($id, array $columns = [ '*' ])
	 * @method _MineCollection|Mine[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Mine findOrFail($id, array $columns = [ '*' ])
	 * @method _MineCollection|Mine[] findOrNew($id, array $columns = [ '*' ])
	 * @method Mine first(array|string $columns = [ '*' ])
	 * @method Mine firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Mine firstOrCreate(array $attributes = [], array $values = [])
	 * @method Mine firstOrFail(array $columns = [ '*' ])
	 * @method Mine firstOrNew(array $attributes = [], array $values = [])
	 * @method Mine firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Mine forceCreate(array $attributes)
	 * @method _MineCollection|Mine[] fromQuery(string $query, array $bindings = [])
	 * @method _MineCollection|Mine[] get(array|string $columns = [ '*' ])
	 * @method Mine getModel()
	 * @method Mine[] getModels(array|string $columns = [ '*' ])
	 * @method _MineCollection|Mine[] hydrate(array $items)
	 * @method Mine make(array $attributes = [])
	 * @method Mine newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Mine[]|_MineCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Mine[]|_MineCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Mine sole(array|string $columns = [ '*' ])
	 * @method Mine updateOrCreate(array $attributes, array $values = [])
	 */
	class _MineQueryBuilder extends _BaseBuilder { }

	/**
	 * @method PhoneNumber shift()
	 * @method PhoneNumber pop()
	 * @method PhoneNumber get($key, $default = null)
	 * @method PhoneNumber pull($key, $default = null)
	 * @method PhoneNumber first(callable $callback = null, $default = null)
	 * @method PhoneNumber firstWhere(string $key, $operator = null, $value = null)
	 * @method PhoneNumber[] all()
	 * @method PhoneNumber last(callable $callback = null, $default = null)
	 * @property-read _PhoneNumberCollectionProxy $keyBy
	 * @property-read _PhoneNumberCollectionProxy $partition
	 * @property-read _PhoneNumberCollectionProxy $max
	 * @property-read _PhoneNumberCollectionProxy $flatMap
	 * @property-read _PhoneNumberCollectionProxy $each
	 * @property-read _PhoneNumberCollectionProxy $map
	 * @property-read _PhoneNumberCollectionProxy $filter
	 * @property-read _PhoneNumberCollectionProxy $unique
	 * @property-read _PhoneNumberCollectionProxy $groupBy
	 * @property-read _PhoneNumberCollectionProxy $sortBy
	 * @property-read _PhoneNumberCollectionProxy $contains
	 * @property-read _PhoneNumberCollectionProxy $sum
	 * @property-read _PhoneNumberCollectionProxy $until
	 * @property-read _PhoneNumberCollectionProxy $every
	 * @property-read _PhoneNumberCollectionProxy $average
	 * @property-read _PhoneNumberCollectionProxy $some
	 * @property-read _PhoneNumberCollectionProxy $skipWhile
	 * @property-read _PhoneNumberCollectionProxy $sortByDesc
	 * @property-read _PhoneNumberCollectionProxy $takeUntil
	 * @property-read _PhoneNumberCollectionProxy $avg
	 * @property-read _PhoneNumberCollectionProxy $skipUntil
	 * @property-read _PhoneNumberCollectionProxy $first
	 * @property-read _PhoneNumberCollectionProxy $takeWhile
	 * @property-read _PhoneNumberCollectionProxy $min
	 * @property-read _PhoneNumberCollectionProxy $reject
	 */
	class _PhoneNumberCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return PhoneNumber[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _PhoneNumberCollection|mixed $id
	 * @property _PhoneNumberCollection|mixed $phone_number
	 * @property _PhoneNumberCollection|mixed $phoneable_id
	 * @property _PhoneNumberCollection|mixed $phoneable_type
	 * @property _PhoneNumberCollection|mixed $created_at
	 * @property _PhoneNumberCollection|mixed $updated_at
	 * @property _PhoneNumberCollection|mixed $phoneable
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _PhoneNumberCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _PhoneNumberCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _PhoneNumberCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _PhoneNumberCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _PhoneNumberCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _PhoneNumberCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _PhoneNumberCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _PhoneNumberCollectionProxy { }

	/**
	 * @method _PhoneNumberQueryBuilder whereId($value)
	 * @method _PhoneNumberQueryBuilder wherePhoneNumber($value)
	 * @method _PhoneNumberQueryBuilder wherePhoneableId($value)
	 * @method _PhoneNumberQueryBuilder wherePhoneableType($value)
	 * @method _PhoneNumberQueryBuilder whereCreatedAt($value)
	 * @method _PhoneNumberQueryBuilder whereUpdatedAt($value)
	 * @method PhoneNumber baseSole(array|string $columns = [ '*' ])
	 * @method PhoneNumber create(array $attributes = [])
	 * @method _PhoneNumberCollection|PhoneNumber[] cursor()
	 * @method PhoneNumber|null find($id, array $columns = [ '*' ])
	 * @method _PhoneNumberCollection|PhoneNumber[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method PhoneNumber findOrFail($id, array $columns = [ '*' ])
	 * @method _PhoneNumberCollection|PhoneNumber[] findOrNew($id, array $columns = [ '*' ])
	 * @method PhoneNumber first(array|string $columns = [ '*' ])
	 * @method PhoneNumber firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method PhoneNumber firstOrCreate(array $attributes = [], array $values = [])
	 * @method PhoneNumber firstOrFail(array $columns = [ '*' ])
	 * @method PhoneNumber firstOrNew(array $attributes = [], array $values = [])
	 * @method PhoneNumber firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PhoneNumber forceCreate(array $attributes)
	 * @method _PhoneNumberCollection|PhoneNumber[] fromQuery(string $query, array $bindings = [])
	 * @method _PhoneNumberCollection|PhoneNumber[] get(array|string $columns = [ '*' ])
	 * @method PhoneNumber getModel()
	 * @method PhoneNumber[] getModels(array|string $columns = [ '*' ])
	 * @method _PhoneNumberCollection|PhoneNumber[] hydrate(array $items)
	 * @method PhoneNumber make(array $attributes = [])
	 * @method PhoneNumber newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|PhoneNumber[]|_PhoneNumberCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|PhoneNumber[]|_PhoneNumberCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method PhoneNumber sole(array|string $columns = [ '*' ])
	 * @method PhoneNumber updateOrCreate(array $attributes, array $values = [])
	 */
	class _PhoneNumberQueryBuilder extends _BaseBuilder { }

	/**
	 * @method Sector shift()
	 * @method Sector pop()
	 * @method Sector get($key, $default = null)
	 * @method Sector pull($key, $default = null)
	 * @method Sector first(callable $callback = null, $default = null)
	 * @method Sector firstWhere(string $key, $operator = null, $value = null)
	 * @method Sector[] all()
	 * @method Sector last(callable $callback = null, $default = null)
	 * @property-read _SectorCollectionProxy $keyBy
	 * @property-read _SectorCollectionProxy $partition
	 * @property-read _SectorCollectionProxy $max
	 * @property-read _SectorCollectionProxy $flatMap
	 * @property-read _SectorCollectionProxy $each
	 * @property-read _SectorCollectionProxy $map
	 * @property-read _SectorCollectionProxy $filter
	 * @property-read _SectorCollectionProxy $unique
	 * @property-read _SectorCollectionProxy $groupBy
	 * @property-read _SectorCollectionProxy $sortBy
	 * @property-read _SectorCollectionProxy $contains
	 * @property-read _SectorCollectionProxy $sum
	 * @property-read _SectorCollectionProxy $until
	 * @property-read _SectorCollectionProxy $every
	 * @property-read _SectorCollectionProxy $average
	 * @property-read _SectorCollectionProxy $some
	 * @property-read _SectorCollectionProxy $skipWhile
	 * @property-read _SectorCollectionProxy $sortByDesc
	 * @property-read _SectorCollectionProxy $takeUntil
	 * @property-read _SectorCollectionProxy $avg
	 * @property-read _SectorCollectionProxy $skipUntil
	 * @property-read _SectorCollectionProxy $first
	 * @property-read _SectorCollectionProxy $takeWhile
	 * @property-read _SectorCollectionProxy $min
	 * @property-read _SectorCollectionProxy $reject
	 */
	class _SectorCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Sector[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _SectorCollection|mixed $id
	 * @property _SectorCollection|mixed $name
	 * @property _SectorCollection|mixed $visible
	 * @property _SectorCollection|mixed $created_at
	 * @property _SectorCollection|mixed $updated_at
	 * @property _SectorCollection|mixed $sector
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _SectorCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _SectorCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _SectorCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _SectorCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _SectorCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _SectorCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _SectorCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _SectorCollectionProxy { }

	/**
	 * @method _SectorQueryBuilder whereId($value)
	 * @method _SectorQueryBuilder whereName($value)
	 * @method _SectorQueryBuilder whereVisible($value)
	 * @method _SectorQueryBuilder whereCreatedAt($value)
	 * @method _SectorQueryBuilder whereUpdatedAt($value)
	 * @method Sector baseSole(array|string $columns = [ '*' ])
	 * @method Sector create(array $attributes = [])
	 * @method _SectorCollection|Sector[] cursor()
	 * @method Sector|null find($id, array $columns = [ '*' ])
	 * @method _SectorCollection|Sector[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Sector findOrFail($id, array $columns = [ '*' ])
	 * @method _SectorCollection|Sector[] findOrNew($id, array $columns = [ '*' ])
	 * @method Sector first(array|string $columns = [ '*' ])
	 * @method Sector firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Sector firstOrCreate(array $attributes = [], array $values = [])
	 * @method Sector firstOrFail(array $columns = [ '*' ])
	 * @method Sector firstOrNew(array $attributes = [], array $values = [])
	 * @method Sector firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Sector forceCreate(array $attributes)
	 * @method _SectorCollection|Sector[] fromQuery(string $query, array $bindings = [])
	 * @method _SectorCollection|Sector[] get(array|string $columns = [ '*' ])
	 * @method Sector getModel()
	 * @method Sector[] getModels(array|string $columns = [ '*' ])
	 * @method _SectorCollection|Sector[] hydrate(array $items)
	 * @method Sector make(array $attributes = [])
	 * @method Sector newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Sector[]|_SectorCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Sector[]|_SectorCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Sector sole(array|string $columns = [ '*' ])
	 * @method Sector updateOrCreate(array $attributes, array $values = [])
	 */
	class _SectorQueryBuilder extends _BaseBuilder { }

	/**
	 * @method UnloadingPoint shift()
	 * @method UnloadingPoint pop()
	 * @method UnloadingPoint get($key, $default = null)
	 * @method UnloadingPoint pull($key, $default = null)
	 * @method UnloadingPoint first(callable $callback = null, $default = null)
	 * @method UnloadingPoint firstWhere(string $key, $operator = null, $value = null)
	 * @method UnloadingPoint[] all()
	 * @method UnloadingPoint last(callable $callback = null, $default = null)
	 * @property-read _UnloadingPointCollectionProxy $keyBy
	 * @property-read _UnloadingPointCollectionProxy $partition
	 * @property-read _UnloadingPointCollectionProxy $max
	 * @property-read _UnloadingPointCollectionProxy $flatMap
	 * @property-read _UnloadingPointCollectionProxy $each
	 * @property-read _UnloadingPointCollectionProxy $map
	 * @property-read _UnloadingPointCollectionProxy $filter
	 * @property-read _UnloadingPointCollectionProxy $unique
	 * @property-read _UnloadingPointCollectionProxy $groupBy
	 * @property-read _UnloadingPointCollectionProxy $sortBy
	 * @property-read _UnloadingPointCollectionProxy $contains
	 * @property-read _UnloadingPointCollectionProxy $sum
	 * @property-read _UnloadingPointCollectionProxy $until
	 * @property-read _UnloadingPointCollectionProxy $every
	 * @property-read _UnloadingPointCollectionProxy $average
	 * @property-read _UnloadingPointCollectionProxy $some
	 * @property-read _UnloadingPointCollectionProxy $skipWhile
	 * @property-read _UnloadingPointCollectionProxy $sortByDesc
	 * @property-read _UnloadingPointCollectionProxy $takeUntil
	 * @property-read _UnloadingPointCollectionProxy $avg
	 * @property-read _UnloadingPointCollectionProxy $skipUntil
	 * @property-read _UnloadingPointCollectionProxy $first
	 * @property-read _UnloadingPointCollectionProxy $takeWhile
	 * @property-read _UnloadingPointCollectionProxy $min
	 * @property-read _UnloadingPointCollectionProxy $reject
	 */
	class _UnloadingPointCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return UnloadingPoint[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _UnloadingPointCollection|mixed $id
	 * @property _UnloadingPointCollection|mixed $short_code
	 * @property _UnloadingPointCollection|mixed $name
	 * @property _UnloadingPointCollection|mixed $created_at
	 * @property _UnloadingPointCollection|mixed $updated_at
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _UnloadingPointCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _UnloadingPointCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _UnloadingPointCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _UnloadingPointCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _UnloadingPointCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _UnloadingPointCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _UnloadingPointCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _UnloadingPointCollectionProxy { }

	/**
	 * @method _UnloadingPointQueryBuilder whereId($value)
	 * @method _UnloadingPointQueryBuilder whereShortCode($value)
	 * @method _UnloadingPointQueryBuilder whereName($value)
	 * @method _UnloadingPointQueryBuilder whereCreatedAt($value)
	 * @method _UnloadingPointQueryBuilder whereUpdatedAt($value)
	 * @method UnloadingPoint baseSole(array|string $columns = [ '*' ])
	 * @method UnloadingPoint create(array $attributes = [])
	 * @method _UnloadingPointCollection|UnloadingPoint[] cursor()
	 * @method UnloadingPoint|null find($id, array $columns = [ '*' ])
	 * @method _UnloadingPointCollection|UnloadingPoint[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method UnloadingPoint findOrFail($id, array $columns = [ '*' ])
	 * @method _UnloadingPointCollection|UnloadingPoint[] findOrNew($id, array $columns = [ '*' ])
	 * @method UnloadingPoint first(array|string $columns = [ '*' ])
	 * @method UnloadingPoint firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method UnloadingPoint firstOrCreate(array $attributes = [], array $values = [])
	 * @method UnloadingPoint firstOrFail(array $columns = [ '*' ])
	 * @method UnloadingPoint firstOrNew(array $attributes = [], array $values = [])
	 * @method UnloadingPoint firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method UnloadingPoint forceCreate(array $attributes)
	 * @method _UnloadingPointCollection|UnloadingPoint[] fromQuery(string $query, array $bindings = [])
	 * @method _UnloadingPointCollection|UnloadingPoint[] get(array|string $columns = [ '*' ])
	 * @method UnloadingPoint getModel()
	 * @method UnloadingPoint[] getModels(array|string $columns = [ '*' ])
	 * @method _UnloadingPointCollection|UnloadingPoint[] hydrate(array $items)
	 * @method UnloadingPoint make(array $attributes = [])
	 * @method UnloadingPoint newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|UnloadingPoint[]|_UnloadingPointCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|UnloadingPoint[]|_UnloadingPointCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method UnloadingPoint sole(array|string $columns = [ '*' ])
	 * @method UnloadingPoint updateOrCreate(array $attributes, array $values = [])
	 */
	class _UnloadingPointQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\App\Domain\Invoice\Models {

    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use App\Domain\Invoice\Models\Invoice;
    use LaravelIdea\Helper\_BaseCollection;
    use Illuminate\Database\Query\Expression;
    use App\Domain\Invoice\Models\InvoiceItem;
    use Illuminate\Contracts\Support\Arrayable;
    use App\Domain\Invoice\Models\InvoiceStatus;
    use Illuminate\Pagination\LengthAwarePaginator;

    /**
	 * @method Invoice shift()
	 * @method Invoice pop()
	 * @method Invoice get($key, $default = null)
	 * @method Invoice pull($key, $default = null)
	 * @method Invoice first(callable $callback = null, $default = null)
	 * @method Invoice firstWhere(string $key, $operator = null, $value = null)
	 * @method Invoice[] all()
	 * @method Invoice last(callable $callback = null, $default = null)
	 * @property-read _InvoiceCollectionProxy $keyBy
	 * @property-read _InvoiceCollectionProxy $partition
	 * @property-read _InvoiceCollectionProxy $max
	 * @property-read _InvoiceCollectionProxy $flatMap
	 * @property-read _InvoiceCollectionProxy $each
	 * @property-read _InvoiceCollectionProxy $map
	 * @property-read _InvoiceCollectionProxy $filter
	 * @property-read _InvoiceCollectionProxy $unique
	 * @property-read _InvoiceCollectionProxy $groupBy
	 * @property-read _InvoiceCollectionProxy $sortBy
	 * @property-read _InvoiceCollectionProxy $contains
	 * @property-read _InvoiceCollectionProxy $sum
	 * @property-read _InvoiceCollectionProxy $until
	 * @property-read _InvoiceCollectionProxy $every
	 * @property-read _InvoiceCollectionProxy $average
	 * @property-read _InvoiceCollectionProxy $some
	 * @property-read _InvoiceCollectionProxy $skipWhile
	 * @property-read _InvoiceCollectionProxy $sortByDesc
	 * @property-read _InvoiceCollectionProxy $takeUntil
	 * @property-read _InvoiceCollectionProxy $avg
	 * @property-read _InvoiceCollectionProxy $skipUntil
	 * @property-read _InvoiceCollectionProxy $first
	 * @property-read _InvoiceCollectionProxy $takeWhile
	 * @property-read _InvoiceCollectionProxy $min
	 * @property-read _InvoiceCollectionProxy $reject
	 */
	class _InvoiceCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Invoice[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _InvoiceCollection|mixed $id
	 * @property _InvoiceCollection|mixed $invoice_date
	 * @property _InvoiceCollection|mixed $due_date
	 * @property _InvoiceCollection|mixed $invoice_number
	 * @property _InvoiceCollection|mixed $bill_number
	 * @property _InvoiceCollection|mixed $reference_number
	 * @property _InvoiceCollection|mixed $status
	 * @property _InvoiceCollection|mixed $notes
	 * @property _InvoiceCollection|mixed $total
	 * @property _InvoiceCollection|mixed $tax
	 * @property _InvoiceCollection|mixed $due_amount
	 * @property _InvoiceCollection|mixed $received_amount
	 * @property _InvoiceCollection|mixed $consignee_id
	 * @property _InvoiceCollection|mixed $created_at
	 * @property _InvoiceCollection|mixed $updated_at
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _InvoiceCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _InvoiceCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _InvoiceCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _InvoiceCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _InvoiceCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _InvoiceCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _InvoiceCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _InvoiceCollectionProxy { }

	/**
	 * @method InvoiceItem shift()
	 * @method InvoiceItem pop()
	 * @method InvoiceItem get($key, $default = null)
	 * @method InvoiceItem pull($key, $default = null)
	 * @method InvoiceItem first(callable $callback = null, $default = null)
	 * @method InvoiceItem firstWhere(string $key, $operator = null, $value = null)
	 * @method InvoiceItem[] all()
	 * @method InvoiceItem last(callable $callback = null, $default = null)
	 * @property-read _InvoiceItemCollectionProxy $keyBy
	 * @property-read _InvoiceItemCollectionProxy $partition
	 * @property-read _InvoiceItemCollectionProxy $max
	 * @property-read _InvoiceItemCollectionProxy $flatMap
	 * @property-read _InvoiceItemCollectionProxy $each
	 * @property-read _InvoiceItemCollectionProxy $map
	 * @property-read _InvoiceItemCollectionProxy $filter
	 * @property-read _InvoiceItemCollectionProxy $unique
	 * @property-read _InvoiceItemCollectionProxy $groupBy
	 * @property-read _InvoiceItemCollectionProxy $sortBy
	 * @property-read _InvoiceItemCollectionProxy $contains
	 * @property-read _InvoiceItemCollectionProxy $sum
	 * @property-read _InvoiceItemCollectionProxy $until
	 * @property-read _InvoiceItemCollectionProxy $every
	 * @property-read _InvoiceItemCollectionProxy $average
	 * @property-read _InvoiceItemCollectionProxy $some
	 * @property-read _InvoiceItemCollectionProxy $skipWhile
	 * @property-read _InvoiceItemCollectionProxy $sortByDesc
	 * @property-read _InvoiceItemCollectionProxy $takeUntil
	 * @property-read _InvoiceItemCollectionProxy $avg
	 * @property-read _InvoiceItemCollectionProxy $skipUntil
	 * @property-read _InvoiceItemCollectionProxy $first
	 * @property-read _InvoiceItemCollectionProxy $takeWhile
	 * @property-read _InvoiceItemCollectionProxy $min
	 * @property-read _InvoiceItemCollectionProxy $reject
	 */
	class _InvoiceItemCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return InvoiceItem[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _InvoiceItemCollection|mixed $id
	 * @property _InvoiceItemCollection|mixed $name
	 * @property _InvoiceItemCollection|mixed $description
	 * @property _InvoiceItemCollection|mixed $company_id
	 * @property _InvoiceItemCollection|mixed $created_at
	 * @property _InvoiceItemCollection|mixed $updated_at
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _InvoiceItemCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _InvoiceItemCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _InvoiceItemCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _InvoiceItemCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _InvoiceItemCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _InvoiceItemCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _InvoiceItemCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _InvoiceItemCollectionProxy { }

	/**
	 * @method _InvoiceItemQueryBuilder whereId($value)
	 * @method _InvoiceItemQueryBuilder whereName($value)
	 * @method _InvoiceItemQueryBuilder whereDescription($value)
	 * @method _InvoiceItemQueryBuilder whereCompanyId($value)
	 * @method _InvoiceItemQueryBuilder whereCreatedAt($value)
	 * @method _InvoiceItemQueryBuilder whereUpdatedAt($value)
	 * @method InvoiceItem baseSole(array|string $columns = [ '*' ])
	 * @method InvoiceItem create(array $attributes = [])
	 * @method _InvoiceItemCollection|InvoiceItem[] cursor()
	 * @method InvoiceItem|null find($id, array $columns = [ '*' ])
	 * @method _InvoiceItemCollection|InvoiceItem[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method InvoiceItem findOrFail($id, array $columns = [ '*' ])
	 * @method _InvoiceItemCollection|InvoiceItem[] findOrNew($id, array $columns = [ '*' ])
	 * @method InvoiceItem first(array|string $columns = [ '*' ])
	 * @method InvoiceItem firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method InvoiceItem firstOrCreate(array $attributes = [], array $values = [])
	 * @method InvoiceItem firstOrFail(array $columns = [ '*' ])
	 * @method InvoiceItem firstOrNew(array $attributes = [], array $values = [])
	 * @method InvoiceItem firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method InvoiceItem forceCreate(array $attributes)
	 * @method _InvoiceItemCollection|InvoiceItem[] fromQuery(string $query, array $bindings = [])
	 * @method _InvoiceItemCollection|InvoiceItem[] get(array|string $columns = [ '*' ])
	 * @method InvoiceItem getModel()
	 * @method InvoiceItem[] getModels(array|string $columns = [ '*' ])
	 * @method _InvoiceItemCollection|InvoiceItem[] hydrate(array $items)
	 * @method InvoiceItem make(array $attributes = [])
	 * @method InvoiceItem newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|InvoiceItem[]|_InvoiceItemCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|InvoiceItem[]|_InvoiceItemCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method InvoiceItem sole(array|string $columns = [ '*' ])
	 * @method InvoiceItem updateOrCreate(array $attributes, array $values = [])
	 */
	class _InvoiceItemQueryBuilder extends _BaseBuilder { }

	/**
	 * @method _InvoiceQueryBuilder whereId($value)
	 * @method _InvoiceQueryBuilder whereInvoiceDate($value)
	 * @method _InvoiceQueryBuilder whereDueDate($value)
	 * @method _InvoiceQueryBuilder whereInvoiceNumber($value)
	 * @method _InvoiceQueryBuilder whereBillNumber($value)
	 * @method _InvoiceQueryBuilder whereReferenceNumber($value)
	 * @method _InvoiceQueryBuilder whereStatus($value)
	 * @method _InvoiceQueryBuilder whereNotes($value)
	 * @method _InvoiceQueryBuilder whereTotal($value)
	 * @method _InvoiceQueryBuilder whereTax($value)
	 * @method _InvoiceQueryBuilder whereDueAmount($value)
	 * @method _InvoiceQueryBuilder whereReceivedAmount($value)
	 * @method _InvoiceQueryBuilder whereConsigneeId($value)
	 * @method _InvoiceQueryBuilder whereCreatedAt($value)
	 * @method _InvoiceQueryBuilder whereUpdatedAt($value)
	 * @method Invoice baseSole(array|string $columns = [ '*' ])
	 * @method Invoice create(array $attributes = [])
	 * @method _InvoiceCollection|Invoice[] cursor()
	 * @method Invoice|null find($id, array $columns = [ '*' ])
	 * @method _InvoiceCollection|Invoice[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Invoice findOrFail($id, array $columns = [ '*' ])
	 * @method _InvoiceCollection|Invoice[] findOrNew($id, array $columns = [ '*' ])
	 * @method Invoice first(array|string $columns = [ '*' ])
	 * @method Invoice firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Invoice firstOrCreate(array $attributes = [], array $values = [])
	 * @method Invoice firstOrFail(array $columns = [ '*' ])
	 * @method Invoice firstOrNew(array $attributes = [], array $values = [])
	 * @method Invoice firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Invoice forceCreate(array $attributes)
	 * @method _InvoiceCollection|Invoice[] fromQuery(string $query, array $bindings = [])
	 * @method _InvoiceCollection|Invoice[] get(array|string $columns = [ '*' ])
	 * @method Invoice getModel()
	 * @method Invoice[] getModels(array|string $columns = [ '*' ])
	 * @method _InvoiceCollection|Invoice[] hydrate(array $items)
	 * @method Invoice make(array $attributes = [])
	 * @method Invoice newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Invoice[]|_InvoiceCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Invoice[]|_InvoiceCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Invoice sole(array|string $columns = [ '*' ])
	 * @method Invoice updateOrCreate(array $attributes, array $values = [])
	 */
	class _InvoiceQueryBuilder extends _BaseBuilder { }

	/**
	 * @method InvoiceStatus shift()
	 * @method InvoiceStatus pop()
	 * @method InvoiceStatus get($key, $default = null)
	 * @method InvoiceStatus pull($key, $default = null)
	 * @method InvoiceStatus first(callable $callback = null, $default = null)
	 * @method InvoiceStatus firstWhere(string $key, $operator = null, $value = null)
	 * @method InvoiceStatus[] all()
	 * @method InvoiceStatus last(callable $callback = null, $default = null)
	 * @property-read _InvoiceStatusCollectionProxy $keyBy
	 * @property-read _InvoiceStatusCollectionProxy $partition
	 * @property-read _InvoiceStatusCollectionProxy $max
	 * @property-read _InvoiceStatusCollectionProxy $flatMap
	 * @property-read _InvoiceStatusCollectionProxy $each
	 * @property-read _InvoiceStatusCollectionProxy $map
	 * @property-read _InvoiceStatusCollectionProxy $filter
	 * @property-read _InvoiceStatusCollectionProxy $unique
	 * @property-read _InvoiceStatusCollectionProxy $groupBy
	 * @property-read _InvoiceStatusCollectionProxy $sortBy
	 * @property-read _InvoiceStatusCollectionProxy $contains
	 * @property-read _InvoiceStatusCollectionProxy $sum
	 * @property-read _InvoiceStatusCollectionProxy $until
	 * @property-read _InvoiceStatusCollectionProxy $every
	 * @property-read _InvoiceStatusCollectionProxy $average
	 * @property-read _InvoiceStatusCollectionProxy $some
	 * @property-read _InvoiceStatusCollectionProxy $skipWhile
	 * @property-read _InvoiceStatusCollectionProxy $sortByDesc
	 * @property-read _InvoiceStatusCollectionProxy $takeUntil
	 * @property-read _InvoiceStatusCollectionProxy $avg
	 * @property-read _InvoiceStatusCollectionProxy $skipUntil
	 * @property-read _InvoiceStatusCollectionProxy $first
	 * @property-read _InvoiceStatusCollectionProxy $takeWhile
	 * @property-read _InvoiceStatusCollectionProxy $min
	 * @property-read _InvoiceStatusCollectionProxy $reject
	 */
	class _InvoiceStatusCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return InvoiceStatus[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _InvoiceStatusCollection|mixed $id
	 * @property _InvoiceStatusCollection|mixed $name
	 * @property _InvoiceStatusCollection|mixed $created_at
	 * @property _InvoiceStatusCollection|mixed $updated_at
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _InvoiceStatusCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _InvoiceStatusCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _InvoiceStatusCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _InvoiceStatusCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _InvoiceStatusCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _InvoiceStatusCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _InvoiceStatusCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _InvoiceStatusCollectionProxy { }

	/**
	 * @method _InvoiceStatusQueryBuilder whereId($value)
	 * @method _InvoiceStatusQueryBuilder whereName($value)
	 * @method _InvoiceStatusQueryBuilder whereCreatedAt($value)
	 * @method _InvoiceStatusQueryBuilder whereUpdatedAt($value)
	 * @method InvoiceStatus baseSole(array|string $columns = [ '*' ])
	 * @method InvoiceStatus create(array $attributes = [])
	 * @method _InvoiceStatusCollection|InvoiceStatus[] cursor()
	 * @method InvoiceStatus|null find($id, array $columns = [ '*' ])
	 * @method _InvoiceStatusCollection|InvoiceStatus[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method InvoiceStatus findOrFail($id, array $columns = [ '*' ])
	 * @method _InvoiceStatusCollection|InvoiceStatus[] findOrNew($id, array $columns = [ '*' ])
	 * @method InvoiceStatus first(array|string $columns = [ '*' ])
	 * @method InvoiceStatus firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method InvoiceStatus firstOrCreate(array $attributes = [], array $values = [])
	 * @method InvoiceStatus firstOrFail(array $columns = [ '*' ])
	 * @method InvoiceStatus firstOrNew(array $attributes = [], array $values = [])
	 * @method InvoiceStatus firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method InvoiceStatus forceCreate(array $attributes)
	 * @method _InvoiceStatusCollection|InvoiceStatus[] fromQuery(string $query, array $bindings = [])
	 * @method _InvoiceStatusCollection|InvoiceStatus[] get(array|string $columns = [ '*' ])
	 * @method InvoiceStatus getModel()
	 * @method InvoiceStatus[] getModels(array|string $columns = [ '*' ])
	 * @method _InvoiceStatusCollection|InvoiceStatus[] hydrate(array $items)
	 * @method InvoiceStatus make(array $attributes = [])
	 * @method InvoiceStatus newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|InvoiceStatus[]|_InvoiceStatusCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|InvoiceStatus[]|_InvoiceStatusCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method InvoiceStatus sole(array|string $columns = [ '*' ])
	 * @method InvoiceStatus updateOrCreate(array $attributes, array $values = [])
	 */
	class _InvoiceStatusQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\App\Domain\MarketVehicle\Models {

    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use LaravelIdea\Helper\_BaseCollection;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use App\Domain\MarketVehicle\Models\MarketVehicle;

    /**
	 * @method MarketVehicle shift()
	 * @method MarketVehicle pop()
	 * @method MarketVehicle get($key, $default = null)
	 * @method MarketVehicle pull($key, $default = null)
	 * @method MarketVehicle first(callable $callback = null, $default = null)
	 * @method MarketVehicle firstWhere(string $key, $operator = null, $value = null)
	 * @method MarketVehicle[] all()
	 * @method MarketVehicle last(callable $callback = null, $default = null)
	 * @property-read _MarketVehicleCollectionProxy $keyBy
	 * @property-read _MarketVehicleCollectionProxy $partition
	 * @property-read _MarketVehicleCollectionProxy $max
	 * @property-read _MarketVehicleCollectionProxy $flatMap
	 * @property-read _MarketVehicleCollectionProxy $each
	 * @property-read _MarketVehicleCollectionProxy $map
	 * @property-read _MarketVehicleCollectionProxy $filter
	 * @property-read _MarketVehicleCollectionProxy $unique
	 * @property-read _MarketVehicleCollectionProxy $groupBy
	 * @property-read _MarketVehicleCollectionProxy $sortBy
	 * @property-read _MarketVehicleCollectionProxy $contains
	 * @property-read _MarketVehicleCollectionProxy $sum
	 * @property-read _MarketVehicleCollectionProxy $until
	 * @property-read _MarketVehicleCollectionProxy $every
	 * @property-read _MarketVehicleCollectionProxy $average
	 * @property-read _MarketVehicleCollectionProxy $some
	 * @property-read _MarketVehicleCollectionProxy $skipWhile
	 * @property-read _MarketVehicleCollectionProxy $sortByDesc
	 * @property-read _MarketVehicleCollectionProxy $takeUntil
	 * @property-read _MarketVehicleCollectionProxy $avg
	 * @property-read _MarketVehicleCollectionProxy $skipUntil
	 * @property-read _MarketVehicleCollectionProxy $first
	 * @property-read _MarketVehicleCollectionProxy $takeWhile
	 * @property-read _MarketVehicleCollectionProxy $min
	 * @property-read _MarketVehicleCollectionProxy $reject
	 */
	class _MarketVehicleCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return MarketVehicle[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _MarketVehicleCollection|mixed $id
	 * @property _MarketVehicleCollection|mixed $number
	 * @property _MarketVehicleCollection|mixed $party_id
	 * @property _MarketVehicleCollection|mixed $company_id
	 * @property _MarketVehicleCollection|mixed $created_at
	 * @property _MarketVehicleCollection|mixed $updated_at
	 * @see \App\Domain\MarketVehicle\Models\MarketVehicle::hsd
	 * @method _MarketVehicleCollection hsd($party_id)
	 * @see \App\Domain\MarketVehicle\Models\MarketVehicle::cash_advance
	 * @method _MarketVehicleCollection cash_advance($party_id)
	 * @see \App\Domain\MarketVehicle\Models\MarketVehicle::trips
	 * @method _MarketVehicleCollection trips($party_id)
	 * @see \App\Domain\MarketVehicle\Models\MarketVehicle::all_trips
	 * @method _MarketVehicleCollection all_trips()
	 * @see \App\Domain\MarketVehicle\Models\MarketVehicle::net_weight
	 * @method _MarketVehicleCollection net_weight($party_id)
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _MarketVehicleCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _MarketVehicleCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _MarketVehicleCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _MarketVehicleCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _MarketVehicleCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _MarketVehicleCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _MarketVehicleCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _MarketVehicleCollectionProxy { }

	/**
	 * @method _MarketVehicleQueryBuilder whereId($value)
	 * @method _MarketVehicleQueryBuilder whereNumber($value)
	 * @method _MarketVehicleQueryBuilder wherePartyId($value)
	 * @method _MarketVehicleQueryBuilder whereCompanyId($value)
	 * @method _MarketVehicleQueryBuilder whereCreatedAt($value)
	 * @method _MarketVehicleQueryBuilder whereUpdatedAt($value)
	 * @method MarketVehicle baseSole(array|string $columns = [ '*' ])
	 * @method MarketVehicle create(array $attributes = [])
	 * @method _MarketVehicleCollection|MarketVehicle[] cursor()
	 * @method MarketVehicle|null find($id, array $columns = [ '*' ])
	 * @method _MarketVehicleCollection|MarketVehicle[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method MarketVehicle findOrFail($id, array $columns = [ '*' ])
	 * @method _MarketVehicleCollection|MarketVehicle[] findOrNew($id, array $columns = [ '*' ])
	 * @method MarketVehicle first(array|string $columns = [ '*' ])
	 * @method MarketVehicle firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method MarketVehicle firstOrCreate(array $attributes = [], array $values = [])
	 * @method MarketVehicle firstOrFail(array $columns = [ '*' ])
	 * @method MarketVehicle firstOrNew(array $attributes = [], array $values = [])
	 * @method MarketVehicle firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method MarketVehicle forceCreate(array $attributes)
	 * @method _MarketVehicleCollection|MarketVehicle[] fromQuery(string $query, array $bindings = [])
	 * @method _MarketVehicleCollection|MarketVehicle[] get(array|string $columns = [ '*' ])
	 * @method MarketVehicle getModel()
	 * @method MarketVehicle[] getModels(array|string $columns = [ '*' ])
	 * @method _MarketVehicleCollection|MarketVehicle[] hydrate(array $items)
	 * @method MarketVehicle make(array $attributes = [])
	 * @method MarketVehicle newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|MarketVehicle[]|_MarketVehicleCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|MarketVehicle[]|_MarketVehicleCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method MarketVehicle sole(array|string $columns = [ '*' ])
	 * @method MarketVehicle updateOrCreate(array $attributes, array $values = [])
	 */
	class _MarketVehicleQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\App\Domain\Office\Models {

    use App\Domain\Office\Models\Office;
    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use LaravelIdea\Helper\_BaseCollection;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;

    /**
	 * @method Office shift()
	 * @method Office pop()
	 * @method Office get($key, $default = null)
	 * @method Office pull($key, $default = null)
	 * @method Office first(callable $callback = null, $default = null)
	 * @method Office firstWhere(string $key, $operator = null, $value = null)
	 * @method Office[] all()
	 * @method Office last(callable $callback = null, $default = null)
	 * @property-read _OfficeCollectionProxy $keyBy
	 * @property-read _OfficeCollectionProxy $partition
	 * @property-read _OfficeCollectionProxy $max
	 * @property-read _OfficeCollectionProxy $flatMap
	 * @property-read _OfficeCollectionProxy $each
	 * @property-read _OfficeCollectionProxy $map
	 * @property-read _OfficeCollectionProxy $filter
	 * @property-read _OfficeCollectionProxy $unique
	 * @property-read _OfficeCollectionProxy $groupBy
	 * @property-read _OfficeCollectionProxy $sortBy
	 * @property-read _OfficeCollectionProxy $contains
	 * @property-read _OfficeCollectionProxy $sum
	 * @property-read _OfficeCollectionProxy $until
	 * @property-read _OfficeCollectionProxy $every
	 * @property-read _OfficeCollectionProxy $average
	 * @property-read _OfficeCollectionProxy $some
	 * @property-read _OfficeCollectionProxy $skipWhile
	 * @property-read _OfficeCollectionProxy $sortByDesc
	 * @property-read _OfficeCollectionProxy $takeUntil
	 * @property-read _OfficeCollectionProxy $avg
	 * @property-read _OfficeCollectionProxy $skipUntil
	 * @property-read _OfficeCollectionProxy $first
	 * @property-read _OfficeCollectionProxy $takeWhile
	 * @property-read _OfficeCollectionProxy $min
	 * @property-read _OfficeCollectionProxy $reject
	 */
	class _OfficeCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Office[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _OfficeCollection|mixed $id
	 * @property _OfficeCollection|mixed $name
	 * @property _OfficeCollection|mixed $street_address
	 * @property _OfficeCollection|mixed $city
	 * @property _OfficeCollection|mixed $state
	 * @property _OfficeCollection|mixed $zip
	 * @property _OfficeCollection|mixed $company_id
	 * @property _OfficeCollection|mixed $created_at
	 * @property _OfficeCollection|mixed $updated_at
	 * @property _OfficeCollection|mixed $company
	 * @see \App\Domain\Office\Models\Office::total_employees
	 * @method _OfficeCollection total_employees()
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _OfficeCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _OfficeCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _OfficeCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _OfficeCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _OfficeCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _OfficeCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _OfficeCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _OfficeCollectionProxy { }

	/**
	 * @method _OfficeQueryBuilder whereId($value)
	 * @method _OfficeQueryBuilder whereName($value)
	 * @method _OfficeQueryBuilder whereStreetAddress($value)
	 * @method _OfficeQueryBuilder whereCity($value)
	 * @method _OfficeQueryBuilder whereState($value)
	 * @method _OfficeQueryBuilder whereZip($value)
	 * @method _OfficeQueryBuilder whereCompanyId($value)
	 * @method _OfficeQueryBuilder whereCreatedAt($value)
	 * @method _OfficeQueryBuilder whereUpdatedAt($value)
	 * @method Office baseSole(array|string $columns = [ '*' ])
	 * @method Office create(array $attributes = [])
	 * @method _OfficeCollection|Office[] cursor()
	 * @method Office|null find($id, array $columns = [ '*' ])
	 * @method _OfficeCollection|Office[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Office findOrFail($id, array $columns = [ '*' ])
	 * @method _OfficeCollection|Office[] findOrNew($id, array $columns = [ '*' ])
	 * @method Office first(array|string $columns = [ '*' ])
	 * @method Office firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Office firstOrCreate(array $attributes = [], array $values = [])
	 * @method Office firstOrFail(array $columns = [ '*' ])
	 * @method Office firstOrNew(array $attributes = [], array $values = [])
	 * @method Office firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Office forceCreate(array $attributes)
	 * @method _OfficeCollection|Office[] fromQuery(string $query, array $bindings = [])
	 * @method _OfficeCollection|Office[] get(array|string $columns = [ '*' ])
	 * @method Office getModel()
	 * @method Office[] getModels(array|string $columns = [ '*' ])
	 * @method _OfficeCollection|Office[] hydrate(array $items)
	 * @method Office make(array $attributes = [])
	 * @method Office newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Office[]|_OfficeCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Office[]|_OfficeCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Office sole(array|string $columns = [ '*' ])
	 * @method Office updateOrCreate(array $attributes, array $values = [])
	 */
	class _OfficeQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\App\Domain\Party\Models {

    use App\Domain\Party\Models\Party;
    use Illuminate\Support\Collection;
    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use LaravelIdea\Helper\_BaseCollection;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Spatie\MediaLibrary\MediaCollections\FileAdder;
    use Spatie\MediaLibrary\MediaCollections\Models\Media;
    use Symfony\Component\HttpFoundation\File\UploadedFile;

    /**
	 * @method Party shift()
	 * @method Party pop()
	 * @method Party get($key, $default = null)
	 * @method Party pull($key, $default = null)
	 * @method Party first(callable $callback = null, $default = null)
	 * @method Party firstWhere(string $key, $operator = null, $value = null)
	 * @method Party[] all()
	 * @method Party last(callable $callback = null, $default = null)
	 * @property-read _PartyCollectionProxy $keyBy
	 * @property-read _PartyCollectionProxy $partition
	 * @property-read _PartyCollectionProxy $max
	 * @property-read _PartyCollectionProxy $flatMap
	 * @property-read _PartyCollectionProxy $each
	 * @property-read _PartyCollectionProxy $map
	 * @property-read _PartyCollectionProxy $filter
	 * @property-read _PartyCollectionProxy $unique
	 * @property-read _PartyCollectionProxy $groupBy
	 * @property-read _PartyCollectionProxy $sortBy
	 * @property-read _PartyCollectionProxy $contains
	 * @property-read _PartyCollectionProxy $sum
	 * @property-read _PartyCollectionProxy $until
	 * @property-read _PartyCollectionProxy $every
	 * @property-read _PartyCollectionProxy $average
	 * @property-read _PartyCollectionProxy $some
	 * @property-read _PartyCollectionProxy $skipWhile
	 * @property-read _PartyCollectionProxy $sortByDesc
	 * @property-read _PartyCollectionProxy $takeUntil
	 * @property-read _PartyCollectionProxy $avg
	 * @property-read _PartyCollectionProxy $skipUntil
	 * @property-read _PartyCollectionProxy $first
	 * @property-read _PartyCollectionProxy $takeWhile
	 * @property-read _PartyCollectionProxy $min
	 * @property-read _PartyCollectionProxy $reject
	 */
	class _PartyCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Party[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _PartyCollection|mixed $id
	 * @property _PartyCollection|mixed $name
	 * @property _PartyCollection|mixed $pan
	 * @property _PartyCollection|mixed $company_id
	 * @property _PartyCollection|mixed $razorpay_contact_id
	 * @property _PartyCollection|mixed $created_at
	 * @property _PartyCollection|mixed $updated_at
	 * @see \App\Domain\Party\Models\Party::totalBusiness
	 * @method _PartyCollection totalBusiness()
	 * @see \App\Domain\Party\Models\Party::phoneNumber
	 * @method _PartyCollection phoneNumber()
	 * @see \App\Domain\Party\Models\Party::totalMaterialTransported
	 * @method _PartyCollection totalMaterialTransported()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::clearMediaCollection
	 * @method _PartyCollection clearMediaCollection(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::hasMedia
	 * @method _PartyCollection hasMedia(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaCollection
	 * @method _PartyCollection addMediaCollection(string $name)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::deleteMedia
	 * @method _PartyCollection deleteMedia(int|Media $mediaId)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFirstMediaPath
	 * @method _PartyCollection getFirstMediaPath(string $collectionName = 'default', string $conversionName = '')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getMediaCollection
	 * @method _PartyCollection getMediaCollection(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::shouldDeletePreservingMedia
	 * @method _PartyCollection shouldDeletePreservingMedia()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMultipleMediaFromRequest
	 * @method _PartyCollection addMultipleMediaFromRequest(array $keys)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addAllMediaFromRequest
	 * @method _PartyCollection addAllMediaFromRequest()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFallbackMediaUrl
	 * @method _PartyCollection getFallbackMediaUrl(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::registerMediaCollections
	 * @method _PartyCollection registerMediaCollections()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::registerMediaConversions
	 * @method _PartyCollection registerMediaConversions(Media $media = null)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::syncFromMediaLibraryRequest
	 * @method _PartyCollection syncFromMediaLibraryRequest(array|null $mediaLibraryRequestItems)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaConversion
	 * @method _PartyCollection addMediaConversion(string $name)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::registerAllMediaConversions
	 * @method _PartyCollection registerAllMediaConversions(Media $media = null)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::loadMedia
	 * @method _PartyCollection loadMedia(string $collectionName)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::updateMedia
	 * @method _PartyCollection updateMedia(array $newMediaArray, string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::deletePreservingMedia
	 * @method _PartyCollection deletePreservingMedia()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromDisk
	 * @method _PartyCollection addMediaFromDisk(string $key, string $disk = null)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFirstMediaUrl
	 * @method _PartyCollection getFirstMediaUrl(string $collectionName = 'default', string $conversionName = '')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromUrl
	 * @method _PartyCollection addMediaFromUrl(string $url, ...$allowedMimeTypes)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMedia
	 * @method _PartyCollection addMedia(string|UploadedFile $file)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::copyMedia
	 * @method _PartyCollection copyMedia(string|UploadedFile $file)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromString
	 * @method _PartyCollection addMediaFromString(string $text)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromRequest
	 * @method _PartyCollection addMediaFromRequest(string $key)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFirstTemporaryUrl
	 * @method _PartyCollection getFirstTemporaryUrl(\DateTimeInterface $expiration, string $collectionName = 'default', string $conversionName = '')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFallbackMediaPath
	 * @method _PartyCollection getFallbackMediaPath(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromBase64
	 * @method _PartyCollection addMediaFromBase64(string $base64data, ...$allowedMimeTypes)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getMedia
	 * @method _PartyCollection getMedia(string $collectionName = 'default', array|callable $filters = [])
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getRegisteredMediaCollections
	 * @method _PartyCollection getRegisteredMediaCollections()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFirstMedia
	 * @method _PartyCollection getFirstMedia(string $collectionName = 'default', $filters = [])
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::clearMediaCollectionExcept
	 * @method _PartyCollection clearMediaCollectionExcept(string $collectionName = 'default', Collection|Media[] $excludedMedia = [])
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addFromMediaLibraryRequest
	 * @method _PartyCollection addFromMediaLibraryRequest(array|null $mediaLibraryRequestItems)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::processUnattachedMedia
	 * @method _PartyCollection processUnattachedMedia(callable $callable)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::prepareToAttachMedia
	 * @method _PartyCollection prepareToAttachMedia(Media $media, FileAdder $fileAdder)
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _PartyCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _PartyCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _PartyCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _PartyCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _PartyCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _PartyCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _PartyCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _PartyCollectionProxy { }

	/**
	 * @method _PartyQueryBuilder whereId($value)
	 * @method _PartyQueryBuilder whereName($value)
	 * @method _PartyQueryBuilder wherePan($value)
	 * @method _PartyQueryBuilder whereCompanyId($value)
	 * @method _PartyQueryBuilder whereRazorpayContactId($value)
	 * @method _PartyQueryBuilder whereCreatedAt($value)
	 * @method _PartyQueryBuilder whereUpdatedAt($value)
	 * @method Party baseSole(array|string $columns = [ '*' ])
	 * @method Party create(array $attributes = [])
	 * @method _PartyCollection|Party[] cursor()
	 * @method Party|null find($id, array $columns = [ '*' ])
	 * @method _PartyCollection|Party[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Party findOrFail($id, array $columns = [ '*' ])
	 * @method _PartyCollection|Party[] findOrNew($id, array $columns = [ '*' ])
	 * @method Party first(array|string $columns = [ '*' ])
	 * @method Party firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Party firstOrCreate(array $attributes = [], array $values = [])
	 * @method Party firstOrFail(array $columns = [ '*' ])
	 * @method Party firstOrNew(array $attributes = [], array $values = [])
	 * @method Party firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Party forceCreate(array $attributes)
	 * @method _PartyCollection|Party[] fromQuery(string $query, array $bindings = [])
	 * @method _PartyCollection|Party[] get(array|string $columns = [ '*' ])
	 * @method Party getModel()
	 * @method Party[] getModels(array|string $columns = [ '*' ])
	 * @method _PartyCollection|Party[] hydrate(array $items)
	 * @method Party make(array $attributes = [])
	 * @method Party newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Party[]|_PartyCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Party[]|_PartyCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Party sole(array|string $columns = [ '*' ])
	 * @method Party updateOrCreate(array $attributes, array $values = [])
	 */
	class _PartyQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\App\Domain\Payment\Models {

    use Illuminate\Support\Collection;
    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use App\Domain\Payment\Models\Payment;
    use LaravelIdea\Helper\_BaseCollection;
    use Illuminate\Database\Query\Expression;
    use App\Domain\Payment\Models\BankAccount;
    use App\Domain\Payment\Models\TaxCategory;
    use Illuminate\Contracts\Support\Arrayable;
    use App\Domain\Payment\Models\PaymentMethod;
    use App\Domain\Payment\Models\PaymentStatus;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Spatie\MediaLibrary\MediaCollections\FileAdder;
    use Spatie\MediaLibrary\MediaCollections\Models\Media;
    use Symfony\Component\HttpFoundation\File\UploadedFile;

    /**
	 * @method BankAccount shift()
	 * @method BankAccount pop()
	 * @method BankAccount get($key, $default = null)
	 * @method BankAccount pull($key, $default = null)
	 * @method BankAccount first(callable $callback = null, $default = null)
	 * @method BankAccount firstWhere(string $key, $operator = null, $value = null)
	 * @method BankAccount[] all()
	 * @method BankAccount last(callable $callback = null, $default = null)
	 * @property-read _BankAccountCollectionProxy $keyBy
	 * @property-read _BankAccountCollectionProxy $partition
	 * @property-read _BankAccountCollectionProxy $max
	 * @property-read _BankAccountCollectionProxy $flatMap
	 * @property-read _BankAccountCollectionProxy $each
	 * @property-read _BankAccountCollectionProxy $map
	 * @property-read _BankAccountCollectionProxy $filter
	 * @property-read _BankAccountCollectionProxy $unique
	 * @property-read _BankAccountCollectionProxy $groupBy
	 * @property-read _BankAccountCollectionProxy $sortBy
	 * @property-read _BankAccountCollectionProxy $contains
	 * @property-read _BankAccountCollectionProxy $sum
	 * @property-read _BankAccountCollectionProxy $until
	 * @property-read _BankAccountCollectionProxy $every
	 * @property-read _BankAccountCollectionProxy $average
	 * @property-read _BankAccountCollectionProxy $some
	 * @property-read _BankAccountCollectionProxy $skipWhile
	 * @property-read _BankAccountCollectionProxy $sortByDesc
	 * @property-read _BankAccountCollectionProxy $takeUntil
	 * @property-read _BankAccountCollectionProxy $avg
	 * @property-read _BankAccountCollectionProxy $skipUntil
	 * @property-read _BankAccountCollectionProxy $first
	 * @property-read _BankAccountCollectionProxy $takeWhile
	 * @property-read _BankAccountCollectionProxy $min
	 * @property-read _BankAccountCollectionProxy $reject
	 */
	class _BankAccountCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return BankAccount[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _BankAccountCollection|mixed $id
	 * @property _BankAccountCollection|mixed $account_name
	 * @property _BankAccountCollection|mixed $account_number
	 * @property _BankAccountCollection|mixed $ifsc_code
	 * @property _BankAccountCollection|mixed $bankable_id
	 * @property _BankAccountCollection|mixed $bankable_type
	 * @property _BankAccountCollection|mixed $created_at
	 * @property _BankAccountCollection|mixed $updated_at
	 * @property _BankAccountCollection|mixed $bankable
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _BankAccountCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _BankAccountCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _BankAccountCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _BankAccountCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _BankAccountCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _BankAccountCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _BankAccountCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _BankAccountCollectionProxy { }

	/**
	 * @method _BankAccountQueryBuilder whereId($value)
	 * @method _BankAccountQueryBuilder whereAccountName($value)
	 * @method _BankAccountQueryBuilder whereAccountNumber($value)
	 * @method _BankAccountQueryBuilder whereIfscCode($value)
	 * @method _BankAccountQueryBuilder whereBankableId($value)
	 * @method _BankAccountQueryBuilder whereBankableType($value)
	 * @method _BankAccountQueryBuilder whereCreatedAt($value)
	 * @method _BankAccountQueryBuilder whereUpdatedAt($value)
	 * @method BankAccount baseSole(array|string $columns = [ '*' ])
	 * @method BankAccount create(array $attributes = [])
	 * @method _BankAccountCollection|BankAccount[] cursor()
	 * @method BankAccount|null find($id, array $columns = [ '*' ])
	 * @method _BankAccountCollection|BankAccount[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method BankAccount findOrFail($id, array $columns = [ '*' ])
	 * @method _BankAccountCollection|BankAccount[] findOrNew($id, array $columns = [ '*' ])
	 * @method BankAccount first(array|string $columns = [ '*' ])
	 * @method BankAccount firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method BankAccount firstOrCreate(array $attributes = [], array $values = [])
	 * @method BankAccount firstOrFail(array $columns = [ '*' ])
	 * @method BankAccount firstOrNew(array $attributes = [], array $values = [])
	 * @method BankAccount firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method BankAccount forceCreate(array $attributes)
	 * @method _BankAccountCollection|BankAccount[] fromQuery(string $query, array $bindings = [])
	 * @method _BankAccountCollection|BankAccount[] get(array|string $columns = [ '*' ])
	 * @method BankAccount getModel()
	 * @method BankAccount[] getModels(array|string $columns = [ '*' ])
	 * @method _BankAccountCollection|BankAccount[] hydrate(array $items)
	 * @method BankAccount make(array $attributes = [])
	 * @method BankAccount newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|BankAccount[]|_BankAccountCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|BankAccount[]|_BankAccountCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method BankAccount sole(array|string $columns = [ '*' ])
	 * @method BankAccount updateOrCreate(array $attributes, array $values = [])
	 */
	class _BankAccountQueryBuilder extends _BaseBuilder { }

	/**
	 * @method Payment shift()
	 * @method Payment pop()
	 * @method Payment get($key, $default = null)
	 * @method Payment pull($key, $default = null)
	 * @method Payment first(callable $callback = null, $default = null)
	 * @method Payment firstWhere(string $key, $operator = null, $value = null)
	 * @method Payment[] all()
	 * @method Payment last(callable $callback = null, $default = null)
	 * @property-read _PaymentCollectionProxy $keyBy
	 * @property-read _PaymentCollectionProxy $partition
	 * @property-read _PaymentCollectionProxy $max
	 * @property-read _PaymentCollectionProxy $flatMap
	 * @property-read _PaymentCollectionProxy $each
	 * @property-read _PaymentCollectionProxy $map
	 * @property-read _PaymentCollectionProxy $filter
	 * @property-read _PaymentCollectionProxy $unique
	 * @property-read _PaymentCollectionProxy $groupBy
	 * @property-read _PaymentCollectionProxy $sortBy
	 * @property-read _PaymentCollectionProxy $contains
	 * @property-read _PaymentCollectionProxy $sum
	 * @property-read _PaymentCollectionProxy $until
	 * @property-read _PaymentCollectionProxy $every
	 * @property-read _PaymentCollectionProxy $average
	 * @property-read _PaymentCollectionProxy $some
	 * @property-read _PaymentCollectionProxy $skipWhile
	 * @property-read _PaymentCollectionProxy $sortByDesc
	 * @property-read _PaymentCollectionProxy $takeUntil
	 * @property-read _PaymentCollectionProxy $avg
	 * @property-read _PaymentCollectionProxy $skipUntil
	 * @property-read _PaymentCollectionProxy $first
	 * @property-read _PaymentCollectionProxy $takeWhile
	 * @property-read _PaymentCollectionProxy $min
	 * @property-read _PaymentCollectionProxy $reject
	 */
	class _PaymentCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Payment[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _PaymentCollection|mixed $id
	 * @property _PaymentCollection|mixed $amount
	 * @property _PaymentCollection|mixed $bank_account_id
	 * @property _PaymentCollection|mixed $payment_method_id
	 * @property _PaymentCollection|mixed $payment_status_id
	 * @property _PaymentCollection|mixed $company_id
	 * @property _PaymentCollection|mixed $fees
	 * @property _PaymentCollection|mixed $remarks
	 * @property _PaymentCollection|mixed $created_by
	 * @property _PaymentCollection|mixed $finished_by
	 * @property _PaymentCollection|mixed $created_at
	 * @property _PaymentCollection|mixed $updated_at
	 * @property _PaymentCollection|mixed $trip_id
	 * @property _PaymentCollection|mixed $bankAccount
	 * @property _PaymentCollection|mixed $method
	 * @property _PaymentCollection|mixed $status
	 * @property _PaymentCollection|mixed $trip
	 * @see \App\Domain\Payment\Models\Payment::type
	 * @method _PaymentCollection type()
	 * @see \App\Domain\Payment\Models\Payment::getAmountAttribute
	 * @method _PaymentCollection getAmountAttribute($amount)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::clearMediaCollection
	 * @method _PaymentCollection clearMediaCollection(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::hasMedia
	 * @method _PaymentCollection hasMedia(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaCollection
	 * @method _PaymentCollection addMediaCollection(string $name)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::deleteMedia
	 * @method _PaymentCollection deleteMedia(int|Media $mediaId)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFirstMediaPath
	 * @method _PaymentCollection getFirstMediaPath(string $collectionName = 'default', string $conversionName = '')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getMediaCollection
	 * @method _PaymentCollection getMediaCollection(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::shouldDeletePreservingMedia
	 * @method _PaymentCollection shouldDeletePreservingMedia()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMultipleMediaFromRequest
	 * @method _PaymentCollection addMultipleMediaFromRequest(array $keys)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addAllMediaFromRequest
	 * @method _PaymentCollection addAllMediaFromRequest()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFallbackMediaUrl
	 * @method _PaymentCollection getFallbackMediaUrl(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::registerMediaCollections
	 * @method _PaymentCollection registerMediaCollections()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::registerMediaConversions
	 * @method _PaymentCollection registerMediaConversions(Media $media = null)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::syncFromMediaLibraryRequest
	 * @method _PaymentCollection syncFromMediaLibraryRequest(array|null $mediaLibraryRequestItems)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaConversion
	 * @method _PaymentCollection addMediaConversion(string $name)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::registerAllMediaConversions
	 * @method _PaymentCollection registerAllMediaConversions(Media $media = null)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::loadMedia
	 * @method _PaymentCollection loadMedia(string $collectionName)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::updateMedia
	 * @method _PaymentCollection updateMedia(array $newMediaArray, string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::deletePreservingMedia
	 * @method _PaymentCollection deletePreservingMedia()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromDisk
	 * @method _PaymentCollection addMediaFromDisk(string $key, string $disk = null)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFirstMediaUrl
	 * @method _PaymentCollection getFirstMediaUrl(string $collectionName = 'default', string $conversionName = '')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromUrl
	 * @method _PaymentCollection addMediaFromUrl(string $url, ...$allowedMimeTypes)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMedia
	 * @method _PaymentCollection addMedia(string|UploadedFile $file)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::copyMedia
	 * @method _PaymentCollection copyMedia(string|UploadedFile $file)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromString
	 * @method _PaymentCollection addMediaFromString(string $text)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromRequest
	 * @method _PaymentCollection addMediaFromRequest(string $key)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFirstTemporaryUrl
	 * @method _PaymentCollection getFirstTemporaryUrl(\DateTimeInterface $expiration, string $collectionName = 'default', string $conversionName = '')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFallbackMediaPath
	 * @method _PaymentCollection getFallbackMediaPath(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromBase64
	 * @method _PaymentCollection addMediaFromBase64(string $base64data, ...$allowedMimeTypes)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getMedia
	 * @method _PaymentCollection getMedia(string $collectionName = 'default', array|callable $filters = [])
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getRegisteredMediaCollections
	 * @method _PaymentCollection getRegisteredMediaCollections()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFirstMedia
	 * @method _PaymentCollection getFirstMedia(string $collectionName = 'default', $filters = [])
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::clearMediaCollectionExcept
	 * @method _PaymentCollection clearMediaCollectionExcept(string $collectionName = 'default', Collection|Media[] $excludedMedia = [])
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addFromMediaLibraryRequest
	 * @method _PaymentCollection addFromMediaLibraryRequest(array|null $mediaLibraryRequestItems)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::processUnattachedMedia
	 * @method _PaymentCollection processUnattachedMedia(callable $callable)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::prepareToAttachMedia
	 * @method _PaymentCollection prepareToAttachMedia(Media $media, FileAdder $fileAdder)
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _PaymentCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _PaymentCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _PaymentCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _PaymentCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _PaymentCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _PaymentCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _PaymentCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _PaymentCollectionProxy { }

	/**
	 * @method PaymentMethod shift()
	 * @method PaymentMethod pop()
	 * @method PaymentMethod get($key, $default = null)
	 * @method PaymentMethod pull($key, $default = null)
	 * @method PaymentMethod first(callable $callback = null, $default = null)
	 * @method PaymentMethod firstWhere(string $key, $operator = null, $value = null)
	 * @method PaymentMethod[] all()
	 * @method PaymentMethod last(callable $callback = null, $default = null)
	 * @property-read _PaymentMethodCollectionProxy $keyBy
	 * @property-read _PaymentMethodCollectionProxy $partition
	 * @property-read _PaymentMethodCollectionProxy $max
	 * @property-read _PaymentMethodCollectionProxy $flatMap
	 * @property-read _PaymentMethodCollectionProxy $each
	 * @property-read _PaymentMethodCollectionProxy $map
	 * @property-read _PaymentMethodCollectionProxy $filter
	 * @property-read _PaymentMethodCollectionProxy $unique
	 * @property-read _PaymentMethodCollectionProxy $groupBy
	 * @property-read _PaymentMethodCollectionProxy $sortBy
	 * @property-read _PaymentMethodCollectionProxy $contains
	 * @property-read _PaymentMethodCollectionProxy $sum
	 * @property-read _PaymentMethodCollectionProxy $until
	 * @property-read _PaymentMethodCollectionProxy $every
	 * @property-read _PaymentMethodCollectionProxy $average
	 * @property-read _PaymentMethodCollectionProxy $some
	 * @property-read _PaymentMethodCollectionProxy $skipWhile
	 * @property-read _PaymentMethodCollectionProxy $sortByDesc
	 * @property-read _PaymentMethodCollectionProxy $takeUntil
	 * @property-read _PaymentMethodCollectionProxy $avg
	 * @property-read _PaymentMethodCollectionProxy $skipUntil
	 * @property-read _PaymentMethodCollectionProxy $first
	 * @property-read _PaymentMethodCollectionProxy $takeWhile
	 * @property-read _PaymentMethodCollectionProxy $min
	 * @property-read _PaymentMethodCollectionProxy $reject
	 */
	class _PaymentMethodCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return PaymentMethod[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _PaymentMethodCollection|mixed $id
	 * @property _PaymentMethodCollection|mixed $name
	 * @property _PaymentMethodCollection|mixed $created_at
	 * @property _PaymentMethodCollection|mixed $updated_at
	 * @property _PaymentMethodCollection|mixed $paymentable
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _PaymentMethodCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _PaymentMethodCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _PaymentMethodCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _PaymentMethodCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _PaymentMethodCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _PaymentMethodCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _PaymentMethodCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _PaymentMethodCollectionProxy { }

	/**
	 * @method _PaymentMethodQueryBuilder whereId($value)
	 * @method _PaymentMethodQueryBuilder whereName($value)
	 * @method _PaymentMethodQueryBuilder whereCreatedAt($value)
	 * @method _PaymentMethodQueryBuilder whereUpdatedAt($value)
	 * @method PaymentMethod baseSole(array|string $columns = [ '*' ])
	 * @method PaymentMethod create(array $attributes = [])
	 * @method _PaymentMethodCollection|PaymentMethod[] cursor()
	 * @method PaymentMethod|null find($id, array $columns = [ '*' ])
	 * @method _PaymentMethodCollection|PaymentMethod[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method PaymentMethod findOrFail($id, array $columns = [ '*' ])
	 * @method _PaymentMethodCollection|PaymentMethod[] findOrNew($id, array $columns = [ '*' ])
	 * @method PaymentMethod first(array|string $columns = [ '*' ])
	 * @method PaymentMethod firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method PaymentMethod firstOrCreate(array $attributes = [], array $values = [])
	 * @method PaymentMethod firstOrFail(array $columns = [ '*' ])
	 * @method PaymentMethod firstOrNew(array $attributes = [], array $values = [])
	 * @method PaymentMethod firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PaymentMethod forceCreate(array $attributes)
	 * @method _PaymentMethodCollection|PaymentMethod[] fromQuery(string $query, array $bindings = [])
	 * @method _PaymentMethodCollection|PaymentMethod[] get(array|string $columns = [ '*' ])
	 * @method PaymentMethod getModel()
	 * @method PaymentMethod[] getModels(array|string $columns = [ '*' ])
	 * @method _PaymentMethodCollection|PaymentMethod[] hydrate(array $items)
	 * @method PaymentMethod make(array $attributes = [])
	 * @method PaymentMethod newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|PaymentMethod[]|_PaymentMethodCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|PaymentMethod[]|_PaymentMethodCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method PaymentMethod sole(array|string $columns = [ '*' ])
	 * @method PaymentMethod updateOrCreate(array $attributes, array $values = [])
	 */
	class _PaymentMethodQueryBuilder extends _BaseBuilder { }

	/**
	 * @method _PaymentQueryBuilder whereId($value)
	 * @method _PaymentQueryBuilder whereAmount($value)
	 * @method _PaymentQueryBuilder whereBankAccountId($value)
	 * @method _PaymentQueryBuilder wherePaymentMethodId($value)
	 * @method _PaymentQueryBuilder wherePaymentStatusId($value)
	 * @method _PaymentQueryBuilder whereCompanyId($value)
	 * @method _PaymentQueryBuilder whereFees($value)
	 * @method _PaymentQueryBuilder whereRemarks($value)
	 * @method _PaymentQueryBuilder whereCreatedBy($value)
	 * @method _PaymentQueryBuilder whereFinishedBy($value)
	 * @method _PaymentQueryBuilder whereCreatedAt($value)
	 * @method _PaymentQueryBuilder whereUpdatedAt($value)
	 * @method _PaymentQueryBuilder whereTripId($value)
	 * @method Payment baseSole(array|string $columns = [ '*' ])
	 * @method Payment create(array $attributes = [])
	 * @method _PaymentCollection|Payment[] cursor()
	 * @method Payment|null find($id, array $columns = [ '*' ])
	 * @method _PaymentCollection|Payment[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Payment findOrFail($id, array $columns = [ '*' ])
	 * @method _PaymentCollection|Payment[] findOrNew($id, array $columns = [ '*' ])
	 * @method Payment first(array|string $columns = [ '*' ])
	 * @method Payment firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Payment firstOrCreate(array $attributes = [], array $values = [])
	 * @method Payment firstOrFail(array $columns = [ '*' ])
	 * @method Payment firstOrNew(array $attributes = [], array $values = [])
	 * @method Payment firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Payment forceCreate(array $attributes)
	 * @method _PaymentCollection|Payment[] fromQuery(string $query, array $bindings = [])
	 * @method _PaymentCollection|Payment[] get(array|string $columns = [ '*' ])
	 * @method Payment getModel()
	 * @method Payment[] getModels(array|string $columns = [ '*' ])
	 * @method _PaymentCollection|Payment[] hydrate(array $items)
	 * @method Payment make(array $attributes = [])
	 * @method Payment newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Payment[]|_PaymentCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Payment[]|_PaymentCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Payment sole(array|string $columns = [ '*' ])
	 * @method Payment updateOrCreate(array $attributes, array $values = [])
	 */
	class _PaymentQueryBuilder extends _BaseBuilder { }

	/**
	 * @method PaymentStatus shift()
	 * @method PaymentStatus pop()
	 * @method PaymentStatus get($key, $default = null)
	 * @method PaymentStatus pull($key, $default = null)
	 * @method PaymentStatus first(callable $callback = null, $default = null)
	 * @method PaymentStatus firstWhere(string $key, $operator = null, $value = null)
	 * @method PaymentStatus[] all()
	 * @method PaymentStatus last(callable $callback = null, $default = null)
	 * @property-read _PaymentStatusCollectionProxy $keyBy
	 * @property-read _PaymentStatusCollectionProxy $partition
	 * @property-read _PaymentStatusCollectionProxy $max
	 * @property-read _PaymentStatusCollectionProxy $flatMap
	 * @property-read _PaymentStatusCollectionProxy $each
	 * @property-read _PaymentStatusCollectionProxy $map
	 * @property-read _PaymentStatusCollectionProxy $filter
	 * @property-read _PaymentStatusCollectionProxy $unique
	 * @property-read _PaymentStatusCollectionProxy $groupBy
	 * @property-read _PaymentStatusCollectionProxy $sortBy
	 * @property-read _PaymentStatusCollectionProxy $contains
	 * @property-read _PaymentStatusCollectionProxy $sum
	 * @property-read _PaymentStatusCollectionProxy $until
	 * @property-read _PaymentStatusCollectionProxy $every
	 * @property-read _PaymentStatusCollectionProxy $average
	 * @property-read _PaymentStatusCollectionProxy $some
	 * @property-read _PaymentStatusCollectionProxy $skipWhile
	 * @property-read _PaymentStatusCollectionProxy $sortByDesc
	 * @property-read _PaymentStatusCollectionProxy $takeUntil
	 * @property-read _PaymentStatusCollectionProxy $avg
	 * @property-read _PaymentStatusCollectionProxy $skipUntil
	 * @property-read _PaymentStatusCollectionProxy $first
	 * @property-read _PaymentStatusCollectionProxy $takeWhile
	 * @property-read _PaymentStatusCollectionProxy $min
	 * @property-read _PaymentStatusCollectionProxy $reject
	 */
	class _PaymentStatusCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return PaymentStatus[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _PaymentStatusCollection|mixed $id
	 * @property _PaymentStatusCollection|mixed $name
	 * @property _PaymentStatusCollection|mixed $desc
	 * @property _PaymentStatusCollection|mixed $created_at
	 * @property _PaymentStatusCollection|mixed $updated_at
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _PaymentStatusCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _PaymentStatusCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _PaymentStatusCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _PaymentStatusCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _PaymentStatusCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _PaymentStatusCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _PaymentStatusCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _PaymentStatusCollectionProxy { }

	/**
	 * @method _PaymentStatusQueryBuilder whereId($value)
	 * @method _PaymentStatusQueryBuilder whereName($value)
	 * @method _PaymentStatusQueryBuilder whereDesc($value)
	 * @method _PaymentStatusQueryBuilder whereCreatedAt($value)
	 * @method _PaymentStatusQueryBuilder whereUpdatedAt($value)
	 * @method PaymentStatus baseSole(array|string $columns = [ '*' ])
	 * @method PaymentStatus create(array $attributes = [])
	 * @method _PaymentStatusCollection|PaymentStatus[] cursor()
	 * @method PaymentStatus|null find($id, array $columns = [ '*' ])
	 * @method _PaymentStatusCollection|PaymentStatus[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method PaymentStatus findOrFail($id, array $columns = [ '*' ])
	 * @method _PaymentStatusCollection|PaymentStatus[] findOrNew($id, array $columns = [ '*' ])
	 * @method PaymentStatus first(array|string $columns = [ '*' ])
	 * @method PaymentStatus firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method PaymentStatus firstOrCreate(array $attributes = [], array $values = [])
	 * @method PaymentStatus firstOrFail(array $columns = [ '*' ])
	 * @method PaymentStatus firstOrNew(array $attributes = [], array $values = [])
	 * @method PaymentStatus firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PaymentStatus forceCreate(array $attributes)
	 * @method _PaymentStatusCollection|PaymentStatus[] fromQuery(string $query, array $bindings = [])
	 * @method _PaymentStatusCollection|PaymentStatus[] get(array|string $columns = [ '*' ])
	 * @method PaymentStatus getModel()
	 * @method PaymentStatus[] getModels(array|string $columns = [ '*' ])
	 * @method _PaymentStatusCollection|PaymentStatus[] hydrate(array $items)
	 * @method PaymentStatus make(array $attributes = [])
	 * @method PaymentStatus newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|PaymentStatus[]|_PaymentStatusCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|PaymentStatus[]|_PaymentStatusCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method PaymentStatus sole(array|string $columns = [ '*' ])
	 * @method PaymentStatus updateOrCreate(array $attributes, array $values = [])
	 */
	class _PaymentStatusQueryBuilder extends _BaseBuilder { }

	/**
	 * @method TaxCategory shift()
	 * @method TaxCategory pop()
	 * @method TaxCategory get($key, $default = null)
	 * @method TaxCategory pull($key, $default = null)
	 * @method TaxCategory first(callable $callback = null, $default = null)
	 * @method TaxCategory firstWhere(string $key, $operator = null, $value = null)
	 * @method TaxCategory[] all()
	 * @method TaxCategory last(callable $callback = null, $default = null)
	 * @property-read _TaxCategoryCollectionProxy $keyBy
	 * @property-read _TaxCategoryCollectionProxy $partition
	 * @property-read _TaxCategoryCollectionProxy $max
	 * @property-read _TaxCategoryCollectionProxy $flatMap
	 * @property-read _TaxCategoryCollectionProxy $each
	 * @property-read _TaxCategoryCollectionProxy $map
	 * @property-read _TaxCategoryCollectionProxy $filter
	 * @property-read _TaxCategoryCollectionProxy $unique
	 * @property-read _TaxCategoryCollectionProxy $groupBy
	 * @property-read _TaxCategoryCollectionProxy $sortBy
	 * @property-read _TaxCategoryCollectionProxy $contains
	 * @property-read _TaxCategoryCollectionProxy $sum
	 * @property-read _TaxCategoryCollectionProxy $until
	 * @property-read _TaxCategoryCollectionProxy $every
	 * @property-read _TaxCategoryCollectionProxy $average
	 * @property-read _TaxCategoryCollectionProxy $some
	 * @property-read _TaxCategoryCollectionProxy $skipWhile
	 * @property-read _TaxCategoryCollectionProxy $sortByDesc
	 * @property-read _TaxCategoryCollectionProxy $takeUntil
	 * @property-read _TaxCategoryCollectionProxy $avg
	 * @property-read _TaxCategoryCollectionProxy $skipUntil
	 * @property-read _TaxCategoryCollectionProxy $first
	 * @property-read _TaxCategoryCollectionProxy $takeWhile
	 * @property-read _TaxCategoryCollectionProxy $min
	 * @property-read _TaxCategoryCollectionProxy $reject
	 */
	class _TaxCategoryCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return TaxCategory[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _TaxCategoryCollection|mixed $id
	 * @property _TaxCategoryCollection|mixed $section
	 * @property _TaxCategoryCollection|mixed $percentage
	 * @property _TaxCategoryCollection|mixed $created_at
	 * @property _TaxCategoryCollection|mixed $updated_at
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _TaxCategoryCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _TaxCategoryCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _TaxCategoryCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _TaxCategoryCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _TaxCategoryCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _TaxCategoryCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _TaxCategoryCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _TaxCategoryCollectionProxy { }

	/**
	 * @method _TaxCategoryQueryBuilder whereId($value)
	 * @method _TaxCategoryQueryBuilder whereSection($value)
	 * @method _TaxCategoryQueryBuilder wherePercentage($value)
	 * @method _TaxCategoryQueryBuilder whereCreatedAt($value)
	 * @method _TaxCategoryQueryBuilder whereUpdatedAt($value)
	 * @method TaxCategory baseSole(array|string $columns = [ '*' ])
	 * @method TaxCategory create(array $attributes = [])
	 * @method _TaxCategoryCollection|TaxCategory[] cursor()
	 * @method TaxCategory|null find($id, array $columns = [ '*' ])
	 * @method _TaxCategoryCollection|TaxCategory[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method TaxCategory findOrFail($id, array $columns = [ '*' ])
	 * @method _TaxCategoryCollection|TaxCategory[] findOrNew($id, array $columns = [ '*' ])
	 * @method TaxCategory first(array|string $columns = [ '*' ])
	 * @method TaxCategory firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method TaxCategory firstOrCreate(array $attributes = [], array $values = [])
	 * @method TaxCategory firstOrFail(array $columns = [ '*' ])
	 * @method TaxCategory firstOrNew(array $attributes = [], array $values = [])
	 * @method TaxCategory firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method TaxCategory forceCreate(array $attributes)
	 * @method _TaxCategoryCollection|TaxCategory[] fromQuery(string $query, array $bindings = [])
	 * @method _TaxCategoryCollection|TaxCategory[] get(array|string $columns = [ '*' ])
	 * @method TaxCategory getModel()
	 * @method TaxCategory[] getModels(array|string $columns = [ '*' ])
	 * @method _TaxCategoryCollection|TaxCategory[] hydrate(array $items)
	 * @method TaxCategory make(array $attributes = [])
	 * @method TaxCategory newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|TaxCategory[]|_TaxCategoryCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|TaxCategory[]|_TaxCategoryCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method TaxCategory sole(array|string $columns = [ '*' ])
	 * @method TaxCategory updateOrCreate(array $attributes, array $values = [])
	 */
	class _TaxCategoryQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\App\Domain\Project\Models {

    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use App\Domain\Project\Models\Project;
    use LaravelIdea\Helper\_BaseCollection;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;

    /**
	 * @method Project shift()
	 * @method Project pop()
	 * @method Project get($key, $default = null)
	 * @method Project pull($key, $default = null)
	 * @method Project first(callable $callback = null, $default = null)
	 * @method Project firstWhere(string $key, $operator = null, $value = null)
	 * @method Project[] all()
	 * @method Project last(callable $callback = null, $default = null)
	 * @property-read _ProjectCollectionProxy $keyBy
	 * @property-read _ProjectCollectionProxy $partition
	 * @property-read _ProjectCollectionProxy $max
	 * @property-read _ProjectCollectionProxy $flatMap
	 * @property-read _ProjectCollectionProxy $each
	 * @property-read _ProjectCollectionProxy $map
	 * @property-read _ProjectCollectionProxy $filter
	 * @property-read _ProjectCollectionProxy $unique
	 * @property-read _ProjectCollectionProxy $groupBy
	 * @property-read _ProjectCollectionProxy $sortBy
	 * @property-read _ProjectCollectionProxy $contains
	 * @property-read _ProjectCollectionProxy $sum
	 * @property-read _ProjectCollectionProxy $until
	 * @property-read _ProjectCollectionProxy $every
	 * @property-read _ProjectCollectionProxy $average
	 * @property-read _ProjectCollectionProxy $some
	 * @property-read _ProjectCollectionProxy $skipWhile
	 * @property-read _ProjectCollectionProxy $sortByDesc
	 * @property-read _ProjectCollectionProxy $takeUntil
	 * @property-read _ProjectCollectionProxy $avg
	 * @property-read _ProjectCollectionProxy $skipUntil
	 * @property-read _ProjectCollectionProxy $first
	 * @property-read _ProjectCollectionProxy $takeWhile
	 * @property-read _ProjectCollectionProxy $min
	 * @property-read _ProjectCollectionProxy $reject
	 */
	class _ProjectCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Project[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _ProjectCollection|mixed $id
	 * @property _ProjectCollection|mixed $name
	 * @property _ProjectCollection|mixed $material_id
	 * @property _ProjectCollection|mixed $mine_id
	 * @property _ProjectCollection|mixed $unloading_point_id
	 * @property _ProjectCollection|mixed $consignee_id
	 * @property _ProjectCollection|mixed $company_id
	 * @property _ProjectCollection|mixed $status
	 * @property _ProjectCollection|mixed $created_at
	 * @property _ProjectCollection|mixed $updated_at
	 * @property _ProjectCollection|mixed $company
	 * @property _ProjectCollection|mixed $consignee
	 * @property _ProjectCollection|mixed $destination
	 * @property _ProjectCollection|mixed $material
	 * @property _ProjectCollection|mixed $source
	 * @see \App\Domain\Project\Models\Project::net_money
	 * @method _ProjectCollection net_money()
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _ProjectCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _ProjectCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _ProjectCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _ProjectCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _ProjectCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _ProjectCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _ProjectCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _ProjectCollectionProxy { }

	/**
	 * @method _ProjectQueryBuilder whereId($value)
	 * @method _ProjectQueryBuilder whereName($value)
	 * @method _ProjectQueryBuilder whereMaterialId($value)
	 * @method _ProjectQueryBuilder whereMineId($value)
	 * @method _ProjectQueryBuilder whereUnloadingPointId($value)
	 * @method _ProjectQueryBuilder whereConsigneeId($value)
	 * @method _ProjectQueryBuilder whereCompanyId($value)
	 * @method _ProjectQueryBuilder whereStatus($value)
	 * @method _ProjectQueryBuilder whereCreatedAt($value)
	 * @method _ProjectQueryBuilder whereUpdatedAt($value)
	 * @method Project baseSole(array|string $columns = [ '*' ])
	 * @method Project create(array $attributes = [])
	 * @method _ProjectCollection|Project[] cursor()
	 * @method Project|null find($id, array $columns = [ '*' ])
	 * @method _ProjectCollection|Project[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Project findOrFail($id, array $columns = [ '*' ])
	 * @method _ProjectCollection|Project[] findOrNew($id, array $columns = [ '*' ])
	 * @method Project first(array|string $columns = [ '*' ])
	 * @method Project firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Project firstOrCreate(array $attributes = [], array $values = [])
	 * @method Project firstOrFail(array $columns = [ '*' ])
	 * @method Project firstOrNew(array $attributes = [], array $values = [])
	 * @method Project firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Project forceCreate(array $attributes)
	 * @method _ProjectCollection|Project[] fromQuery(string $query, array $bindings = [])
	 * @method _ProjectCollection|Project[] get(array|string $columns = [ '*' ])
	 * @method Project getModel()
	 * @method Project[] getModels(array|string $columns = [ '*' ])
	 * @method _ProjectCollection|Project[] hydrate(array $items)
	 * @method Project make(array $attributes = [])
	 * @method Project newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Project[]|_ProjectCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Project[]|_ProjectCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Project sole(array|string $columns = [ '*' ])
	 * @method Project updateOrCreate(array $attributes, array $values = [])
	 */
	class _ProjectQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\App\Domain\Trip\Models {

    use App\Domain\Trip\Models\Trip;
    use Illuminate\Support\Collection;
    use App\Domain\Trip\Models\TripType;
    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use LaravelIdea\Helper\_BaseCollection;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Spatie\MediaLibrary\MediaCollections\FileAdder;
    use Spatie\MediaLibrary\MediaCollections\Models\Media;
    use Symfony\Component\HttpFoundation\File\UploadedFile;

    /**
	 * @method Trip shift()
	 * @method Trip pop()
	 * @method Trip get($key, $default = null)
	 * @method Trip pull($key, $default = null)
	 * @method Trip first(callable $callback = null, $default = null)
	 * @method Trip firstWhere(string $key, $operator = null, $value = null)
	 * @method Trip[] all()
	 * @method Trip last(callable $callback = null, $default = null)
	 * @property-read _TripCollectionProxy $keyBy
	 * @property-read _TripCollectionProxy $partition
	 * @property-read _TripCollectionProxy $max
	 * @property-read _TripCollectionProxy $flatMap
	 * @property-read _TripCollectionProxy $each
	 * @property-read _TripCollectionProxy $map
	 * @property-read _TripCollectionProxy $filter
	 * @property-read _TripCollectionProxy $unique
	 * @property-read _TripCollectionProxy $groupBy
	 * @property-read _TripCollectionProxy $sortBy
	 * @property-read _TripCollectionProxy $contains
	 * @property-read _TripCollectionProxy $sum
	 * @property-read _TripCollectionProxy $until
	 * @property-read _TripCollectionProxy $every
	 * @property-read _TripCollectionProxy $average
	 * @property-read _TripCollectionProxy $some
	 * @property-read _TripCollectionProxy $skipWhile
	 * @property-read _TripCollectionProxy $sortByDesc
	 * @property-read _TripCollectionProxy $takeUntil
	 * @property-read _TripCollectionProxy $avg
	 * @property-read _TripCollectionProxy $skipUntil
	 * @property-read _TripCollectionProxy $first
	 * @property-read _TripCollectionProxy $takeWhile
	 * @property-read _TripCollectionProxy $min
	 * @property-read _TripCollectionProxy $reject
	 */
	class _TripCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Trip[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _TripCollection|mixed $id
	 * @property _TripCollection|mixed $date
	 * @property _TripCollection|mixed $trip_type
	 * @property _TripCollection|mixed $project_id
	 * @property _TripCollection|mixed $company_id
	 * @property _TripCollection|mixed $challan_serial
	 * @property _TripCollection|mixed $tp_number
	 * @property _TripCollection|mixed $tp_serial
	 * @property _TripCollection|mixed $gross_weight
	 * @property _TripCollection|mixed $tare_weight
	 * @property _TripCollection|mixed $net_weight
	 * @property _TripCollection|mixed $rate
	 * @property _TripCollection|mixed $hsd
	 * @property _TripCollection|mixed $cash
	 * @property _TripCollection|mixed $market_vehicle_number
	 * @property _TripCollection|mixed $party_name
	 * @property _TripCollection|mixed $party_number
	 * @property _TripCollection|mixed $driver_name
	 * @property _TripCollection|mixed $driver_phone_num
	 * @property _TripCollection|mixed $driver_license_num
	 * @property _TripCollection|mixed $premium_rate
	 * @property _TripCollection|mixed $total_amount
	 * @property _TripCollection|mixed $cash_adv_pct
	 * @property _TripCollection|mixed $cash_adv_fees
	 * @property _TripCollection|mixed $tds_sbm_bool
	 * @property _TripCollection|mixed $tds
	 * @property _TripCollection|mixed $tax_category_id
	 * @property _TripCollection|mixed $two_pay
	 * @property _TripCollection|mixed $final_payable
	 * @property _TripCollection|mixed $payment_id
	 * @property _TripCollection|mixed $profit
	 * @property _TripCollection|mixed $market_vehicle_id
	 * @property _TripCollection|mixed $fleet_vehicle_id
	 * @property _TripCollection|mixed $fleet_driver_id
	 * @property _TripCollection|mixed $party_id
	 * @property _TripCollection|mixed $agent_id
	 * @property _TripCollection|mixed $loading_done
	 * @property _TripCollection|mixed $payment_done
	 * @property _TripCollection|mixed $completed
	 * @property _TripCollection|mixed $created_by
	 * @property _TripCollection|mixed $finished_by
	 * @property _TripCollection|mixed $created_at
	 * @property _TripCollection|mixed $updated_at
	 * @property _TripCollection|mixed $agent
	 * @property _TripCollection|mixed $consignee
	 * @property _TripCollection|mixed $fleetVehicle
	 * @property _TripCollection|mixed $marketVehicle
	 * @property _TripCollection|mixed $party
	 * @property _TripCollection|mixed $payment
	 * @property _TripCollection|mixed $project
	 * @property _TripCollection|mixed $trip_type
	 * @see \App\Domain\Trip\Models\Trip::setDateAttribute
	 * @method _TripCollection setDateAttribute(string $date)
	 * @see \App\Domain\Trip\Models\Trip::getRateAttribute
	 * @method _TripCollection getRateAttribute($rate)
	 * @see \App\Domain\Trip\Models\Trip::getTotalAmountAttribute
	 * @method _TripCollection getTotalAmountAttribute($total_amount)
	 * @see \App\Domain\Trip\Models\Trip::getCashAttribute
	 * @method _TripCollection getCashAttribute($cash)
	 * @see \App\Domain\Trip\Models\Trip::getHsdAttribute
	 * @method _TripCollection getHsdAttribute($hsd)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::clearMediaCollection
	 * @method _TripCollection clearMediaCollection(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::hasMedia
	 * @method _TripCollection hasMedia(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaCollection
	 * @method _TripCollection addMediaCollection(string $name)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::deleteMedia
	 * @method _TripCollection deleteMedia(int|Media $mediaId)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFirstMediaPath
	 * @method _TripCollection getFirstMediaPath(string $collectionName = 'default', string $conversionName = '')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getMediaCollection
	 * @method _TripCollection getMediaCollection(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::shouldDeletePreservingMedia
	 * @method _TripCollection shouldDeletePreservingMedia()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMultipleMediaFromRequest
	 * @method _TripCollection addMultipleMediaFromRequest(array $keys)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addAllMediaFromRequest
	 * @method _TripCollection addAllMediaFromRequest()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFallbackMediaUrl
	 * @method _TripCollection getFallbackMediaUrl(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::registerMediaCollections
	 * @method _TripCollection registerMediaCollections()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::registerMediaConversions
	 * @method _TripCollection registerMediaConversions(Media $media = null)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::syncFromMediaLibraryRequest
	 * @method _TripCollection syncFromMediaLibraryRequest(array|null $mediaLibraryRequestItems)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaConversion
	 * @method _TripCollection addMediaConversion(string $name)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::registerAllMediaConversions
	 * @method _TripCollection registerAllMediaConversions(Media $media = null)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::loadMedia
	 * @method _TripCollection loadMedia(string $collectionName)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::updateMedia
	 * @method _TripCollection updateMedia(array $newMediaArray, string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::deletePreservingMedia
	 * @method _TripCollection deletePreservingMedia()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromDisk
	 * @method _TripCollection addMediaFromDisk(string $key, string $disk = null)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFirstMediaUrl
	 * @method _TripCollection getFirstMediaUrl(string $collectionName = 'default', string $conversionName = '')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromUrl
	 * @method _TripCollection addMediaFromUrl(string $url, ...$allowedMimeTypes)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMedia
	 * @method _TripCollection addMedia(string|UploadedFile $file)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::copyMedia
	 * @method _TripCollection copyMedia(string|UploadedFile $file)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromString
	 * @method _TripCollection addMediaFromString(string $text)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromRequest
	 * @method _TripCollection addMediaFromRequest(string $key)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFirstTemporaryUrl
	 * @method _TripCollection getFirstTemporaryUrl(\DateTimeInterface $expiration, string $collectionName = 'default', string $conversionName = '')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFallbackMediaPath
	 * @method _TripCollection getFallbackMediaPath(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromBase64
	 * @method _TripCollection addMediaFromBase64(string $base64data, ...$allowedMimeTypes)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getMedia
	 * @method _TripCollection getMedia(string $collectionName = 'default', array|callable $filters = [])
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getRegisteredMediaCollections
	 * @method _TripCollection getRegisteredMediaCollections()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFirstMedia
	 * @method _TripCollection getFirstMedia(string $collectionName = 'default', $filters = [])
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::clearMediaCollectionExcept
	 * @method _TripCollection clearMediaCollectionExcept(string $collectionName = 'default', Collection|Media[] $excludedMedia = [])
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addFromMediaLibraryRequest
	 * @method _TripCollection addFromMediaLibraryRequest(array|null $mediaLibraryRequestItems)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::processUnattachedMedia
	 * @method _TripCollection processUnattachedMedia(callable $callable)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::prepareToAttachMedia
	 * @method _TripCollection prepareToAttachMedia(Media $media, FileAdder $fileAdder)
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _TripCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _TripCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _TripCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _TripCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _TripCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _TripCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _TripCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _TripCollectionProxy { }

	/**
	 * @method _TripQueryBuilder whereId($value)
	 * @method _TripQueryBuilder whereDate($value)
	 * @method _TripQueryBuilder whereTripType($value)
	 * @method _TripQueryBuilder whereProjectId($value)
	 * @method _TripQueryBuilder whereCompanyId($value)
	 * @method _TripQueryBuilder whereChallanSerial($value)
	 * @method _TripQueryBuilder whereTpNumber($value)
	 * @method _TripQueryBuilder whereTpSerial($value)
	 * @method _TripQueryBuilder whereGrossWeight($value)
	 * @method _TripQueryBuilder whereTareWeight($value)
	 * @method _TripQueryBuilder whereNetWeight($value)
	 * @method _TripQueryBuilder whereRate($value)
	 * @method _TripQueryBuilder whereHsd($value)
	 * @method _TripQueryBuilder whereCash($value)
	 * @method _TripQueryBuilder whereMarketVehicleNumber($value)
	 * @method _TripQueryBuilder wherePartyName($value)
	 * @method _TripQueryBuilder wherePartyNumber($value)
	 * @method _TripQueryBuilder whereDriverName($value)
	 * @method _TripQueryBuilder whereDriverPhoneNum($value)
	 * @method _TripQueryBuilder whereDriverLicenseNum($value)
	 * @method _TripQueryBuilder wherePremiumRate($value)
	 * @method _TripQueryBuilder whereTotalAmount($value)
	 * @method _TripQueryBuilder whereCashAdvPct($value)
	 * @method _TripQueryBuilder whereCashAdvFees($value)
	 * @method _TripQueryBuilder whereTdsSbmBool($value)
	 * @method _TripQueryBuilder whereTds($value)
	 * @method _TripQueryBuilder whereTaxCategoryId($value)
	 * @method _TripQueryBuilder whereTwoPay($value)
	 * @method _TripQueryBuilder whereFinalPayable($value)
	 * @method _TripQueryBuilder wherePaymentId($value)
	 * @method _TripQueryBuilder whereProfit($value)
	 * @method _TripQueryBuilder whereMarketVehicleId($value)
	 * @method _TripQueryBuilder whereFleetVehicleId($value)
	 * @method _TripQueryBuilder whereFleetDriverId($value)
	 * @method _TripQueryBuilder wherePartyId($value)
	 * @method _TripQueryBuilder whereAgentId($value)
	 * @method _TripQueryBuilder whereLoadingDone($value)
	 * @method _TripQueryBuilder wherePaymentDone($value)
	 * @method _TripQueryBuilder whereCompleted($value)
	 * @method _TripQueryBuilder whereCreatedBy($value)
	 * @method _TripQueryBuilder whereFinishedBy($value)
	 * @method _TripQueryBuilder whereCreatedAt($value)
	 * @method _TripQueryBuilder whereUpdatedAt($value)
	 * @method Trip baseSole(array|string $columns = [ '*' ])
	 * @method Trip create(array $attributes = [])
	 * @method _TripCollection|Trip[] cursor()
	 * @method Trip|null find($id, array $columns = [ '*' ])
	 * @method _TripCollection|Trip[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Trip findOrFail($id, array $columns = [ '*' ])
	 * @method _TripCollection|Trip[] findOrNew($id, array $columns = [ '*' ])
	 * @method Trip first(array|string $columns = [ '*' ])
	 * @method Trip firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Trip firstOrCreate(array $attributes = [], array $values = [])
	 * @method Trip firstOrFail(array $columns = [ '*' ])
	 * @method Trip firstOrNew(array $attributes = [], array $values = [])
	 * @method Trip firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Trip forceCreate(array $attributes)
	 * @method _TripCollection|Trip[] fromQuery(string $query, array $bindings = [])
	 * @method _TripCollection|Trip[] get(array|string $columns = [ '*' ])
	 * @method Trip getModel()
	 * @method Trip[] getModels(array|string $columns = [ '*' ])
	 * @method _TripCollection|Trip[] hydrate(array $items)
	 * @method Trip make(array $attributes = [])
	 * @method Trip newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Trip[]|_TripCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Trip[]|_TripCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Trip sole(array|string $columns = [ '*' ])
	 * @method Trip updateOrCreate(array $attributes, array $values = [])
	 */
	class _TripQueryBuilder extends _BaseBuilder { }

	/**
	 * @method TripType shift()
	 * @method TripType pop()
	 * @method TripType get($key, $default = null)
	 * @method TripType pull($key, $default = null)
	 * @method TripType first(callable $callback = null, $default = null)
	 * @method TripType firstWhere(string $key, $operator = null, $value = null)
	 * @method TripType[] all()
	 * @method TripType last(callable $callback = null, $default = null)
	 * @property-read _TripTypeCollectionProxy $keyBy
	 * @property-read _TripTypeCollectionProxy $partition
	 * @property-read _TripTypeCollectionProxy $max
	 * @property-read _TripTypeCollectionProxy $flatMap
	 * @property-read _TripTypeCollectionProxy $each
	 * @property-read _TripTypeCollectionProxy $map
	 * @property-read _TripTypeCollectionProxy $filter
	 * @property-read _TripTypeCollectionProxy $unique
	 * @property-read _TripTypeCollectionProxy $groupBy
	 * @property-read _TripTypeCollectionProxy $sortBy
	 * @property-read _TripTypeCollectionProxy $contains
	 * @property-read _TripTypeCollectionProxy $sum
	 * @property-read _TripTypeCollectionProxy $until
	 * @property-read _TripTypeCollectionProxy $every
	 * @property-read _TripTypeCollectionProxy $average
	 * @property-read _TripTypeCollectionProxy $some
	 * @property-read _TripTypeCollectionProxy $skipWhile
	 * @property-read _TripTypeCollectionProxy $sortByDesc
	 * @property-read _TripTypeCollectionProxy $takeUntil
	 * @property-read _TripTypeCollectionProxy $avg
	 * @property-read _TripTypeCollectionProxy $skipUntil
	 * @property-read _TripTypeCollectionProxy $first
	 * @property-read _TripTypeCollectionProxy $takeWhile
	 * @property-read _TripTypeCollectionProxy $min
	 * @property-read _TripTypeCollectionProxy $reject
	 */
	class _TripTypeCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return TripType[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _TripTypeCollection|mixed $id
	 * @property _TripTypeCollection|mixed $name
	 * @property _TripTypeCollection|mixed $created_at
	 * @property _TripTypeCollection|mixed $updated_at
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _TripTypeCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _TripTypeCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _TripTypeCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _TripTypeCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _TripTypeCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _TripTypeCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _TripTypeCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _TripTypeCollectionProxy { }

	/**
	 * @method _TripTypeQueryBuilder whereId($value)
	 * @method _TripTypeQueryBuilder whereName($value)
	 * @method _TripTypeQueryBuilder whereCreatedAt($value)
	 * @method _TripTypeQueryBuilder whereUpdatedAt($value)
	 * @method TripType baseSole(array|string $columns = [ '*' ])
	 * @method TripType create(array $attributes = [])
	 * @method _TripTypeCollection|TripType[] cursor()
	 * @method TripType|null find($id, array $columns = [ '*' ])
	 * @method _TripTypeCollection|TripType[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method TripType findOrFail($id, array $columns = [ '*' ])
	 * @method _TripTypeCollection|TripType[] findOrNew($id, array $columns = [ '*' ])
	 * @method TripType first(array|string $columns = [ '*' ])
	 * @method TripType firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method TripType firstOrCreate(array $attributes = [], array $values = [])
	 * @method TripType firstOrFail(array $columns = [ '*' ])
	 * @method TripType firstOrNew(array $attributes = [], array $values = [])
	 * @method TripType firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method TripType forceCreate(array $attributes)
	 * @method _TripTypeCollection|TripType[] fromQuery(string $query, array $bindings = [])
	 * @method _TripTypeCollection|TripType[] get(array|string $columns = [ '*' ])
	 * @method TripType getModel()
	 * @method TripType[] getModels(array|string $columns = [ '*' ])
	 * @method _TripTypeCollection|TripType[] hydrate(array $items)
	 * @method TripType make(array $attributes = [])
	 * @method TripType newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|TripType[]|_TripTypeCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|TripType[]|_TripTypeCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method TripType sole(array|string $columns = [ '*' ])
	 * @method TripType updateOrCreate(array $attributes, array $values = [])
	 */
	class _TripTypeQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\App\Domain\VehicleRC\Models {

    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use LaravelIdea\Helper\_BaseCollection;
    use Illuminate\Database\Query\Expression;
    use App\Domain\VehicleRC\Models\VehicleRC;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;

    /**
	 * @method VehicleRC shift()
	 * @method VehicleRC pop()
	 * @method VehicleRC get($key, $default = null)
	 * @method VehicleRC pull($key, $default = null)
	 * @method VehicleRC first(callable $callback = null, $default = null)
	 * @method VehicleRC firstWhere(string $key, $operator = null, $value = null)
	 * @method VehicleRC[] all()
	 * @method VehicleRC last(callable $callback = null, $default = null)
	 * @property-read _VehicleRCCollectionProxy $keyBy
	 * @property-read _VehicleRCCollectionProxy $partition
	 * @property-read _VehicleRCCollectionProxy $max
	 * @property-read _VehicleRCCollectionProxy $flatMap
	 * @property-read _VehicleRCCollectionProxy $each
	 * @property-read _VehicleRCCollectionProxy $map
	 * @property-read _VehicleRCCollectionProxy $filter
	 * @property-read _VehicleRCCollectionProxy $unique
	 * @property-read _VehicleRCCollectionProxy $groupBy
	 * @property-read _VehicleRCCollectionProxy $sortBy
	 * @property-read _VehicleRCCollectionProxy $contains
	 * @property-read _VehicleRCCollectionProxy $sum
	 * @property-read _VehicleRCCollectionProxy $until
	 * @property-read _VehicleRCCollectionProxy $every
	 * @property-read _VehicleRCCollectionProxy $average
	 * @property-read _VehicleRCCollectionProxy $some
	 * @property-read _VehicleRCCollectionProxy $skipWhile
	 * @property-read _VehicleRCCollectionProxy $sortByDesc
	 * @property-read _VehicleRCCollectionProxy $takeUntil
	 * @property-read _VehicleRCCollectionProxy $avg
	 * @property-read _VehicleRCCollectionProxy $skipUntil
	 * @property-read _VehicleRCCollectionProxy $first
	 * @property-read _VehicleRCCollectionProxy $takeWhile
	 * @property-read _VehicleRCCollectionProxy $min
	 * @property-read _VehicleRCCollectionProxy $reject
	 */
	class _VehicleRCCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return VehicleRC[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _VehicleRCCollection|mixed $id
	 * @property _VehicleRCCollection|mixed $number
	 * @property _VehicleRCCollection|mixed $model
	 * @property _VehicleRCCollection|mixed $class
	 * @property _VehicleRCCollection|mixed $reg_date
	 * @property _VehicleRCCollection|mixed $puc_upto
	 * @property _VehicleRCCollection|mixed $rto_code
	 * @property _VehicleRCCollection|mixed $fuel_norm
	 * @property _VehicleRCCollection|mixed $fuel_type
	 * @property _VehicleRCCollection|mixed $authority
	 * @property _VehicleRCCollection|mixed $owner_name
	 * @property _VehicleRCCollection|mixed $mvtax_upto
	 * @property _VehicleRCCollection|mixed $noc_details
	 * @property _VehicleRCCollection|mixed $fitness_upto
	 * @property _VehicleRCCollection|mixed $roadtax_upto
	 * @property _VehicleRCCollection|mixed $vehicle_type
	 * @property _VehicleRCCollection|mixed $engine_number
	 * @property _VehicleRCCollection|mixed $insurance_upto
	 * @property _VehicleRCCollection|mixed $chassis_number
	 * @property _VehicleRCCollection|mixed $created_at
	 * @property _VehicleRCCollection|mixed $updated_at
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _VehicleRCCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _VehicleRCCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _VehicleRCCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _VehicleRCCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _VehicleRCCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _VehicleRCCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _VehicleRCCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _VehicleRCCollectionProxy { }

	/**
	 * @method _VehicleRCQueryBuilder whereId($value)
	 * @method _VehicleRCQueryBuilder whereNumber($value)
	 * @method _VehicleRCQueryBuilder whereModel($value)
	 * @method _VehicleRCQueryBuilder whereClass($value)
	 * @method _VehicleRCQueryBuilder whereRegDate($value)
	 * @method _VehicleRCQueryBuilder wherePucUpto($value)
	 * @method _VehicleRCQueryBuilder whereRtoCode($value)
	 * @method _VehicleRCQueryBuilder whereFuelNorm($value)
	 * @method _VehicleRCQueryBuilder whereFuelType($value)
	 * @method _VehicleRCQueryBuilder whereAuthority($value)
	 * @method _VehicleRCQueryBuilder whereOwnerName($value)
	 * @method _VehicleRCQueryBuilder whereMvtaxUpto($value)
	 * @method _VehicleRCQueryBuilder whereNocDetails($value)
	 * @method _VehicleRCQueryBuilder whereFitnessUpto($value)
	 * @method _VehicleRCQueryBuilder whereRoadtaxUpto($value)
	 * @method _VehicleRCQueryBuilder whereVehicleType($value)
	 * @method _VehicleRCQueryBuilder whereEngineNumber($value)
	 * @method _VehicleRCQueryBuilder whereInsuranceUpto($value)
	 * @method _VehicleRCQueryBuilder whereChassisNumber($value)
	 * @method _VehicleRCQueryBuilder whereCreatedAt($value)
	 * @method _VehicleRCQueryBuilder whereUpdatedAt($value)
	 * @method VehicleRC baseSole(array|string $columns = [ '*' ])
	 * @method VehicleRC create(array $attributes = [])
	 * @method _VehicleRCCollection|VehicleRC[] cursor()
	 * @method VehicleRC|null find($id, array $columns = [ '*' ])
	 * @method _VehicleRCCollection|VehicleRC[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method VehicleRC findOrFail($id, array $columns = [ '*' ])
	 * @method _VehicleRCCollection|VehicleRC[] findOrNew($id, array $columns = [ '*' ])
	 * @method VehicleRC first(array|string $columns = [ '*' ])
	 * @method VehicleRC firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method VehicleRC firstOrCreate(array $attributes = [], array $values = [])
	 * @method VehicleRC firstOrFail(array $columns = [ '*' ])
	 * @method VehicleRC firstOrNew(array $attributes = [], array $values = [])
	 * @method VehicleRC firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method VehicleRC forceCreate(array $attributes)
	 * @method _VehicleRCCollection|VehicleRC[] fromQuery(string $query, array $bindings = [])
	 * @method _VehicleRCCollection|VehicleRC[] get(array|string $columns = [ '*' ])
	 * @method VehicleRC getModel()
	 * @method VehicleRC[] getModels(array|string $columns = [ '*' ])
	 * @method _VehicleRCCollection|VehicleRC[] hydrate(array $items)
	 * @method VehicleRC make(array $attributes = [])
	 * @method VehicleRC newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|VehicleRC[]|_VehicleRCCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|VehicleRC[]|_VehicleRCCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method VehicleRC sole(array|string $columns = [ '*' ])
	 * @method VehicleRC updateOrCreate(array $attributes, array $values = [])
	 */
	class _VehicleRCQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\App\Models {

    use App\Models\Role;
    use App\Models\Team;
    use App\Models\User;
    use App\Models\Membership;
    use App\Models\Permission;
    use Illuminate\Http\UploadedFile;
    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use LaravelIdea\Helper\_BaseCollection;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Notifications\Notification;
    use Illuminate\Contracts\Support\Arrayable;
    use Laravel\Sanctum\Contracts\HasAbilities;
    use Illuminate\Pagination\LengthAwarePaginator;

    /**
	 * @method Membership shift()
	 * @method Membership pop()
	 * @method Membership get($key, $default = null)
	 * @method Membership pull($key, $default = null)
	 * @method Membership first(callable $callback = null, $default = null)
	 * @method Membership firstWhere(string $key, $operator = null, $value = null)
	 * @method Membership[] all()
	 * @method Membership last(callable $callback = null, $default = null)
	 * @property-read _MembershipCollectionProxy $keyBy
	 * @property-read _MembershipCollectionProxy $partition
	 * @property-read _MembershipCollectionProxy $max
	 * @property-read _MembershipCollectionProxy $flatMap
	 * @property-read _MembershipCollectionProxy $each
	 * @property-read _MembershipCollectionProxy $map
	 * @property-read _MembershipCollectionProxy $filter
	 * @property-read _MembershipCollectionProxy $unique
	 * @property-read _MembershipCollectionProxy $groupBy
	 * @property-read _MembershipCollectionProxy $sortBy
	 * @property-read _MembershipCollectionProxy $contains
	 * @property-read _MembershipCollectionProxy $sum
	 * @property-read _MembershipCollectionProxy $until
	 * @property-read _MembershipCollectionProxy $every
	 * @property-read _MembershipCollectionProxy $average
	 * @property-read _MembershipCollectionProxy $some
	 * @property-read _MembershipCollectionProxy $skipWhile
	 * @property-read _MembershipCollectionProxy $sortByDesc
	 * @property-read _MembershipCollectionProxy $takeUntil
	 * @property-read _MembershipCollectionProxy $avg
	 * @property-read _MembershipCollectionProxy $skipUntil
	 * @property-read _MembershipCollectionProxy $first
	 * @property-read _MembershipCollectionProxy $takeWhile
	 * @property-read _MembershipCollectionProxy $min
	 * @property-read _MembershipCollectionProxy $reject
	 */
	class _MembershipCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Membership[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @see \Illuminate\Database\Eloquent\Relations\Concerns\AsPivot::getQueueableId
	 * @method _MembershipCollection getQueueableId()
	 * @see \Illuminate\Database\Eloquent\Relations\Concerns\AsPivot::getCreatedAtColumn
	 * @method _MembershipCollection getCreatedAtColumn()
	 * @see \Illuminate\Database\Eloquent\Relations\Concerns\AsPivot::getTable
	 * @method _MembershipCollection getTable()
	 * @see \Illuminate\Database\Eloquent\Relations\Concerns\AsPivot::delete
	 * @method _MembershipCollection delete()
	 * @see \Illuminate\Database\Eloquent\Relations\Concerns\AsPivot::getForeignKey
	 * @method _MembershipCollection getForeignKey()
	 * @see \Illuminate\Database\Eloquent\Relations\Concerns\AsPivot::unsetRelations
	 * @method _MembershipCollection unsetRelations()
	 * @see \Illuminate\Database\Eloquent\Relations\Concerns\AsPivot::newQueryForRestoration
	 * @method _MembershipCollection newQueryForRestoration(int[]|string|string[] $ids)
	 * @see \Illuminate\Database\Eloquent\Relations\Concerns\AsPivot::hasTimestampAttributes
	 * @method _MembershipCollection hasTimestampAttributes(array|null $attributes = null)
	 * @see \Illuminate\Database\Eloquent\Relations\Concerns\AsPivot::setPivotKeys
	 * @method _MembershipCollection setPivotKeys(string $foreignKey, string $relatedKey)
	 * @see \Illuminate\Database\Eloquent\Relations\Concerns\AsPivot::getOtherKey
	 * @method _MembershipCollection getOtherKey()
	 * @see \Illuminate\Database\Eloquent\Relations\Concerns\AsPivot::getUpdatedAtColumn
	 * @method _MembershipCollection getUpdatedAtColumn()
	 * @see \Illuminate\Database\Eloquent\Relations\Concerns\AsPivot::getRelatedKey
	 * @method _MembershipCollection getRelatedKey()
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _MembershipCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _MembershipCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _MembershipCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _MembershipCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _MembershipCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _MembershipCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _MembershipCollectionProxy { }

	/**
	 * @method Membership baseSole(array|string $columns = [ '*' ])
	 * @method Membership create(array $attributes = [])
	 * @method _MembershipCollection|Membership[] cursor()
	 * @method Membership|null find($id, array $columns = [ '*' ])
	 * @method _MembershipCollection|Membership[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Membership findOrFail($id, array $columns = [ '*' ])
	 * @method _MembershipCollection|Membership[] findOrNew($id, array $columns = [ '*' ])
	 * @method Membership first(array|string $columns = [ '*' ])
	 * @method Membership firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Membership firstOrCreate(array $attributes = [], array $values = [])
	 * @method Membership firstOrFail(array $columns = [ '*' ])
	 * @method Membership firstOrNew(array $attributes = [], array $values = [])
	 * @method Membership firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Membership forceCreate(array $attributes)
	 * @method _MembershipCollection|Membership[] fromQuery(string $query, array $bindings = [])
	 * @method _MembershipCollection|Membership[] get(array|string $columns = [ '*' ])
	 * @method Membership getModel()
	 * @method Membership[] getModels(array|string $columns = [ '*' ])
	 * @method _MembershipCollection|Membership[] hydrate(array $items)
	 * @method Membership make(array $attributes = [])
	 * @method Membership newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Membership[]|_MembershipCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Membership[]|_MembershipCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Membership sole(array|string $columns = [ '*' ])
	 * @method Membership updateOrCreate(array $attributes, array $values = [])
	 */
	class _MembershipQueryBuilder extends _BaseBuilder { }

	/**
	 * @method Permission shift()
	 * @method Permission pop()
	 * @method Permission get($key, $default = null)
	 * @method Permission pull($key, $default = null)
	 * @method Permission first(callable $callback = null, $default = null)
	 * @method Permission firstWhere(string $key, $operator = null, $value = null)
	 * @method Permission[] all()
	 * @method Permission last(callable $callback = null, $default = null)
	 * @property-read _PermissionCollectionProxy $keyBy
	 * @property-read _PermissionCollectionProxy $partition
	 * @property-read _PermissionCollectionProxy $max
	 * @property-read _PermissionCollectionProxy $flatMap
	 * @property-read _PermissionCollectionProxy $each
	 * @property-read _PermissionCollectionProxy $map
	 * @property-read _PermissionCollectionProxy $filter
	 * @property-read _PermissionCollectionProxy $unique
	 * @property-read _PermissionCollectionProxy $groupBy
	 * @property-read _PermissionCollectionProxy $sortBy
	 * @property-read _PermissionCollectionProxy $contains
	 * @property-read _PermissionCollectionProxy $sum
	 * @property-read _PermissionCollectionProxy $until
	 * @property-read _PermissionCollectionProxy $every
	 * @property-read _PermissionCollectionProxy $average
	 * @property-read _PermissionCollectionProxy $some
	 * @property-read _PermissionCollectionProxy $skipWhile
	 * @property-read _PermissionCollectionProxy $sortByDesc
	 * @property-read _PermissionCollectionProxy $takeUntil
	 * @property-read _PermissionCollectionProxy $avg
	 * @property-read _PermissionCollectionProxy $skipUntil
	 * @property-read _PermissionCollectionProxy $first
	 * @property-read _PermissionCollectionProxy $takeWhile
	 * @property-read _PermissionCollectionProxy $min
	 * @property-read _PermissionCollectionProxy $reject
	 */
	class _PermissionCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Permission[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _PermissionCollection|mixed $id
	 * @property _PermissionCollection|mixed $name
	 * @property _PermissionCollection|mixed $display_name
	 * @property _PermissionCollection|mixed $description
	 * @property _PermissionCollection|mixed $created_at
	 * @property _PermissionCollection|mixed $updated_at
	 * @see \Laratrust\Traits\LaratrustPermissionTrait::getMorphByUserRelation
	 * @method _PermissionCollection getMorphByUserRelation(string $relationship)
	 * @see \Laratrust\Traits\LaratrustDynamicUserRelationsCalls::getUsersRelationValue
	 * @method _PermissionCollection getUsersRelationValue(string $key)
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _PermissionCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _PermissionCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _PermissionCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _PermissionCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _PermissionCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _PermissionCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _PermissionCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _PermissionCollectionProxy { }

	/**
	 * @method _PermissionQueryBuilder whereId($value)
	 * @method _PermissionQueryBuilder whereName($value)
	 * @method _PermissionQueryBuilder whereDisplayName($value)
	 * @method _PermissionQueryBuilder whereDescription($value)
	 * @method _PermissionQueryBuilder whereCreatedAt($value)
	 * @method _PermissionQueryBuilder whereUpdatedAt($value)
	 * @method Permission baseSole(array|string $columns = [ '*' ])
	 * @method Permission create(array $attributes = [])
	 * @method _PermissionCollection|Permission[] cursor()
	 * @method Permission|null find($id, array $columns = [ '*' ])
	 * @method _PermissionCollection|Permission[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Permission findOrFail($id, array $columns = [ '*' ])
	 * @method _PermissionCollection|Permission[] findOrNew($id, array $columns = [ '*' ])
	 * @method Permission first(array|string $columns = [ '*' ])
	 * @method Permission firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Permission firstOrCreate(array $attributes = [], array $values = [])
	 * @method Permission firstOrFail(array $columns = [ '*' ])
	 * @method Permission firstOrNew(array $attributes = [], array $values = [])
	 * @method Permission firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Permission forceCreate(array $attributes)
	 * @method _PermissionCollection|Permission[] fromQuery(string $query, array $bindings = [])
	 * @method _PermissionCollection|Permission[] get(array|string $columns = [ '*' ])
	 * @method Permission getModel()
	 * @method Permission[] getModels(array|string $columns = [ '*' ])
	 * @method _PermissionCollection|Permission[] hydrate(array $items)
	 * @method Permission make(array $attributes = [])
	 * @method Permission newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Permission[]|_PermissionCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Permission[]|_PermissionCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Permission sole(array|string $columns = [ '*' ])
	 * @method Permission updateOrCreate(array $attributes, array $values = [])
	 */
	class _PermissionQueryBuilder extends _BaseBuilder { }

	/**
	 * @method Role shift()
	 * @method Role pop()
	 * @method Role get($key, $default = null)
	 * @method Role pull($key, $default = null)
	 * @method Role first(callable $callback = null, $default = null)
	 * @method Role firstWhere(string $key, $operator = null, $value = null)
	 * @method Role[] all()
	 * @method Role last(callable $callback = null, $default = null)
	 * @property-read _RoleCollectionProxy $keyBy
	 * @property-read _RoleCollectionProxy $partition
	 * @property-read _RoleCollectionProxy $max
	 * @property-read _RoleCollectionProxy $flatMap
	 * @property-read _RoleCollectionProxy $each
	 * @property-read _RoleCollectionProxy $map
	 * @property-read _RoleCollectionProxy $filter
	 * @property-read _RoleCollectionProxy $unique
	 * @property-read _RoleCollectionProxy $groupBy
	 * @property-read _RoleCollectionProxy $sortBy
	 * @property-read _RoleCollectionProxy $contains
	 * @property-read _RoleCollectionProxy $sum
	 * @property-read _RoleCollectionProxy $until
	 * @property-read _RoleCollectionProxy $every
	 * @property-read _RoleCollectionProxy $average
	 * @property-read _RoleCollectionProxy $some
	 * @property-read _RoleCollectionProxy $skipWhile
	 * @property-read _RoleCollectionProxy $sortByDesc
	 * @property-read _RoleCollectionProxy $takeUntil
	 * @property-read _RoleCollectionProxy $avg
	 * @property-read _RoleCollectionProxy $skipUntil
	 * @property-read _RoleCollectionProxy $first
	 * @property-read _RoleCollectionProxy $takeWhile
	 * @property-read _RoleCollectionProxy $min
	 * @property-read _RoleCollectionProxy $reject
	 */
	class _RoleCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Role[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _RoleCollection|mixed $id
	 * @property _RoleCollection|mixed $name
	 * @property _RoleCollection|mixed $display_name
	 * @property _RoleCollection|mixed $description
	 * @property _RoleCollection|mixed $created_at
	 * @property _RoleCollection|mixed $updated_at
	 * @see \Laratrust\Traits\LaratrustRoleTrait::attachPermissions
	 * @method _RoleCollection attachPermissions($permissions)
	 * @see \Laratrust\Traits\LaratrustRoleTrait::getMorphByUserRelation
	 * @method _RoleCollection getMorphByUserRelation(string $relationship)
	 * @see \Laratrust\Traits\LaratrustRoleTrait::syncPermissions
	 * @method _RoleCollection syncPermissions($permissions)
	 * @see \Laratrust\Traits\LaratrustRoleTrait::detachPermissions
	 * @method _RoleCollection detachPermissions($permissions = null)
	 * @see \Laratrust\Traits\LaratrustRoleTrait::detachPermission
	 * @method _RoleCollection detachPermission(array|object $permission)
	 * @see \Laratrust\Traits\LaratrustRoleTrait::attachPermission
	 * @method _RoleCollection attachPermission(array|object $permission)
	 * @see \Laratrust\Traits\LaratrustRoleTrait::hasPermission
	 * @method _RoleCollection hasPermission(array|string $permission, bool $requireAll = false)
	 * @see \Laratrust\Traits\LaratrustRoleTrait::flushCache
	 * @method _RoleCollection flushCache()
	 * @see \Laratrust\Traits\LaratrustDynamicUserRelationsCalls::getUsersRelationValue
	 * @method _RoleCollection getUsersRelationValue(string $key)
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _RoleCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _RoleCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _RoleCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _RoleCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _RoleCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _RoleCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _RoleCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _RoleCollectionProxy { }

	/**
	 * @method _RoleQueryBuilder whereId($value)
	 * @method _RoleQueryBuilder whereName($value)
	 * @method _RoleQueryBuilder whereDisplayName($value)
	 * @method _RoleQueryBuilder whereDescription($value)
	 * @method _RoleQueryBuilder whereCreatedAt($value)
	 * @method _RoleQueryBuilder whereUpdatedAt($value)
	 * @method Role baseSole(array|string $columns = [ '*' ])
	 * @method Role create(array $attributes = [])
	 * @method _RoleCollection|Role[] cursor()
	 * @method Role|null find($id, array $columns = [ '*' ])
	 * @method _RoleCollection|Role[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Role findOrFail($id, array $columns = [ '*' ])
	 * @method _RoleCollection|Role[] findOrNew($id, array $columns = [ '*' ])
	 * @method Role first(array|string $columns = [ '*' ])
	 * @method Role firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Role firstOrCreate(array $attributes = [], array $values = [])
	 * @method Role firstOrFail(array $columns = [ '*' ])
	 * @method Role firstOrNew(array $attributes = [], array $values = [])
	 * @method Role firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Role forceCreate(array $attributes)
	 * @method _RoleCollection|Role[] fromQuery(string $query, array $bindings = [])
	 * @method _RoleCollection|Role[] get(array|string $columns = [ '*' ])
	 * @method Role getModel()
	 * @method Role[] getModels(array|string $columns = [ '*' ])
	 * @method _RoleCollection|Role[] hydrate(array $items)
	 * @method Role make(array $attributes = [])
	 * @method Role newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Role[]|_RoleCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Role[]|_RoleCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Role sole(array|string $columns = [ '*' ])
	 * @method Role updateOrCreate(array $attributes, array $values = [])
	 */
	class _RoleQueryBuilder extends _BaseBuilder { }

	/**
	 * @method Team shift()
	 * @method Team pop()
	 * @method Team get($key, $default = null)
	 * @method Team pull($key, $default = null)
	 * @method Team first(callable $callback = null, $default = null)
	 * @method Team firstWhere(string $key, $operator = null, $value = null)
	 * @method Team[] all()
	 * @method Team last(callable $callback = null, $default = null)
	 * @property-read _TeamCollectionProxy $keyBy
	 * @property-read _TeamCollectionProxy $partition
	 * @property-read _TeamCollectionProxy $max
	 * @property-read _TeamCollectionProxy $flatMap
	 * @property-read _TeamCollectionProxy $each
	 * @property-read _TeamCollectionProxy $map
	 * @property-read _TeamCollectionProxy $filter
	 * @property-read _TeamCollectionProxy $unique
	 * @property-read _TeamCollectionProxy $groupBy
	 * @property-read _TeamCollectionProxy $sortBy
	 * @property-read _TeamCollectionProxy $contains
	 * @property-read _TeamCollectionProxy $sum
	 * @property-read _TeamCollectionProxy $until
	 * @property-read _TeamCollectionProxy $every
	 * @property-read _TeamCollectionProxy $average
	 * @property-read _TeamCollectionProxy $some
	 * @property-read _TeamCollectionProxy $skipWhile
	 * @property-read _TeamCollectionProxy $sortByDesc
	 * @property-read _TeamCollectionProxy $takeUntil
	 * @property-read _TeamCollectionProxy $avg
	 * @property-read _TeamCollectionProxy $skipUntil
	 * @property-read _TeamCollectionProxy $first
	 * @property-read _TeamCollectionProxy $takeWhile
	 * @property-read _TeamCollectionProxy $min
	 * @property-read _TeamCollectionProxy $reject
	 */
	class _TeamCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Team[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _TeamCollection|mixed $id
	 * @property _TeamCollection|mixed $name
	 * @property _TeamCollection|mixed $display_name
	 * @property _TeamCollection|mixed $description
	 * @property _TeamCollection|mixed $created_at
	 * @property _TeamCollection|mixed $updated_at
	 * @see \Laratrust\Models\LaratrustTeam::newQuery
	 * @method _TeamCollection newQuery()
	 * @see \Laratrust\Models\LaratrustTeam::newModelQuery
	 * @method _TeamCollection newModelQuery()
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _TeamCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _TeamCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _TeamCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _TeamCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _TeamCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _TeamCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _TeamCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _TeamCollectionProxy { }

	/**
	 * @method _TeamQueryBuilder whereId($value)
	 * @method _TeamQueryBuilder whereName($value)
	 * @method _TeamQueryBuilder whereDisplayName($value)
	 * @method _TeamQueryBuilder whereDescription($value)
	 * @method _TeamQueryBuilder whereCreatedAt($value)
	 * @method _TeamQueryBuilder whereUpdatedAt($value)
	 * @method Team baseSole(array|string $columns = [ '*' ])
	 * @method Team create(array $attributes = [])
	 * @method _TeamCollection|Team[] cursor()
	 * @method Team|null find($id, array $columns = [ '*' ])
	 * @method _TeamCollection|Team[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Team findOrFail($id, array $columns = [ '*' ])
	 * @method _TeamCollection|Team[] findOrNew($id, array $columns = [ '*' ])
	 * @method Team first(array|string $columns = [ '*' ])
	 * @method Team firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Team firstOrCreate(array $attributes = [], array $values = [])
	 * @method Team firstOrFail(array $columns = [ '*' ])
	 * @method Team firstOrNew(array $attributes = [], array $values = [])
	 * @method Team firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Team forceCreate(array $attributes)
	 * @method _TeamCollection|Team[] fromQuery(string $query, array $bindings = [])
	 * @method _TeamCollection|Team[] get(array|string $columns = [ '*' ])
	 * @method Team getModel()
	 * @method Team[] getModels(array|string $columns = [ '*' ])
	 * @method _TeamCollection|Team[] hydrate(array $items)
	 * @method Team make(array $attributes = [])
	 * @method Team newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Team[]|_TeamCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Team[]|_TeamCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Team sole(array|string $columns = [ '*' ])
	 * @method Team updateOrCreate(array $attributes, array $values = [])
	 */
	class _TeamQueryBuilder extends _BaseBuilder { }

	/**
	 * @method User shift()
	 * @method User pop()
	 * @method User get($key, $default = null)
	 * @method User pull($key, $default = null)
	 * @method User first(callable $callback = null, $default = null)
	 * @method User firstWhere(string $key, $operator = null, $value = null)
	 * @method User[] all()
	 * @method User last(callable $callback = null, $default = null)
	 * @property-read _UserCollectionProxy $keyBy
	 * @property-read _UserCollectionProxy $partition
	 * @property-read _UserCollectionProxy $max
	 * @property-read _UserCollectionProxy $flatMap
	 * @property-read _UserCollectionProxy $each
	 * @property-read _UserCollectionProxy $map
	 * @property-read _UserCollectionProxy $filter
	 * @property-read _UserCollectionProxy $unique
	 * @property-read _UserCollectionProxy $groupBy
	 * @property-read _UserCollectionProxy $sortBy
	 * @property-read _UserCollectionProxy $contains
	 * @property-read _UserCollectionProxy $sum
	 * @property-read _UserCollectionProxy $until
	 * @property-read _UserCollectionProxy $every
	 * @property-read _UserCollectionProxy $average
	 * @property-read _UserCollectionProxy $some
	 * @property-read _UserCollectionProxy $skipWhile
	 * @property-read _UserCollectionProxy $sortByDesc
	 * @property-read _UserCollectionProxy $takeUntil
	 * @property-read _UserCollectionProxy $avg
	 * @property-read _UserCollectionProxy $skipUntil
	 * @property-read _UserCollectionProxy $first
	 * @property-read _UserCollectionProxy $takeWhile
	 * @property-read _UserCollectionProxy $min
	 * @property-read _UserCollectionProxy $reject
	 */
	class _UserCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return User[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _UserCollection|mixed $id
	 * @property _UserCollection|mixed $name
	 * @property _UserCollection|mixed $phone_number
	 * @property _UserCollection|mixed $password
	 * @property _UserCollection|mixed $email
	 * @property _UserCollection|mixed $email_verified_at
	 * @property _UserCollection|mixed $profile_photo_path
	 * @property _UserCollection|mixed $remember_token
	 * @property _UserCollection|mixed $created_at
	 * @property _UserCollection|mixed $updated_at
	 * @property _UserCollection|mixed $two_factor_secret
	 * @property _UserCollection|mixed $two_factor_recovery_codes
	 * @property _UserCollection|mixed $company_id
	 * @property _UserCollection|mixed $company
	 * @see \App\Models\User::hasCompanyId
	 * @method _UserCollection hasCompanyId()
	 * @see \Laravel\Fortify\TwoFactorAuthenticatable::replaceRecoveryCode
	 * @method _UserCollection replaceRecoveryCode(string $code)
	 * @see \Laravel\Fortify\TwoFactorAuthenticatable::twoFactorQrCodeUrl
	 * @method _UserCollection twoFactorQrCodeUrl()
	 * @see \Laravel\Fortify\TwoFactorAuthenticatable::twoFactorQrCodeSvg
	 * @method _UserCollection twoFactorQrCodeSvg()
	 * @see \Laravel\Fortify\TwoFactorAuthenticatable::recoveryCodes
	 * @method _UserCollection recoveryCodes()
	 * @see \Laravel\Sanctum\HasApiTokens::tokens
	 * @method _UserCollection tokens()
	 * @see \Laravel\Sanctum\HasApiTokens::createToken
	 * @method _UserCollection createToken(string $name, array $abilities = [ '*' ])
	 * @see \Laravel\Sanctum\HasApiTokens::tokenCan
	 * @method _UserCollection tokenCan(string $ability)
	 * @see \Laravel\Sanctum\HasApiTokens::currentAccessToken
	 * @method _UserCollection currentAccessToken()
	 * @see \Laravel\Sanctum\HasApiTokens::withAccessToken
	 * @method _UserCollection withAccessToken(HasAbilities $accessToken)
	 * @see \Illuminate\Notifications\RoutesNotifications::notifyNow
	 * @method _UserCollection notifyNow($instance, array $channels = null)
	 * @see \Illuminate\Notifications\RoutesNotifications::notify
	 * @method _UserCollection notify($instance)
	 * @see \Illuminate\Notifications\RoutesNotifications::routeNotificationFor
	 * @method _UserCollection routeNotificationFor(string $driver, Notification|null $notification = null)
	 * @see \Illuminate\Notifications\HasDatabaseNotifications::readNotifications
	 * @method _UserCollection readNotifications()
	 * @see \Illuminate\Notifications\HasDatabaseNotifications::unreadNotifications
	 * @method _UserCollection unreadNotifications()
	 * @see \Laratrust\Traits\LaratrustUserTrait::isAbleToAndOwns
	 * @method _UserCollection isAbleToAndOwns(array|string $permission, Object $thing, array $options = [])
	 * @see \Laratrust\Traits\LaratrustUserTrait::attachPermissions
	 * @method _UserCollection attachPermissions($permissions = [], $team = null)
	 * @see \Laratrust\Traits\LaratrustUserTrait::owns
	 * @method _UserCollection owns(Object $thing, string $foreignKeyName = null)
	 * @see \Laratrust\Traits\LaratrustUserTrait::detachRole
	 * @method _UserCollection detachRole($role, $team = null)
	 * @see \Laratrust\Traits\LaratrustUserTrait::detachPermissions
	 * @method _UserCollection detachPermissions($permissions = [], $team = null)
	 * @see \Laratrust\Traits\LaratrustUserTrait::allPermissions
	 * @method _UserCollection allPermissions(array|null $columns = null, false|null $team = false)
	 * @see \Laratrust\Traits\LaratrustUserTrait::isA
	 * @method _UserCollection isA($role, bool|string $team = null, bool $requireAll = false)
	 * @see \Laratrust\Traits\LaratrustUserTrait::hasRoleAndOwns
	 * @method _UserCollection hasRoleAndOwns(array|string $role, Object $thing, array $options = [])
	 * @see \Laratrust\Traits\LaratrustUserTrait::permissionsTeams
	 * @method _UserCollection permissionsTeams()
	 * @see \Laratrust\Traits\LaratrustUserTrait::allTeams
	 * @method _UserCollection allTeams(array|null $columns = null)
	 * @see \Laratrust\Traits\LaratrustUserTrait::attachRoles
	 * @method _UserCollection attachRoles($roles = [], $team = null)
	 * @see \Laratrust\Traits\LaratrustUserTrait::hasRole
	 * @method _UserCollection hasRole(array|string $name, bool|string $team = null, bool $requireAll = false)
	 * @see \Laratrust\Traits\LaratrustUserTrait::flushCache
	 * @method _UserCollection flushCache()
	 * @see \Laratrust\Traits\LaratrustUserTrait::syncRolesWithoutDetaching
	 * @method _UserCollection syncRolesWithoutDetaching(array $roles = [], $team = null)
	 * @see \Laratrust\Traits\LaratrustUserTrait::isAbleTo
	 * @method _UserCollection isAbleTo(array|string $permission, bool|string $team = null, bool $requireAll = false)
	 * @see \Laratrust\Traits\LaratrustUserTrait::detachRoles
	 * @method _UserCollection detachRoles($roles = [], $team = null)
	 * @see \Laratrust\Traits\LaratrustUserTrait::getRoles
	 * @method _UserCollection getRoles(bool|string $team = null)
	 * @see \Laratrust\Traits\LaratrustUserTrait::syncPermissions
	 * @method _UserCollection syncPermissions(array $permissions = [], $team = null, bool $detaching = true)
	 * @see \Laratrust\Traits\LaratrustUserTrait::rolesTeams
	 * @method _UserCollection rolesTeams()
	 * @see \Laratrust\Traits\LaratrustUserTrait::syncRoles
	 * @method _UserCollection syncRoles(array $roles = [], $team = null, bool $detaching = true)
	 * @see \Laratrust\Traits\LaratrustUserTrait::attachPermission
	 * @method _UserCollection attachPermission($permission, $team = null)
	 * @see \Laratrust\Traits\LaratrustUserTrait::detachPermission
	 * @method _UserCollection detachPermission($permission, $team = null)
	 * @see \Laratrust\Traits\LaratrustUserTrait::syncPermissionsWithoutDetaching
	 * @method _UserCollection syncPermissionsWithoutDetaching(array $permissions = [], $team = null)
	 * @see \Laratrust\Traits\LaratrustUserTrait::hasPermission
	 * @method _UserCollection hasPermission(array|string $permission, bool|string $team = null, bool $requireAll = false)
	 * @see \Laratrust\Traits\LaratrustUserTrait::ability
	 * @method _UserCollection ability(array|string $roles, array|string $permissions, bool|string $team = null, array $options = [])
	 * @see \Laratrust\Traits\LaratrustUserTrait::attachRole
	 * @method _UserCollection attachRole($role, $team = null)
	 * @see \Laratrust\Traits\LaratrustUserTrait::isAn
	 * @method _UserCollection isAn($role, bool|string $team = null, bool $requireAll = false)
	 * @see \Laravel\Jetstream\HasProfilePhoto::updateProfilePhoto
	 * @method _UserCollection updateProfilePhoto(UploadedFile $photo)
	 * @see \Laravel\Jetstream\HasProfilePhoto::deleteProfilePhoto
	 * @method _UserCollection deleteProfilePhoto()
	 * @see \Illuminate\Auth\MustVerifyEmail::sendEmailVerificationNotification
	 * @method _UserCollection sendEmailVerificationNotification()
	 * @see \Illuminate\Auth\MustVerifyEmail::getEmailForVerification
	 * @method _UserCollection getEmailForVerification()
	 * @see \Illuminate\Auth\MustVerifyEmail::markEmailAsVerified
	 * @method _UserCollection markEmailAsVerified()
	 * @see \Illuminate\Auth\MustVerifyEmail::hasVerifiedEmail
	 * @method _UserCollection hasVerifiedEmail()
	 * @see \Illuminate\Auth\Authenticatable::getRememberTokenName
	 * @method _UserCollection getRememberTokenName()
	 * @see \Illuminate\Auth\Authenticatable::getAuthPassword
	 * @method _UserCollection getAuthPassword()
	 * @see \Illuminate\Auth\Authenticatable::getAuthIdentifier
	 * @method _UserCollection getAuthIdentifier()
	 * @see \Illuminate\Auth\Authenticatable::getRememberToken
	 * @method _UserCollection getRememberToken()
	 * @see \Illuminate\Auth\Authenticatable::setRememberToken
	 * @method _UserCollection setRememberToken(string $value)
	 * @see \Illuminate\Auth\Authenticatable::getAuthIdentifierName
	 * @method _UserCollection getAuthIdentifierName()
	 * @see \Illuminate\Foundation\Auth\Access\Authorizable::can
	 * @method _UserCollection can(iterable|string $abilities, array $arguments = [])
	 * @see \Illuminate\Foundation\Auth\Access\Authorizable::canAny
	 * @method _UserCollection canAny(iterable|string $abilities, array $arguments = [])
	 * @see \Illuminate\Foundation\Auth\Access\Authorizable::cant
	 * @method _UserCollection cant(iterable|string $abilities, array $arguments = [])
	 * @see \Illuminate\Foundation\Auth\Access\Authorizable::cannot
	 * @method _UserCollection cannot(iterable|string $abilities, array $arguments = [])
	 * @see \Illuminate\Auth\Passwords\CanResetPassword::sendPasswordResetNotification
	 * @method _UserCollection sendPasswordResetNotification(string $token)
	 * @see \Illuminate\Auth\Passwords\CanResetPassword::getEmailForPasswordReset
	 * @method _UserCollection getEmailForPasswordReset()
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _UserCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _UserCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _UserCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _UserCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _UserCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _UserCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _UserCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _UserCollectionProxy { }

	/**
	 * @method _UserQueryBuilder whereId($value)
	 * @method _UserQueryBuilder whereName($value)
	 * @method _UserQueryBuilder wherePhoneNumber($value)
	 * @method _UserQueryBuilder wherePassword($value)
	 * @method _UserQueryBuilder whereEmail($value)
	 * @method _UserQueryBuilder whereEmailVerifiedAt($value)
	 * @method _UserQueryBuilder whereProfilePhotoPath($value)
	 * @method _UserQueryBuilder whereRememberToken($value)
	 * @method _UserQueryBuilder whereCreatedAt($value)
	 * @method _UserQueryBuilder whereUpdatedAt($value)
	 * @method _UserQueryBuilder whereTwoFactorSecret($value)
	 * @method _UserQueryBuilder whereTwoFactorRecoveryCodes($value)
	 * @method _UserQueryBuilder whereCompanyId($value)
	 * @method User baseSole(array|string $columns = [ '*' ])
	 * @method User create(array $attributes = [])
	 * @method _UserCollection|User[] cursor()
	 * @method User|null find($id, array $columns = [ '*' ])
	 * @method _UserCollection|User[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method User findOrFail($id, array $columns = [ '*' ])
	 * @method _UserCollection|User[] findOrNew($id, array $columns = [ '*' ])
	 * @method User first(array|string $columns = [ '*' ])
	 * @method User firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method User firstOrCreate(array $attributes = [], array $values = [])
	 * @method User firstOrFail(array $columns = [ '*' ])
	 * @method User firstOrNew(array $attributes = [], array $values = [])
	 * @method User firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method User forceCreate(array $attributes)
	 * @method _UserCollection|User[] fromQuery(string $query, array $bindings = [])
	 * @method _UserCollection|User[] get(array|string $columns = [ '*' ])
	 * @method User getModel()
	 * @method User[] getModels(array|string $columns = [ '*' ])
	 * @method _UserCollection|User[] hydrate(array $items)
	 * @method User make(array $attributes = [])
	 * @method User newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|User[]|_UserCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|User[]|_UserCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method User sole(array|string $columns = [ '*' ])
	 * @method User updateOrCreate(array $attributes, array $values = [])
	 * @method _UserQueryBuilder orWherePermissionIs(string $permission = '')
	 * @method _UserQueryBuilder orWhereRoleIs(string $role = '', $team = null)
	 * @method _UserQueryBuilder whereDoesntHavePermission()
	 * @method _UserQueryBuilder whereDoesntHaveRole()
	 * @method _UserQueryBuilder wherePermissionIs(string $permission = '', $boolean = 'and')
	 * @method _UserQueryBuilder whereRoleIs(string $role = '', $team = null, string $boolean = 'and')
	 */
	class _UserQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\Database\Factories {

    use App\Models\User;
    use App\Domain\Trip\Models\Trip;
    use Database\Factories\TripFactory;
    use Database\Factories\UserFactory;
    use Illuminate\Database\Eloquent\Model;
    use LaravelIdea\Helper\App\Models\_UserCollection;
    use LaravelIdea\Helper\App\Domain\Trip\Models\_TripCollection;

    /**
	 * @method Trip createOne(array $attributes = [])
	 * @method Trip makeOne(array|callable $attributes = [])
	 * @method _TripCollection|Trip[]|Trip create(array $attributes = [], Model|null $parent = null)
	 * @method _TripCollection|Trip[]|Trip make(array $attributes = [], Model|null $parent = null)
	 * @method _TripCollection|Trip[] createMany(iterable $records)
	 */
	class _TripFactory extends TripFactory { }

	/**
	 * @method User createOne(array $attributes = [])
	 * @method User makeOne(array|callable $attributes = [])
	 * @method _UserCollection|User[]|User create(array $attributes = [], Model|null $parent = null)
	 * @method _UserCollection|User[]|User make(array $attributes = [], Model|null $parent = null)
	 * @method _UserCollection|User[] createMany(iterable $records)
	 */
	class _UserFactory extends UserFactory { }
}

namespace LaravelIdea\Helper\Illuminate\Notifications {

    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use LaravelIdea\Helper\_BaseCollection;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Notifications\DatabaseNotification;
    use Illuminate\Notifications\DatabaseNotificationCollection;

    /**
	 * @method DatabaseNotification shift()
	 * @method DatabaseNotification pop()
	 * @method DatabaseNotification get($key, $default = null)
	 * @method DatabaseNotification pull($key, $default = null)
	 * @method DatabaseNotification first(callable $callback = null, $default = null)
	 * @method DatabaseNotification firstWhere(string $key, $operator = null, $value = null)
	 * @method DatabaseNotification[] all()
	 * @method DatabaseNotification last(callable $callback = null, $default = null)
	 * @property-read _DatabaseNotificationCollectionProxy $keyBy
	 * @property-read _DatabaseNotificationCollectionProxy $partition
	 * @property-read _DatabaseNotificationCollectionProxy $max
	 * @property-read _DatabaseNotificationCollectionProxy $flatMap
	 * @property-read _DatabaseNotificationCollectionProxy $each
	 * @property-read _DatabaseNotificationCollectionProxy $map
	 * @property-read _DatabaseNotificationCollectionProxy $filter
	 * @property-read _DatabaseNotificationCollectionProxy $unique
	 * @property-read _DatabaseNotificationCollectionProxy $groupBy
	 * @property-read _DatabaseNotificationCollectionProxy $sortBy
	 * @property-read _DatabaseNotificationCollectionProxy $contains
	 * @property-read _DatabaseNotificationCollectionProxy $sum
	 * @property-read _DatabaseNotificationCollectionProxy $until
	 * @property-read _DatabaseNotificationCollectionProxy $every
	 * @property-read _DatabaseNotificationCollectionProxy $average
	 * @property-read _DatabaseNotificationCollectionProxy $some
	 * @property-read _DatabaseNotificationCollectionProxy $skipWhile
	 * @property-read _DatabaseNotificationCollectionProxy $sortByDesc
	 * @property-read _DatabaseNotificationCollectionProxy $takeUntil
	 * @property-read _DatabaseNotificationCollectionProxy $avg
	 * @property-read _DatabaseNotificationCollectionProxy $skipUntil
	 * @property-read _DatabaseNotificationCollectionProxy $first
	 * @property-read _DatabaseNotificationCollectionProxy $takeWhile
	 * @property-read _DatabaseNotificationCollectionProxy $min
	 * @property-read _DatabaseNotificationCollectionProxy $reject
	 * @method $this mapWithKeys(callable $callback)
	 * @method $this pad(int $size, $value)
	 * @method $this keys()
	 * @method $this loadMin(array|string $relations, string $column)
	 * @method $this loadMissing(array|string $relations)
	 * @method $this loadCount(array|string $relations)
	 * @method $this merge(array|\ArrayAccess $items)
	 * @method $this loadMax(array|string $relations, string $column)
	 * @method $this loadMorph(string $relation, array $relations)
	 * @method $this loadSum(array|string $relations, string $column)
	 * @method $this pluck(array|string $value, null|string $key = null)
	 * @method $this map(callable $callback)
	 * @method $this unique(callable|null|string $key = null, bool $strict = false)
	 * @method $this load(array|string $relations)
	 * @method $this diff(array|\ArrayAccess $items)
	 * @method $this only($keys)
	 * @method $this collapse()
	 * @method $this append(array|string $attributes)
	 * @method $this makeHidden(array|string $attributes)
	 * @method $this flatten(int $depth = INF)
	 * @method $this makeVisible(array|string $attributes)
	 * @method $this fresh(array|string $with = [])
	 * @method $this flip()
	 * @method $this intersect(array|\ArrayAccess $items)
	 * @method $this except($keys)
	 * @method $this loadAvg(array|string $relations, string $column)
	 * @method $this zip(array $items)
	 * @method $this loadAggregate(array|string $relations, string $column, string $function = null)
	 * @method $this loadMorphCount(string $relation, array $relations)
	 * @mixin DatabaseNotificationCollection
	 */
	class _DatabaseNotificationCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return DatabaseNotification[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _DatabaseNotificationCollection|mixed $notifiable
	 * @see \Illuminate\Notifications\DatabaseNotification::markAsRead
	 * @method _DatabaseNotificationCollection markAsRead()
	 * @see \Illuminate\Notifications\DatabaseNotification::read
	 * @method _DatabaseNotificationCollection read()
	 * @see \Illuminate\Notifications\DatabaseNotification::markAsUnread
	 * @method _DatabaseNotificationCollection markAsUnread()
	 * @see \Illuminate\Notifications\DatabaseNotification::unread
	 * @method _DatabaseNotificationCollection unread()
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _DatabaseNotificationCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _DatabaseNotificationCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _DatabaseNotificationCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _DatabaseNotificationCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _DatabaseNotificationCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _DatabaseNotificationCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _DatabaseNotificationCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _DatabaseNotificationCollectionProxy { }

	/**
	 * @method DatabaseNotification baseSole(array|string $columns = [ '*' ])
	 * @method DatabaseNotification create(array $attributes = [])
	 * @method _DatabaseNotificationCollection|DatabaseNotification[] cursor()
	 * @method DatabaseNotification|null find($id, array $columns = [ '*' ])
	 * @method _DatabaseNotificationCollection|DatabaseNotification[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method DatabaseNotification findOrFail($id, array $columns = [ '*' ])
	 * @method _DatabaseNotificationCollection|DatabaseNotification[] findOrNew($id, array $columns = [ '*' ])
	 * @method DatabaseNotification first(array|string $columns = [ '*' ])
	 * @method DatabaseNotification firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method DatabaseNotification firstOrCreate(array $attributes = [], array $values = [])
	 * @method DatabaseNotification firstOrFail(array $columns = [ '*' ])
	 * @method DatabaseNotification firstOrNew(array $attributes = [], array $values = [])
	 * @method DatabaseNotification firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method DatabaseNotification forceCreate(array $attributes)
	 * @method _DatabaseNotificationCollection|DatabaseNotification[] fromQuery(string $query, array $bindings = [])
	 * @method _DatabaseNotificationCollection|DatabaseNotification[] get(array|string $columns = [ '*' ])
	 * @method DatabaseNotification getModel()
	 * @method DatabaseNotification[] getModels(array|string $columns = [ '*' ])
	 * @method _DatabaseNotificationCollection|DatabaseNotification[] hydrate(array $items)
	 * @method DatabaseNotification make(array $attributes = [])
	 * @method DatabaseNotification newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|DatabaseNotification[]|_DatabaseNotificationCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|DatabaseNotification[]|_DatabaseNotificationCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method DatabaseNotification sole(array|string $columns = [ '*' ])
	 * @method DatabaseNotification updateOrCreate(array $attributes, array $values = [])
	 * @method _DatabaseNotificationQueryBuilder read()
	 * @method _DatabaseNotificationQueryBuilder unread()
	 */
	class _DatabaseNotificationQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\Laratrust\Models {

    use Laratrust\Models\LaratrustRole;
    use Laratrust\Models\LaratrustTeam;
    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use LaravelIdea\Helper\_BaseCollection;
    use Illuminate\Database\Query\Expression;
    use Laratrust\Models\LaratrustPermission;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;

    /**
	 * @method LaratrustPermission shift()
	 * @method LaratrustPermission pop()
	 * @method LaratrustPermission get($key, $default = null)
	 * @method LaratrustPermission pull($key, $default = null)
	 * @method LaratrustPermission first(callable $callback = null, $default = null)
	 * @method LaratrustPermission firstWhere(string $key, $operator = null, $value = null)
	 * @method LaratrustPermission[] all()
	 * @method LaratrustPermission last(callable $callback = null, $default = null)
	 * @property-read _LaratrustPermissionCollectionProxy $keyBy
	 * @property-read _LaratrustPermissionCollectionProxy $partition
	 * @property-read _LaratrustPermissionCollectionProxy $max
	 * @property-read _LaratrustPermissionCollectionProxy $flatMap
	 * @property-read _LaratrustPermissionCollectionProxy $each
	 * @property-read _LaratrustPermissionCollectionProxy $map
	 * @property-read _LaratrustPermissionCollectionProxy $filter
	 * @property-read _LaratrustPermissionCollectionProxy $unique
	 * @property-read _LaratrustPermissionCollectionProxy $groupBy
	 * @property-read _LaratrustPermissionCollectionProxy $sortBy
	 * @property-read _LaratrustPermissionCollectionProxy $contains
	 * @property-read _LaratrustPermissionCollectionProxy $sum
	 * @property-read _LaratrustPermissionCollectionProxy $until
	 * @property-read _LaratrustPermissionCollectionProxy $every
	 * @property-read _LaratrustPermissionCollectionProxy $average
	 * @property-read _LaratrustPermissionCollectionProxy $some
	 * @property-read _LaratrustPermissionCollectionProxy $skipWhile
	 * @property-read _LaratrustPermissionCollectionProxy $sortByDesc
	 * @property-read _LaratrustPermissionCollectionProxy $takeUntil
	 * @property-read _LaratrustPermissionCollectionProxy $avg
	 * @property-read _LaratrustPermissionCollectionProxy $skipUntil
	 * @property-read _LaratrustPermissionCollectionProxy $first
	 * @property-read _LaratrustPermissionCollectionProxy $takeWhile
	 * @property-read _LaratrustPermissionCollectionProxy $min
	 * @property-read _LaratrustPermissionCollectionProxy $reject
	 */
	class _LaratrustPermissionCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return LaratrustPermission[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @see \Laratrust\Traits\LaratrustPermissionTrait::getMorphByUserRelation
	 * @method _LaratrustPermissionCollection getMorphByUserRelation(string $relationship)
	 * @see \Laratrust\Traits\LaratrustDynamicUserRelationsCalls::getUsersRelationValue
	 * @method _LaratrustPermissionCollection getUsersRelationValue(string $key)
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _LaratrustPermissionCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _LaratrustPermissionCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _LaratrustPermissionCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _LaratrustPermissionCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _LaratrustPermissionCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _LaratrustPermissionCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _LaratrustPermissionCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _LaratrustPermissionCollectionProxy { }

	/**
	 * @method LaratrustPermission baseSole(array|string $columns = [ '*' ])
	 * @method LaratrustPermission create(array $attributes = [])
	 * @method _LaratrustPermissionCollection|LaratrustPermission[] cursor()
	 * @method LaratrustPermission|null find($id, array $columns = [ '*' ])
	 * @method _LaratrustPermissionCollection|LaratrustPermission[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method LaratrustPermission findOrFail($id, array $columns = [ '*' ])
	 * @method _LaratrustPermissionCollection|LaratrustPermission[] findOrNew($id, array $columns = [ '*' ])
	 * @method LaratrustPermission first(array|string $columns = [ '*' ])
	 * @method LaratrustPermission firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method LaratrustPermission firstOrCreate(array $attributes = [], array $values = [])
	 * @method LaratrustPermission firstOrFail(array $columns = [ '*' ])
	 * @method LaratrustPermission firstOrNew(array $attributes = [], array $values = [])
	 * @method LaratrustPermission firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method LaratrustPermission forceCreate(array $attributes)
	 * @method _LaratrustPermissionCollection|LaratrustPermission[] fromQuery(string $query, array $bindings = [])
	 * @method _LaratrustPermissionCollection|LaratrustPermission[] get(array|string $columns = [ '*' ])
	 * @method LaratrustPermission getModel()
	 * @method LaratrustPermission[] getModels(array|string $columns = [ '*' ])
	 * @method _LaratrustPermissionCollection|LaratrustPermission[] hydrate(array $items)
	 * @method LaratrustPermission make(array $attributes = [])
	 * @method LaratrustPermission newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|LaratrustPermission[]|_LaratrustPermissionCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|LaratrustPermission[]|_LaratrustPermissionCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method LaratrustPermission sole(array|string $columns = [ '*' ])
	 * @method LaratrustPermission updateOrCreate(array $attributes, array $values = [])
	 */
	class _LaratrustPermissionQueryBuilder extends _BaseBuilder { }

	/**
	 * @method LaratrustRole shift()
	 * @method LaratrustRole pop()
	 * @method LaratrustRole get($key, $default = null)
	 * @method LaratrustRole pull($key, $default = null)
	 * @method LaratrustRole first(callable $callback = null, $default = null)
	 * @method LaratrustRole firstWhere(string $key, $operator = null, $value = null)
	 * @method LaratrustRole[] all()
	 * @method LaratrustRole last(callable $callback = null, $default = null)
	 * @property-read _LaratrustRoleCollectionProxy $keyBy
	 * @property-read _LaratrustRoleCollectionProxy $partition
	 * @property-read _LaratrustRoleCollectionProxy $max
	 * @property-read _LaratrustRoleCollectionProxy $flatMap
	 * @property-read _LaratrustRoleCollectionProxy $each
	 * @property-read _LaratrustRoleCollectionProxy $map
	 * @property-read _LaratrustRoleCollectionProxy $filter
	 * @property-read _LaratrustRoleCollectionProxy $unique
	 * @property-read _LaratrustRoleCollectionProxy $groupBy
	 * @property-read _LaratrustRoleCollectionProxy $sortBy
	 * @property-read _LaratrustRoleCollectionProxy $contains
	 * @property-read _LaratrustRoleCollectionProxy $sum
	 * @property-read _LaratrustRoleCollectionProxy $until
	 * @property-read _LaratrustRoleCollectionProxy $every
	 * @property-read _LaratrustRoleCollectionProxy $average
	 * @property-read _LaratrustRoleCollectionProxy $some
	 * @property-read _LaratrustRoleCollectionProxy $skipWhile
	 * @property-read _LaratrustRoleCollectionProxy $sortByDesc
	 * @property-read _LaratrustRoleCollectionProxy $takeUntil
	 * @property-read _LaratrustRoleCollectionProxy $avg
	 * @property-read _LaratrustRoleCollectionProxy $skipUntil
	 * @property-read _LaratrustRoleCollectionProxy $first
	 * @property-read _LaratrustRoleCollectionProxy $takeWhile
	 * @property-read _LaratrustRoleCollectionProxy $min
	 * @property-read _LaratrustRoleCollectionProxy $reject
	 */
	class _LaratrustRoleCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return LaratrustRole[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @see \Laratrust\Traits\LaratrustRoleTrait::attachPermissions
	 * @method _LaratrustRoleCollection attachPermissions($permissions)
	 * @see \Laratrust\Traits\LaratrustRoleTrait::getMorphByUserRelation
	 * @method _LaratrustRoleCollection getMorphByUserRelation(string $relationship)
	 * @see \Laratrust\Traits\LaratrustRoleTrait::syncPermissions
	 * @method _LaratrustRoleCollection syncPermissions($permissions)
	 * @see \Laratrust\Traits\LaratrustRoleTrait::detachPermissions
	 * @method _LaratrustRoleCollection detachPermissions($permissions = null)
	 * @see \Laratrust\Traits\LaratrustRoleTrait::detachPermission
	 * @method _LaratrustRoleCollection detachPermission(array|object $permission)
	 * @see \Laratrust\Traits\LaratrustRoleTrait::attachPermission
	 * @method _LaratrustRoleCollection attachPermission(array|object $permission)
	 * @see \Laratrust\Traits\LaratrustRoleTrait::hasPermission
	 * @method _LaratrustRoleCollection hasPermission(array|string $permission, bool $requireAll = false)
	 * @see \Laratrust\Traits\LaratrustRoleTrait::flushCache
	 * @method _LaratrustRoleCollection flushCache()
	 * @see \Laratrust\Traits\LaratrustDynamicUserRelationsCalls::getUsersRelationValue
	 * @method _LaratrustRoleCollection getUsersRelationValue(string $key)
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _LaratrustRoleCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _LaratrustRoleCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _LaratrustRoleCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _LaratrustRoleCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _LaratrustRoleCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _LaratrustRoleCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _LaratrustRoleCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _LaratrustRoleCollectionProxy { }

	/**
	 * @method LaratrustRole baseSole(array|string $columns = [ '*' ])
	 * @method LaratrustRole create(array $attributes = [])
	 * @method _LaratrustRoleCollection|LaratrustRole[] cursor()
	 * @method LaratrustRole|null find($id, array $columns = [ '*' ])
	 * @method _LaratrustRoleCollection|LaratrustRole[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method LaratrustRole findOrFail($id, array $columns = [ '*' ])
	 * @method _LaratrustRoleCollection|LaratrustRole[] findOrNew($id, array $columns = [ '*' ])
	 * @method LaratrustRole first(array|string $columns = [ '*' ])
	 * @method LaratrustRole firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method LaratrustRole firstOrCreate(array $attributes = [], array $values = [])
	 * @method LaratrustRole firstOrFail(array $columns = [ '*' ])
	 * @method LaratrustRole firstOrNew(array $attributes = [], array $values = [])
	 * @method LaratrustRole firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method LaratrustRole forceCreate(array $attributes)
	 * @method _LaratrustRoleCollection|LaratrustRole[] fromQuery(string $query, array $bindings = [])
	 * @method _LaratrustRoleCollection|LaratrustRole[] get(array|string $columns = [ '*' ])
	 * @method LaratrustRole getModel()
	 * @method LaratrustRole[] getModels(array|string $columns = [ '*' ])
	 * @method _LaratrustRoleCollection|LaratrustRole[] hydrate(array $items)
	 * @method LaratrustRole make(array $attributes = [])
	 * @method LaratrustRole newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|LaratrustRole[]|_LaratrustRoleCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|LaratrustRole[]|_LaratrustRoleCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method LaratrustRole sole(array|string $columns = [ '*' ])
	 * @method LaratrustRole updateOrCreate(array $attributes, array $values = [])
	 */
	class _LaratrustRoleQueryBuilder extends _BaseBuilder { }

	/**
	 * @method LaratrustTeam shift()
	 * @method LaratrustTeam pop()
	 * @method LaratrustTeam get($key, $default = null)
	 * @method LaratrustTeam pull($key, $default = null)
	 * @method LaratrustTeam first(callable $callback = null, $default = null)
	 * @method LaratrustTeam firstWhere(string $key, $operator = null, $value = null)
	 * @method LaratrustTeam[] all()
	 * @method LaratrustTeam last(callable $callback = null, $default = null)
	 * @property-read _LaratrustTeamCollectionProxy $keyBy
	 * @property-read _LaratrustTeamCollectionProxy $partition
	 * @property-read _LaratrustTeamCollectionProxy $max
	 * @property-read _LaratrustTeamCollectionProxy $flatMap
	 * @property-read _LaratrustTeamCollectionProxy $each
	 * @property-read _LaratrustTeamCollectionProxy $map
	 * @property-read _LaratrustTeamCollectionProxy $filter
	 * @property-read _LaratrustTeamCollectionProxy $unique
	 * @property-read _LaratrustTeamCollectionProxy $groupBy
	 * @property-read _LaratrustTeamCollectionProxy $sortBy
	 * @property-read _LaratrustTeamCollectionProxy $contains
	 * @property-read _LaratrustTeamCollectionProxy $sum
	 * @property-read _LaratrustTeamCollectionProxy $until
	 * @property-read _LaratrustTeamCollectionProxy $every
	 * @property-read _LaratrustTeamCollectionProxy $average
	 * @property-read _LaratrustTeamCollectionProxy $some
	 * @property-read _LaratrustTeamCollectionProxy $skipWhile
	 * @property-read _LaratrustTeamCollectionProxy $sortByDesc
	 * @property-read _LaratrustTeamCollectionProxy $takeUntil
	 * @property-read _LaratrustTeamCollectionProxy $avg
	 * @property-read _LaratrustTeamCollectionProxy $skipUntil
	 * @property-read _LaratrustTeamCollectionProxy $first
	 * @property-read _LaratrustTeamCollectionProxy $takeWhile
	 * @property-read _LaratrustTeamCollectionProxy $min
	 * @property-read _LaratrustTeamCollectionProxy $reject
	 */
	class _LaratrustTeamCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return LaratrustTeam[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @see \Laratrust\Traits\LaratrustTeamTrait::getMorphByUserRelation
	 * @method _LaratrustTeamCollection getMorphByUserRelation(string $relationship)
	 * @see \Laratrust\Traits\LaratrustDynamicUserRelationsCalls::getUsersRelationValue
	 * @method _LaratrustTeamCollection getUsersRelationValue(string $key)
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _LaratrustTeamCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _LaratrustTeamCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _LaratrustTeamCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _LaratrustTeamCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _LaratrustTeamCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _LaratrustTeamCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _LaratrustTeamCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _LaratrustTeamCollectionProxy { }

	/**
	 * @method LaratrustTeam baseSole(array|string $columns = [ '*' ])
	 * @method LaratrustTeam create(array $attributes = [])
	 * @method _LaratrustTeamCollection|LaratrustTeam[] cursor()
	 * @method LaratrustTeam|null find($id, array $columns = [ '*' ])
	 * @method _LaratrustTeamCollection|LaratrustTeam[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method LaratrustTeam findOrFail($id, array $columns = [ '*' ])
	 * @method _LaratrustTeamCollection|LaratrustTeam[] findOrNew($id, array $columns = [ '*' ])
	 * @method LaratrustTeam first(array|string $columns = [ '*' ])
	 * @method LaratrustTeam firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method LaratrustTeam firstOrCreate(array $attributes = [], array $values = [])
	 * @method LaratrustTeam firstOrFail(array $columns = [ '*' ])
	 * @method LaratrustTeam firstOrNew(array $attributes = [], array $values = [])
	 * @method LaratrustTeam firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method LaratrustTeam forceCreate(array $attributes)
	 * @method _LaratrustTeamCollection|LaratrustTeam[] fromQuery(string $query, array $bindings = [])
	 * @method _LaratrustTeamCollection|LaratrustTeam[] get(array|string $columns = [ '*' ])
	 * @method LaratrustTeam getModel()
	 * @method LaratrustTeam[] getModels(array|string $columns = [ '*' ])
	 * @method _LaratrustTeamCollection|LaratrustTeam[] hydrate(array $items)
	 * @method LaratrustTeam make(array $attributes = [])
	 * @method LaratrustTeam newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|LaratrustTeam[]|_LaratrustTeamCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|LaratrustTeam[]|_LaratrustTeamCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method LaratrustTeam sole(array|string $columns = [ '*' ])
	 * @method LaratrustTeam updateOrCreate(array $attributes, array $values = [])
	 */
	class _LaratrustTeamQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\Laravel\Sanctum {

    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use LaravelIdea\Helper\_BaseCollection;
    use Laravel\Sanctum\PersonalAccessToken;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;

    /**
	 * @method PersonalAccessToken shift()
	 * @method PersonalAccessToken pop()
	 * @method PersonalAccessToken get($key, $default = null)
	 * @method PersonalAccessToken pull($key, $default = null)
	 * @method PersonalAccessToken first(callable $callback = null, $default = null)
	 * @method PersonalAccessToken firstWhere(string $key, $operator = null, $value = null)
	 * @method PersonalAccessToken[] all()
	 * @method PersonalAccessToken last(callable $callback = null, $default = null)
	 * @property-read _PersonalAccessTokenCollectionProxy $keyBy
	 * @property-read _PersonalAccessTokenCollectionProxy $partition
	 * @property-read _PersonalAccessTokenCollectionProxy $max
	 * @property-read _PersonalAccessTokenCollectionProxy $flatMap
	 * @property-read _PersonalAccessTokenCollectionProxy $each
	 * @property-read _PersonalAccessTokenCollectionProxy $map
	 * @property-read _PersonalAccessTokenCollectionProxy $filter
	 * @property-read _PersonalAccessTokenCollectionProxy $unique
	 * @property-read _PersonalAccessTokenCollectionProxy $groupBy
	 * @property-read _PersonalAccessTokenCollectionProxy $sortBy
	 * @property-read _PersonalAccessTokenCollectionProxy $contains
	 * @property-read _PersonalAccessTokenCollectionProxy $sum
	 * @property-read _PersonalAccessTokenCollectionProxy $until
	 * @property-read _PersonalAccessTokenCollectionProxy $every
	 * @property-read _PersonalAccessTokenCollectionProxy $average
	 * @property-read _PersonalAccessTokenCollectionProxy $some
	 * @property-read _PersonalAccessTokenCollectionProxy $skipWhile
	 * @property-read _PersonalAccessTokenCollectionProxy $sortByDesc
	 * @property-read _PersonalAccessTokenCollectionProxy $takeUntil
	 * @property-read _PersonalAccessTokenCollectionProxy $avg
	 * @property-read _PersonalAccessTokenCollectionProxy $skipUntil
	 * @property-read _PersonalAccessTokenCollectionProxy $first
	 * @property-read _PersonalAccessTokenCollectionProxy $takeWhile
	 * @property-read _PersonalAccessTokenCollectionProxy $min
	 * @property-read _PersonalAccessTokenCollectionProxy $reject
	 */
	class _PersonalAccessTokenCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return PersonalAccessToken[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _PersonalAccessTokenCollection|mixed $tokenable
	 * @see \Laravel\Sanctum\PersonalAccessToken::can
	 * @method _PersonalAccessTokenCollection can(string $ability)
	 * @see \Laravel\Sanctum\PersonalAccessToken::cant
	 * @method _PersonalAccessTokenCollection cant(string $ability)
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _PersonalAccessTokenCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _PersonalAccessTokenCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _PersonalAccessTokenCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _PersonalAccessTokenCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _PersonalAccessTokenCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _PersonalAccessTokenCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _PersonalAccessTokenCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _PersonalAccessTokenCollectionProxy { }

	/**
	 * @method PersonalAccessToken baseSole(array|string $columns = [ '*' ])
	 * @method PersonalAccessToken create(array $attributes = [])
	 * @method _PersonalAccessTokenCollection|PersonalAccessToken[] cursor()
	 * @method PersonalAccessToken|null find($id, array $columns = [ '*' ])
	 * @method _PersonalAccessTokenCollection|PersonalAccessToken[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method PersonalAccessToken findOrFail($id, array $columns = [ '*' ])
	 * @method _PersonalAccessTokenCollection|PersonalAccessToken[] findOrNew($id, array $columns = [ '*' ])
	 * @method PersonalAccessToken first(array|string $columns = [ '*' ])
	 * @method PersonalAccessToken firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method PersonalAccessToken firstOrCreate(array $attributes = [], array $values = [])
	 * @method PersonalAccessToken firstOrFail(array $columns = [ '*' ])
	 * @method PersonalAccessToken firstOrNew(array $attributes = [], array $values = [])
	 * @method PersonalAccessToken firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PersonalAccessToken forceCreate(array $attributes)
	 * @method _PersonalAccessTokenCollection|PersonalAccessToken[] fromQuery(string $query, array $bindings = [])
	 * @method _PersonalAccessTokenCollection|PersonalAccessToken[] get(array|string $columns = [ '*' ])
	 * @method PersonalAccessToken getModel()
	 * @method PersonalAccessToken[] getModels(array|string $columns = [ '*' ])
	 * @method _PersonalAccessTokenCollection|PersonalAccessToken[] hydrate(array $items)
	 * @method PersonalAccessToken make(array $attributes = [])
	 * @method PersonalAccessToken newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|PersonalAccessToken[]|_PersonalAccessTokenCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|PersonalAccessToken[]|_PersonalAccessTokenCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method PersonalAccessToken sole(array|string $columns = [ '*' ])
	 * @method PersonalAccessToken updateOrCreate(array $attributes, array $values = [])
	 */
	class _PersonalAccessTokenQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\Spatie\MediaLibraryPro\Models {

    use Spatie\MediaLibrary\HasMedia;
    use Illuminate\Support\Collection;
    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseBuilder;
    use LaravelIdea\Helper\_BaseCollection;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Spatie\MediaLibraryPro\Models\TemporaryUpload;
    use Spatie\MediaLibrary\MediaCollections\FileAdder;
    use Spatie\MediaLibrary\MediaCollections\Models\Media;
    use Symfony\Component\HttpFoundation\File\UploadedFile;

    /**
	 * @method TemporaryUpload shift()
	 * @method TemporaryUpload pop()
	 * @method TemporaryUpload get($key, $default = null)
	 * @method TemporaryUpload pull($key, $default = null)
	 * @method TemporaryUpload first(callable $callback = null, $default = null)
	 * @method TemporaryUpload firstWhere(string $key, $operator = null, $value = null)
	 * @method TemporaryUpload[] all()
	 * @method TemporaryUpload last(callable $callback = null, $default = null)
	 * @property-read _TemporaryUploadCollectionProxy $keyBy
	 * @property-read _TemporaryUploadCollectionProxy $partition
	 * @property-read _TemporaryUploadCollectionProxy $max
	 * @property-read _TemporaryUploadCollectionProxy $flatMap
	 * @property-read _TemporaryUploadCollectionProxy $each
	 * @property-read _TemporaryUploadCollectionProxy $map
	 * @property-read _TemporaryUploadCollectionProxy $filter
	 * @property-read _TemporaryUploadCollectionProxy $unique
	 * @property-read _TemporaryUploadCollectionProxy $groupBy
	 * @property-read _TemporaryUploadCollectionProxy $sortBy
	 * @property-read _TemporaryUploadCollectionProxy $contains
	 * @property-read _TemporaryUploadCollectionProxy $sum
	 * @property-read _TemporaryUploadCollectionProxy $until
	 * @property-read _TemporaryUploadCollectionProxy $every
	 * @property-read _TemporaryUploadCollectionProxy $average
	 * @property-read _TemporaryUploadCollectionProxy $some
	 * @property-read _TemporaryUploadCollectionProxy $skipWhile
	 * @property-read _TemporaryUploadCollectionProxy $sortByDesc
	 * @property-read _TemporaryUploadCollectionProxy $takeUntil
	 * @property-read _TemporaryUploadCollectionProxy $avg
	 * @property-read _TemporaryUploadCollectionProxy $skipUntil
	 * @property-read _TemporaryUploadCollectionProxy $first
	 * @property-read _TemporaryUploadCollectionProxy $takeWhile
	 * @property-read _TemporaryUploadCollectionProxy $min
	 * @property-read _TemporaryUploadCollectionProxy $reject
	 */
	class _TemporaryUploadCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return TemporaryUpload[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _TemporaryUploadCollection|mixed $id
	 * @property _TemporaryUploadCollection|mixed $session_id
	 * @property _TemporaryUploadCollection|mixed $created_at
	 * @property _TemporaryUploadCollection|mixed $updated_at
	 * @see \Spatie\MediaLibraryPro\Models\TemporaryUpload::registerMediaConversions
	 * @method _TemporaryUploadCollection registerMediaConversions(Media $media = null)
	 * @see \Spatie\MediaLibraryPro\Models\TemporaryUpload::moveMedia
	 * @method _TemporaryUploadCollection moveMedia(HasMedia $toModel, string $collectionName, string $diskName, string $fileName)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::clearMediaCollection
	 * @method _TemporaryUploadCollection clearMediaCollection(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::hasMedia
	 * @method _TemporaryUploadCollection hasMedia(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaCollection
	 * @method _TemporaryUploadCollection addMediaCollection(string $name)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::deleteMedia
	 * @method _TemporaryUploadCollection deleteMedia(int|Media $mediaId)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFirstMediaPath
	 * @method _TemporaryUploadCollection getFirstMediaPath(string $collectionName = 'default', string $conversionName = '')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getMediaCollection
	 * @method _TemporaryUploadCollection getMediaCollection(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::shouldDeletePreservingMedia
	 * @method _TemporaryUploadCollection shouldDeletePreservingMedia()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMultipleMediaFromRequest
	 * @method _TemporaryUploadCollection addMultipleMediaFromRequest(array $keys)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addAllMediaFromRequest
	 * @method _TemporaryUploadCollection addAllMediaFromRequest()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFallbackMediaUrl
	 * @method _TemporaryUploadCollection getFallbackMediaUrl(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::registerMediaCollections
	 * @method _TemporaryUploadCollection registerMediaCollections()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::syncFromMediaLibraryRequest
	 * @method _TemporaryUploadCollection syncFromMediaLibraryRequest(array|null $mediaLibraryRequestItems)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaConversion
	 * @method _TemporaryUploadCollection addMediaConversion(string $name)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::registerAllMediaConversions
	 * @method _TemporaryUploadCollection registerAllMediaConversions(Media $media = null)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::loadMedia
	 * @method _TemporaryUploadCollection loadMedia(string $collectionName)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::updateMedia
	 * @method _TemporaryUploadCollection updateMedia(array $newMediaArray, string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::deletePreservingMedia
	 * @method _TemporaryUploadCollection deletePreservingMedia()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromDisk
	 * @method _TemporaryUploadCollection addMediaFromDisk(string $key, string $disk = null)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFirstMediaUrl
	 * @method _TemporaryUploadCollection getFirstMediaUrl(string $collectionName = 'default', string $conversionName = '')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromUrl
	 * @method _TemporaryUploadCollection addMediaFromUrl(string $url, ...$allowedMimeTypes)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMedia
	 * @method _TemporaryUploadCollection addMedia(string|UploadedFile $file)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::copyMedia
	 * @method _TemporaryUploadCollection copyMedia(string|UploadedFile $file)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromString
	 * @method _TemporaryUploadCollection addMediaFromString(string $text)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromRequest
	 * @method _TemporaryUploadCollection addMediaFromRequest(string $key)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFirstTemporaryUrl
	 * @method _TemporaryUploadCollection getFirstTemporaryUrl(\DateTimeInterface $expiration, string $collectionName = 'default', string $conversionName = '')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFallbackMediaPath
	 * @method _TemporaryUploadCollection getFallbackMediaPath(string $collectionName = 'default')
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addMediaFromBase64
	 * @method _TemporaryUploadCollection addMediaFromBase64(string $base64data, ...$allowedMimeTypes)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getMedia
	 * @method _TemporaryUploadCollection getMedia(string $collectionName = 'default', array|callable $filters = [])
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getRegisteredMediaCollections
	 * @method _TemporaryUploadCollection getRegisteredMediaCollections()
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::getFirstMedia
	 * @method _TemporaryUploadCollection getFirstMedia(string $collectionName = 'default', $filters = [])
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::clearMediaCollectionExcept
	 * @method _TemporaryUploadCollection clearMediaCollectionExcept(string $collectionName = 'default', Collection|Media[] $excludedMedia = [])
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::addFromMediaLibraryRequest
	 * @method _TemporaryUploadCollection addFromMediaLibraryRequest(array|null $mediaLibraryRequestItems)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::processUnattachedMedia
	 * @method _TemporaryUploadCollection processUnattachedMedia(callable $callable)
	 * @see \Spatie\MediaLibrary\InteractsWithMedia::prepareToAttachMedia
	 * @method _TemporaryUploadCollection prepareToAttachMedia(Media $media, FileAdder $fileAdder)
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _TemporaryUploadCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _TemporaryUploadCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _TemporaryUploadCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _TemporaryUploadCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _TemporaryUploadCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _TemporaryUploadCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _TemporaryUploadCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _TemporaryUploadCollectionProxy { }

	/**
	 * @method _TemporaryUploadQueryBuilder whereId($value)
	 * @method _TemporaryUploadQueryBuilder whereSessionId($value)
	 * @method _TemporaryUploadQueryBuilder whereCreatedAt($value)
	 * @method _TemporaryUploadQueryBuilder whereUpdatedAt($value)
	 * @method TemporaryUpload baseSole(array|string $columns = [ '*' ])
	 * @method TemporaryUpload create(array $attributes = [])
	 * @method _TemporaryUploadCollection|TemporaryUpload[] cursor()
	 * @method TemporaryUpload|null find($id, array $columns = [ '*' ])
	 * @method _TemporaryUploadCollection|TemporaryUpload[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method TemporaryUpload findOrFail($id, array $columns = [ '*' ])
	 * @method _TemporaryUploadCollection|TemporaryUpload[] findOrNew($id, array $columns = [ '*' ])
	 * @method TemporaryUpload first(array|string $columns = [ '*' ])
	 * @method TemporaryUpload firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method TemporaryUpload firstOrCreate(array $attributes = [], array $values = [])
	 * @method TemporaryUpload firstOrFail(array $columns = [ '*' ])
	 * @method TemporaryUpload firstOrNew(array $attributes = [], array $values = [])
	 * @method TemporaryUpload firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method TemporaryUpload forceCreate(array $attributes)
	 * @method _TemporaryUploadCollection|TemporaryUpload[] fromQuery(string $query, array $bindings = [])
	 * @method _TemporaryUploadCollection|TemporaryUpload[] get(array|string $columns = [ '*' ])
	 * @method TemporaryUpload getModel()
	 * @method TemporaryUpload[] getModels(array|string $columns = [ '*' ])
	 * @method _TemporaryUploadCollection|TemporaryUpload[] hydrate(array $items)
	 * @method TemporaryUpload make(array $attributes = [])
	 * @method TemporaryUpload newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|TemporaryUpload[]|_TemporaryUploadCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|TemporaryUpload[]|_TemporaryUploadCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method TemporaryUpload sole(array|string $columns = [ '*' ])
	 * @method TemporaryUpload updateOrCreate(array $attributes, array $values = [])
	 * @method _TemporaryUploadQueryBuilder old()
	 */
	class _TemporaryUploadQueryBuilder extends _BaseBuilder { }
}

namespace LaravelIdea\Helper\Spatie\MediaLibrary\MediaCollections\Models {

    use Spatie\MediaLibrary\HasMedia;
    use LaravelIdea\Helper\_BaseBuilder;
    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\_BaseCollection;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Spatie\MediaLibrary\MediaCollections\Models\Media;
    use Spatie\MediaLibrary\MediaCollections\Models\Collections\MediaCollection;

    /**
	 * @method Media shift()
	 * @method Media pop()
	 * @method Media get($key, $default = null)
	 * @method Media pull($key, $default = null)
	 * @method Media first(callable $callback = null, $default = null)
	 * @method Media firstWhere(string $key, $operator = null, $value = null)
	 * @method Media[] all()
	 * @method Media last(callable $callback = null, $default = null)
	 * @property-read _MediaCollectionProxy $keyBy
	 * @property-read _MediaCollectionProxy $partition
	 * @property-read _MediaCollectionProxy $max
	 * @property-read _MediaCollectionProxy $flatMap
	 * @property-read _MediaCollectionProxy $each
	 * @property-read _MediaCollectionProxy $map
	 * @property-read _MediaCollectionProxy $filter
	 * @property-read _MediaCollectionProxy $unique
	 * @property-read _MediaCollectionProxy $groupBy
	 * @property-read _MediaCollectionProxy $sortBy
	 * @property-read _MediaCollectionProxy $contains
	 * @property-read _MediaCollectionProxy $sum
	 * @property-read _MediaCollectionProxy $until
	 * @property-read _MediaCollectionProxy $every
	 * @property-read _MediaCollectionProxy $average
	 * @property-read _MediaCollectionProxy $some
	 * @property-read _MediaCollectionProxy $skipWhile
	 * @property-read _MediaCollectionProxy $sortByDesc
	 * @property-read _MediaCollectionProxy $takeUntil
	 * @property-read _MediaCollectionProxy $avg
	 * @property-read _MediaCollectionProxy $skipUntil
	 * @property-read _MediaCollectionProxy $first
	 * @property-read _MediaCollectionProxy $takeWhile
	 * @property-read _MediaCollectionProxy $min
	 * @property-read _MediaCollectionProxy $reject
	 * @method $this jsonSerialize()
	 * @method $this collectionName(string $collectionName)
	 * @method $this formFieldName(string $formFieldName)
	 * @method $this mapWithKeys(callable $callback)
	 * @method $this pad(int $size, $value)
	 * @method $this keys()
	 * @method $this loadMin(array|string $relations, string $column)
	 * @method $this loadMissing(array|string $relations)
	 * @method $this loadCount(array|string $relations)
	 * @method $this merge(array|\ArrayAccess $items)
	 * @method $this loadMax(array|string $relations, string $column)
	 * @method $this loadMorph(string $relation, array $relations)
	 * @method $this loadSum(array|string $relations, string $column)
	 * @method $this pluck(array|string $value, null|string $key = null)
	 * @method $this map(callable $callback)
	 * @method $this unique(callable|null|string $key = null, bool $strict = false)
	 * @method $this load(array|string $relations)
	 * @method $this diff(array|\ArrayAccess $items)
	 * @method $this only($keys)
	 * @method $this collapse()
	 * @method $this append(array|string $attributes)
	 * @method $this makeHidden(array|string $attributes)
	 * @method $this flatten(int $depth = INF)
	 * @method $this makeVisible(array|string $attributes)
	 * @method $this fresh(array|string $with = [])
	 * @method $this flip()
	 * @method $this intersect(array|\ArrayAccess $items)
	 * @method $this except($keys)
	 * @method $this loadAvg(array|string $relations, string $column)
	 * @method $this zip(array $items)
	 * @method $this loadAggregate(array|string $relations, string $column, string $function = null)
	 * @method $this loadMorphCount(string $relation, array $relations)
	 * @mixin MediaCollection
	 */
	class _MediaCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 *
		 * @return Media[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @property _MediaCollection|mixed $id
	 * @property _MediaCollection|mixed $model_id
	 * @property _MediaCollection|mixed $model_type
	 * @property _MediaCollection|mixed $uuid
	 * @property _MediaCollection|mixed $collection_name
	 * @property _MediaCollection|mixed $name
	 * @property _MediaCollection|mixed $file_name
	 * @property _MediaCollection|mixed $mime_type
	 * @property _MediaCollection|mixed $disk
	 * @property _MediaCollection|mixed $conversions_disk
	 * @property _MediaCollection|mixed $size
	 * @property _MediaCollection|mixed $manipulations
	 * @property _MediaCollection|mixed $custom_properties
	 * @property _MediaCollection|mixed $generated_conversions
	 * @property _MediaCollection|mixed $responsive_images
	 * @property _MediaCollection|mixed $order_column
	 * @property _MediaCollection|mixed $created_at
	 * @property _MediaCollection|mixed $updated_at
	 * @property _MediaCollection|mixed $model
	 * @property _MediaCollection|mixed $temporaryUpload
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::stream
	 * @method _MediaCollection stream()
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::getConversionsDiskDriverName
	 * @method _MediaCollection getConversionsDiskDriverName()
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::getMediaConversionNames
	 * @method _MediaCollection getMediaConversionNames()
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::move
	 * @method _MediaCollection move(HasMedia $model, $collectionName = 'default', string $diskName = '', string $fileName = '')
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::getResponsiveImageUrls
	 * @method _MediaCollection getResponsiveImageUrls(string $conversionName = '')
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::hasCustomProperty
	 * @method _MediaCollection hasCustomProperty(string $propertyName)
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::getTypeFromExtension
	 * @method _MediaCollection getTypeFromExtension()
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::toResponse
	 * @method _MediaCollection toResponse($request)
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::img
	 * @method _MediaCollection img(string $conversionName = '', $extraAttributes = [])
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::getUrl
	 * @method _MediaCollection getUrl(string $conversionName = '')
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::getPath
	 * @method _MediaCollection getPath(string $conversionName = '')
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::forgetCustomProperty
	 * @method _MediaCollection forgetCustomProperty(string $name)
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::setCustomProperty
	 * @method _MediaCollection setCustomProperty(string $name, $value)
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::getDiskDriverName
	 * @method _MediaCollection getDiskDriverName()
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::responsiveImages
	 * @method _MediaCollection responsiveImages(string $conversionName = '')
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::getGeneratedConversions
	 * @method _MediaCollection getGeneratedConversions()
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::hasGeneratedConversion
	 * @method _MediaCollection hasGeneratedConversion(string $conversionName)
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::getFullUrl
	 * @method _MediaCollection getFullUrl(string $conversionName = '')
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::getTypeFromMime
	 * @method _MediaCollection getTypeFromMime()
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::getTemporaryUrl
	 * @method _MediaCollection getTemporaryUrl(\DateTimeInterface $expiration, string $conversionName = '', array $options = [])
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::toHtml
	 * @method _MediaCollection toHtml()
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::getSrcset
	 * @method _MediaCollection getSrcset(string $conversionName = '')
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::hasResponsiveImages
	 * @method _MediaCollection hasResponsiveImages(string $conversionName = '')
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::getCustomProperty
	 * @method _MediaCollection getCustomProperty(string $propertyName, $default = null)
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::markAsConversionGenerated
	 * @method _MediaCollection markAsConversionGenerated(string $conversionName)
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::copy
	 * @method _MediaCollection copy(HasMedia $model, $collectionName = 'default', string $diskName = '', string $fileName = '')
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Media::markAsConversionNotGenerated
	 * @method _MediaCollection markAsConversionNotGenerated(string $conversionName)
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Concerns\CustomMediaProperties::getCustomHeaders
	 * @method _MediaCollection getCustomHeaders()
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Concerns\CustomMediaProperties::setCustomHeaders
	 * @method _MediaCollection setCustomHeaders(array $customHeaders)
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Concerns\IsSorted::setHighestOrderNumber
	 * @method _MediaCollection setHighestOrderNumber()
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Concerns\IsSorted::getHighestOrderNumber
	 * @method _MediaCollection getHighestOrderNumber()
	 * @see \Spatie\MediaLibrary\MediaCollections\Models\Concerns\IsSorted::shouldSortWhenCreating
	 * @method _MediaCollection shouldSortWhenCreating()
	 * @see \Illuminate\Database\Eloquent\Model::save
	 * @method _MediaCollection save(array $options = [])
	 * @see \Illuminate\Database\Eloquent\Concerns\HasTimestamps::touch
	 * @method _MediaCollection touch()
	 * @see \Illuminate\Database\Eloquent\Model::fill
	 * @method _MediaCollection fill(array $attributes)
	 * @see \Illuminate\Database\Eloquent\Model::delete
	 * @method _MediaCollection delete()
	 * @see \Illuminate\Database\Eloquent\Model::update
	 * @method _MediaCollection update(array $attributes = [], array $options = [])
	 * @see \Illuminate\Database\Eloquent\Model::increment
	 * @method _MediaCollection increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Eloquent\Model::decrement
	 * @method _MediaCollection decrement(string $column, float|int $amount = 1, array $extra = [])
	 */
	class _MediaCollectionProxy { }

	/**
	 * @method _MediaQueryBuilder whereId($value)
	 * @method _MediaQueryBuilder whereModelId($value)
	 * @method _MediaQueryBuilder whereModelType($value)
	 * @method _MediaQueryBuilder whereUuid($value)
	 * @method _MediaQueryBuilder whereCollectionName($value)
	 * @method _MediaQueryBuilder whereName($value)
	 * @method _MediaQueryBuilder whereFileName($value)
	 * @method _MediaQueryBuilder whereMimeType($value)
	 * @method _MediaQueryBuilder whereDisk($value)
	 * @method _MediaQueryBuilder whereConversionsDisk($value)
	 * @method _MediaQueryBuilder whereSize($value)
	 * @method _MediaQueryBuilder whereManipulations($value)
	 * @method _MediaQueryBuilder whereCustomProperties($value)
	 * @method _MediaQueryBuilder whereGeneratedConversions($value)
	 * @method _MediaQueryBuilder whereResponsiveImages($value)
	 * @method _MediaQueryBuilder whereOrderColumn($value)
	 * @method _MediaQueryBuilder whereCreatedAt($value)
	 * @method _MediaQueryBuilder whereUpdatedAt($value)
	 * @method Media baseSole(array|string $columns = [ '*' ])
	 * @method Media create(array $attributes = [])
	 * @method _MediaCollection|Media[] cursor()
	 * @method Media|null find($id, array $columns = [ '*' ])
	 * @method _MediaCollection|Media[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method Media findOrFail($id, array $columns = [ '*' ])
	 * @method _MediaCollection|Media[] findOrNew($id, array $columns = [ '*' ])
	 * @method Media first(array|string $columns = [ '*' ])
	 * @method Media firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method Media firstOrCreate(array $attributes = [], array $values = [])
	 * @method Media firstOrFail(array $columns = [ '*' ])
	 * @method Media firstOrNew(array $attributes = [], array $values = [])
	 * @method Media firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Media forceCreate(array $attributes)
	 * @method _MediaCollection|Media[] fromQuery(string $query, array $bindings = [])
	 * @method _MediaCollection|Media[] get(array|string $columns = [ '*' ])
	 * @method Media getModel()
	 * @method Media[] getModels(array|string $columns = [ '*' ])
	 * @method _MediaCollection|Media[] hydrate(array $items)
	 * @method Media make(array $attributes = [])
	 * @method Media newModelInstance(array $attributes = [])
	 * @method LengthAwarePaginator|Media[]|_MediaCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Paginator|Media[]|_MediaCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method Media sole(array|string $columns = [ '*' ])
	 * @method Media updateOrCreate(array $attributes, array $values = [])
	 * @method _MediaQueryBuilder ordered()
	 */
	class _MediaQueryBuilder extends _BaseBuilder { }
}

namespace Laravel\Sanctum {

    use Illuminate\Pagination\Paginator;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use LaravelIdea\Helper\Laravel\Sanctum\_PersonalAccessTokenCollection;
    use LaravelIdea\Helper\Laravel\Sanctum\_PersonalAccessTokenQueryBuilder;

    /**
	 * @property Model $tokenable
	 * @method MorphTo tokenable()
	 * @method _PersonalAccessTokenQueryBuilder newModelQuery()
	 * @method _PersonalAccessTokenQueryBuilder newQuery()
	 * @method static _PersonalAccessTokenQueryBuilder query()
	 * @method static _PersonalAccessTokenCollection|PersonalAccessToken[] all()
	 * @method static PersonalAccessToken baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PersonalAccessToken create(array $attributes = [])
	 * @method static _PersonalAccessTokenQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PersonalAccessTokenCollection|PersonalAccessToken[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PersonalAccessTokenQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PersonalAccessToken|null find($id, array $columns = [ '*' ])
	 * @method static _PersonalAccessTokenCollection|PersonalAccessToken[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static PersonalAccessToken findOrFail($id, array $columns = [ '*' ])
	 * @method static _PersonalAccessTokenCollection|PersonalAccessToken[] findOrNew($id, array $columns = [ '*' ])
	 * @method static PersonalAccessToken first(array|string $columns = [ '*' ])
	 * @method static PersonalAccessToken firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static PersonalAccessToken firstOrCreate(array $attributes = [], array $values = [])
	 * @method static PersonalAccessToken firstOrFail(array $columns = [ '*' ])
	 * @method static PersonalAccessToken firstOrNew(array $attributes = [], array $values = [])
	 * @method static PersonalAccessToken firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PersonalAccessToken forceCreate(array $attributes)
	 * @method static _PersonalAccessTokenCollection|PersonalAccessToken[] fromQuery(string $query, array $bindings = [])
	 * @method static _PersonalAccessTokenCollection|PersonalAccessToken[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static PersonalAccessToken getModel()
	 * @method static PersonalAccessToken[] getModels(array|string $columns = [ '*' ])
	 * @method static _PersonalAccessTokenQueryBuilder getQuery()
	 * @method static _PersonalAccessTokenQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _PersonalAccessTokenCollection|PersonalAccessToken[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _PersonalAccessTokenQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PersonalAccessTokenQueryBuilder latest(Expression|string $column = null)
	 * @method static _PersonalAccessTokenQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PersonalAccessTokenQueryBuilder limit(int $value)
	 * @method static PersonalAccessToken make(array $attributes = [])
	 * @method static PersonalAccessToken newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _PersonalAccessTokenQueryBuilder offset(int $value)
	 * @method static _PersonalAccessTokenQueryBuilder oldest(Expression|string $column = null)
	 * @method static _PersonalAccessTokenQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _PersonalAccessTokenQueryBuilder orderByDesc(string $column)
	 * @method static _PersonalAccessTokenQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|PersonalAccessToken[]|_PersonalAccessTokenCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _PersonalAccessTokenQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PersonalAccessTokenQueryBuilder select(array $columns = [ '*' ])
	 * @method static _PersonalAccessTokenQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|PersonalAccessToken[]|_PersonalAccessTokenCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _PersonalAccessTokenQueryBuilder skip(int $value)
	 * @method static PersonalAccessToken sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _PersonalAccessTokenQueryBuilder take(int $value)
	 * @method static _PersonalAccessTokenQueryBuilder tap(callable $callback)
	 * @method static _PersonalAccessTokenQueryBuilder truncate()
	 * @method static _PersonalAccessTokenQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PersonalAccessToken updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _PersonalAccessTokenQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PersonalAccessTokenQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PersonalAccessTokenQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PersonalAccessTokenQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PersonalAccessTokenQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PersonalAccessTokenQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PersonalAccessTokenQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PersonalAccessTokenQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PersonalAccessTokenQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PersonalAccessTokenQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PersonalAccessTokenQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PersonalAccessTokenQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PersonalAccessTokenQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PersonalAccessTokenQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PersonalAccessTokenQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PersonalAccessTokenQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PersonalAccessTokenQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PersonalAccessTokenQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PersonalAccessTokenQueryBuilder whereKey($id)
	 * @method static _PersonalAccessTokenQueryBuilder whereKeyNot($id)
	 * @method static _PersonalAccessTokenQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PersonalAccessTokenQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PersonalAccessTokenQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PersonalAccessTokenQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _PersonalAccessTokenQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PersonalAccessTokenQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PersonalAccessTokenQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PersonalAccessTokenQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PersonalAccessTokenQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PersonalAccessTokenQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PersonalAccessTokenQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PersonalAccessTokenQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PersonalAccessTokenQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _PersonalAccessTokenQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _PersonalAccessTokenQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _PersonalAccessTokenQueryBuilder withCasts(array $casts)
	 * @method static _PersonalAccessTokenQueryBuilder withCount($relations)
	 * @method static _PersonalAccessTokenQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _PersonalAccessTokenQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _PersonalAccessTokenQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _PersonalAccessTokenQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _PersonalAccessTokenQueryBuilder without($relations)
	 * @method static _PersonalAccessTokenQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PersonalAccessTokenQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class PersonalAccessToken extends Model { }
}

namespace Spatie\MediaLibraryPro\Models {

    use Illuminate\Support\Carbon;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Relations\MorphToMany;
    use LaravelIdea\Helper\Spatie\MediaLibraryPro\Models\_TemporaryUploadCollection;
    use LaravelIdea\Helper\Spatie\MediaLibraryPro\Models\_TemporaryUploadQueryBuilder;
    use LaravelIdea\Helper\Spatie\MediaLibrary\MediaCollections\Models\_MediaCollection;
    use LaravelIdea\Helper\Spatie\MediaLibrary\MediaCollections\Models\_MediaQueryBuilder;

    /**
	 * @property int                      $id
	 * @property string                   $session_id
	 * @property Carbon|null              $created_at
	 * @property Carbon|null              $updated_at
	 * @property _MediaCollection|Media[] $media
	 * @method MorphToMany|_MediaQueryBuilder media()
	 * @method _TemporaryUploadQueryBuilder newModelQuery()
	 * @method _TemporaryUploadQueryBuilder newQuery()
	 * @method static _TemporaryUploadQueryBuilder query()
	 * @method static _TemporaryUploadCollection|TemporaryUpload[] all()
	 * @method static _TemporaryUploadQueryBuilder whereId($value)
	 * @method static _TemporaryUploadQueryBuilder whereSessionId($value)
	 * @method static _TemporaryUploadQueryBuilder whereCreatedAt($value)
	 * @method static _TemporaryUploadQueryBuilder whereUpdatedAt($value)
	 * @method static TemporaryUpload baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static TemporaryUpload create(array $attributes = [])
	 * @method static _TemporaryUploadQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _TemporaryUploadCollection|TemporaryUpload[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _TemporaryUploadQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static TemporaryUpload|null find($id, array $columns = [ '*' ])
	 * @method static _TemporaryUploadCollection|TemporaryUpload[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static TemporaryUpload findOrFail($id, array $columns = [ '*' ])
	 * @method static _TemporaryUploadCollection|TemporaryUpload[] findOrNew($id, array $columns = [ '*' ])
	 * @method static TemporaryUpload first(array|string $columns = [ '*' ])
	 * @method static TemporaryUpload firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static TemporaryUpload firstOrCreate(array $attributes = [], array $values = [])
	 * @method static TemporaryUpload firstOrFail(array $columns = [ '*' ])
	 * @method static TemporaryUpload firstOrNew(array $attributes = [], array $values = [])
	 * @method static TemporaryUpload firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static TemporaryUpload forceCreate(array $attributes)
	 * @method static _TemporaryUploadCollection|TemporaryUpload[] fromQuery(string $query, array $bindings = [])
	 * @method static _TemporaryUploadCollection|TemporaryUpload[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static TemporaryUpload getModel()
	 * @method static TemporaryUpload[] getModels(array|string $columns = [ '*' ])
	 * @method static _TemporaryUploadQueryBuilder getQuery()
	 * @method static _TemporaryUploadQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _TemporaryUploadCollection|TemporaryUpload[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _TemporaryUploadQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _TemporaryUploadQueryBuilder latest(Expression|string $column = null)
	 * @method static _TemporaryUploadQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _TemporaryUploadQueryBuilder limit(int $value)
	 * @method static TemporaryUpload make(array $attributes = [])
	 * @method static TemporaryUpload newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _TemporaryUploadQueryBuilder offset(int $value)
	 * @method static _TemporaryUploadQueryBuilder oldest(Expression|string $column = null)
	 * @method static _TemporaryUploadQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _TemporaryUploadQueryBuilder orderByDesc(string $column)
	 * @method static _TemporaryUploadQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|TemporaryUpload[]|_TemporaryUploadCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _TemporaryUploadQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _TemporaryUploadQueryBuilder select(array $columns = [ '*' ])
	 * @method static _TemporaryUploadQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|TemporaryUpload[]|_TemporaryUploadCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _TemporaryUploadQueryBuilder skip(int $value)
	 * @method static TemporaryUpload sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _TemporaryUploadQueryBuilder take(int $value)
	 * @method static _TemporaryUploadQueryBuilder tap(callable $callback)
	 * @method static _TemporaryUploadQueryBuilder truncate()
	 * @method static _TemporaryUploadQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static TemporaryUpload updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _TemporaryUploadQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _TemporaryUploadQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _TemporaryUploadQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _TemporaryUploadQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _TemporaryUploadQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _TemporaryUploadQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TemporaryUploadQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TemporaryUploadQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _TemporaryUploadQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _TemporaryUploadQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _TemporaryUploadQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _TemporaryUploadQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _TemporaryUploadQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _TemporaryUploadQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _TemporaryUploadQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _TemporaryUploadQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _TemporaryUploadQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _TemporaryUploadQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _TemporaryUploadQueryBuilder whereKey($id)
	 * @method static _TemporaryUploadQueryBuilder whereKeyNot($id)
	 * @method static _TemporaryUploadQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TemporaryUploadQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _TemporaryUploadQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _TemporaryUploadQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _TemporaryUploadQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _TemporaryUploadQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _TemporaryUploadQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _TemporaryUploadQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _TemporaryUploadQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _TemporaryUploadQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _TemporaryUploadQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _TemporaryUploadQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _TemporaryUploadQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _TemporaryUploadQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _TemporaryUploadQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _TemporaryUploadQueryBuilder withCasts(array $casts)
	 * @method static _TemporaryUploadQueryBuilder withCount($relations)
	 * @method static _TemporaryUploadQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _TemporaryUploadQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _TemporaryUploadQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _TemporaryUploadQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _TemporaryUploadQueryBuilder without($relations)
	 * @method static _TemporaryUploadQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _TemporaryUploadQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _TemporaryUploadQueryBuilder old()
	 */
	class TemporaryUpload extends Model { }
}

namespace Spatie\MediaLibrary\MediaCollections\Models {

    use Illuminate\Support\Carbon;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Relations\BelongsTo;
    use LaravelIdea\Helper\Spatie\MediaLibraryPro\Models\_TemporaryUploadQueryBuilder;
    use LaravelIdea\Helper\Spatie\MediaLibrary\MediaCollections\Models\_MediaCollection;
    use LaravelIdea\Helper\Spatie\MediaLibrary\MediaCollections\Models\_MediaQueryBuilder;

    /**
	 * @property int             $id
	 * @property int             $model_id
	 * @property string          $model_type
	 * @property string|null     $uuid
	 * @property string          $collection_name
	 * @property string          $name
	 * @property string          $file_name
	 * @property string|null     $mime_type
	 * @property string          $disk
	 * @property string|null     $conversions_disk
	 * @property int             $size
	 * @property array           $manipulations
	 * @property array           $custom_properties
	 * @property array           $generated_conversions
	 * @property array           $responsive_images
	 * @property int|null        $order_column
	 * @property Carbon|null     $created_at
	 * @property Carbon|null     $updated_at
	 * @property-read string     $extension
	 * @property-read string     $human_readable_size
	 * @property-read string     $type
	 * @property Model           $model
	 * @method MorphTo model()
	 * @property TemporaryUpload $temporaryUpload
	 * @method BelongsTo|_TemporaryUploadQueryBuilder temporaryUpload()
	 * @method _MediaQueryBuilder newModelQuery()
	 * @method _MediaQueryBuilder newQuery()
	 * @method static _MediaQueryBuilder query()
	 * @method static _MediaCollection|Media[] all()
	 * @method static _MediaQueryBuilder whereId($value)
	 * @method static _MediaQueryBuilder whereModelId($value)
	 * @method static _MediaQueryBuilder whereModelType($value)
	 * @method static _MediaQueryBuilder whereUuid($value)
	 * @method static _MediaQueryBuilder whereCollectionName($value)
	 * @method static _MediaQueryBuilder whereName($value)
	 * @method static _MediaQueryBuilder whereFileName($value)
	 * @method static _MediaQueryBuilder whereMimeType($value)
	 * @method static _MediaQueryBuilder whereDisk($value)
	 * @method static _MediaQueryBuilder whereConversionsDisk($value)
	 * @method static _MediaQueryBuilder whereSize($value)
	 * @method static _MediaQueryBuilder whereManipulations($value)
	 * @method static _MediaQueryBuilder whereCustomProperties($value)
	 * @method static _MediaQueryBuilder whereGeneratedConversions($value)
	 * @method static _MediaQueryBuilder whereResponsiveImages($value)
	 * @method static _MediaQueryBuilder whereOrderColumn($value)
	 * @method static _MediaQueryBuilder whereCreatedAt($value)
	 * @method static _MediaQueryBuilder whereUpdatedAt($value)
	 * @method static Media baseSole(array|string $columns = [ '*' ])
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Media create(array $attributes = [])
	 * @method static _MediaQueryBuilder crossJoin(string $table, null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _MediaCollection|Media[] cursor()
	 * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _MediaQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Media|null find($id, array $columns = [ '*' ])
	 * @method static _MediaCollection|Media[] findMany(array|Arrayable $ids, array $columns = [ '*' ])
	 * @method static Media findOrFail($id, array $columns = [ '*' ])
	 * @method static _MediaCollection|Media[] findOrNew($id, array $columns = [ '*' ])
	 * @method static Media first(array|string $columns = [ '*' ])
	 * @method static Media firstOr(array $columns = [ '*' ], \Closure $callback = null)
	 * @method static Media firstOrCreate(array $attributes = [], array $values = [])
	 * @method static Media firstOrFail(array $columns = [ '*' ])
	 * @method static Media firstOrNew(array $attributes = [], array $values = [])
	 * @method static Media firstWhere(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Media forceCreate(array $attributes)
	 * @method static _MediaCollection|Media[] fromQuery(string $query, array $bindings = [])
	 * @method static _MediaCollection|Media[] get(array|string $columns = [ '*' ])
	 * @method static int getCountForPagination(array $columns = [ '*' ])
	 * @method static Media getModel()
	 * @method static Media[] getModels(array|string $columns = [ '*' ])
	 * @method static _MediaQueryBuilder getQuery()
	 * @method static _MediaQueryBuilder groupBy(...$groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static bool hasNamedScope(string $scope)
	 * @method static _MediaCollection|Media[] hydrate(array $items)
	 * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Illuminate\Database\Query\Builder|string $query)
	 * @method static _MediaQueryBuilder join(string $table, string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _MediaQueryBuilder latest(Expression|string $column = null)
	 * @method static _MediaQueryBuilder leftJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _MediaQueryBuilder limit(int $value)
	 * @method static Media make(array $attributes = [])
	 * @method static Media newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = [ '*' ])
	 * @method static _MediaQueryBuilder offset(int $value)
	 * @method static _MediaQueryBuilder oldest(Expression|string $column = null)
	 * @method static _MediaQueryBuilder orderBy(\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
	 * @method static _MediaQueryBuilder orderByDesc(string $column)
	 * @method static _MediaQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static LengthAwarePaginator|Media[]|_MediaCollection paginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _MediaQueryBuilder rightJoin(string $table, string $first, null|string $operator = null, null|string $second = null)
	 * @method static _MediaQueryBuilder select(array $columns = [ '*' ])
	 * @method static _MediaQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static Paginator|Media[]|_MediaCollection simplePaginate(int|null $perPage = null, array $columns = [ '*' ], string $pageName = 'page', int|null $page = null)
	 * @method static _MediaQueryBuilder skip(int $value)
	 * @method static Media sole(array|string $columns = [ '*' ])
	 * @method static int sum(string $column)
	 * @method static _MediaQueryBuilder take(int $value)
	 * @method static _MediaQueryBuilder tap(callable $callback)
	 * @method static _MediaQueryBuilder truncate()
	 * @method static _MediaQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Media updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
	 * @method static _MediaQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _MediaQueryBuilder where(array|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _MediaQueryBuilder whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _MediaQueryBuilder whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _MediaQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _MediaQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MediaQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MediaQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _MediaQueryBuilder whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
	 * @method static _MediaQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _MediaQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _MediaQueryBuilder whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _MediaQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _MediaQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _MediaQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _MediaQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _MediaQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _MediaQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _MediaQueryBuilder whereKey($id)
	 * @method static _MediaQueryBuilder whereKeyNot($id)
	 * @method static _MediaQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MediaQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _MediaQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _MediaQueryBuilder whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
	 * @method static _MediaQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _MediaQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _MediaQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _MediaQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _MediaQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _MediaQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _MediaQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _MediaQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _MediaQueryBuilder with(array|string $relations, null|string $callback = null)
	 * @method static _MediaQueryBuilder withAggregate($relations, string $column, string $function = null)
	 * @method static _MediaQueryBuilder withAvg(array|string $relation, string $column)
	 * @method static _MediaQueryBuilder withCasts(array $casts)
	 * @method static _MediaQueryBuilder withCount($relations)
	 * @method static _MediaQueryBuilder withGlobalScope(string $identifier, Scope $scope)
	 * @method static _MediaQueryBuilder withMax(array|string $relation, string $column)
	 * @method static _MediaQueryBuilder withMin(array|string $relation, string $column)
	 * @method static _MediaQueryBuilder withSum(array|string $relation, string $column)
	 * @method static _MediaQueryBuilder without($relations)
	 * @method static _MediaQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _MediaQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _MediaQueryBuilder ordered()
	 */
	class Media extends Model { }
}
